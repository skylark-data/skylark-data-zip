{"version":3,"sources":["skylark-jszip.js"],"names":["define","Memory","Buffer","support","base64","array","string","arraybuffer","ArrayBuffer","Uint8Array","nodebuffer","buffer","uint8array","blob","Blob","type","size","e","Builder","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","append","getBlob","getTypeOf","input","Object","prototype","toString","call","isBuffer","_keyStr","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","len","length","remainingBytes","isArray","charCodeAt","push","charAt","join","decode","resultIndex","substr","Error","totalLength","replace","Array","indexOf","Promise","transform","arrayLikeToString","constructs","external","utils","newBlob","part","checkSupport","applyFromCharCode","transformTo","outputType","resolve","path","parts","split","result","index","pop","supported","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","str","code","res","toUpperCase","delay","callback","args","setTimeout","apply","inherits","ctor","superCtor","Obj","extend","attr","arguments","hasOwnProperty","prepareContent","name","inputData","isBinary","isOptimizedBinaryString","isBase64","promise","then","data","isBlob","FileReader","reject","reader","onload","target","onerror","error","readAsArrayBuffer","dataType","string2binary","GenericWorker","this","streamInfo","generatedError","extraStreamInfo","isPaused","isFinished","isLocked","_listeners","end","previous","chunk","emit","flush","cleanUp","on","listener","arg","pipe","next","registerPrevious","mergeStreamInfo","processChunk","pause","resume","withError","withStreamInfo","key","value","lock","me","utf8","_utf8len","Utf8DecodeWorker","leftOver","Utf8EncodeWorker","utf8encode","from","buf","c","c2","m_pos","str_len","buf_len","string2buf","utf8decode","out","c_len","utf16buf","subarray","buf2string","previousData","set","concat","nextBoundary","max","pos","utf8border","usableData","slice","meta","ConvertWorker","destType","accumulate","helper","updateCallback","dataArray","chunkType","_internalType","resultType","_outputType","mimeType","_mimeType","err","content","transformZipOutput","StreamHelper","worker","internalType","_worker","updateCb","evt","fn","toNodejsStream","NodejsStreamOutputAdapter","objectMode","exports","module","__isValidToReturn","obj","__isEmptyObject","binary","dir","createFolders","date","compression","compressionOptions","comment","unixPermissions","dosPermissions","DataWorker","dataP","dataIsReady","_tickScheduled","_tickAndRepeat","_tick","nextIndex","Math","min","DEFAULT_BLOCK_SIZE","substring","percent","crcTable","table","n","k","makeTable","crc","t","crc32","crc32str","Crc32Probe","DataLengthProbe","propName","CompressedObject","compressedSize","uncompressedSize","compressedContent","getContentWorker","uncompressWorker","that","getCompressedWorker","createWorkerFrom","uncompressedWorker","compressWorker","ZipObject","options","_data","_dataBinary","internalStream","askUnicodeString","_decompressWorker","isUnicodeString","async","onUpdate","nodeStream","_compressWorker","magic","removedMethods","removedFn","pako","USE_TYPEDARRAY","Uint16Array","Uint32Array","ARRAY_TYPE","flate","FlateWorker","action","_pako","_pakoAction","_pakoOptions","_createPako","raw","level","onData","DEFLATE","STORE","LOCAL_FILE_HEADER","CENTRAL_FILE_HEADER","CENTRAL_DIRECTORY_END","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","DATA_DESCRIPTOR","signature","decToHex","dec","bytes","hex","String","fromCharCode","generateZipParts","streamedContent","streamingEnded","offset","platform","encodeFileName","dosTime","dosDate","file","useCustomEncoding","encodedFileName","utfEncodedFileName","encodedComment","utfEncodedComment","useUTF8ForFileName","useUTF8ForComment","extraFields","unicodePathExtraField","unicodeCommentExtraField","dataInfo","bitflag","extFileAttr","versionMadeBy","isDir","generateUnixExternalFileAttr","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","header","fileRecord","dirRecord","ZipFileWorker","streamFiles","bytesWritten","zipComment","zipPlatform","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","currentFilePercent","remainingFiles","openedSource","record","closedSource","generateDataDescriptors","shift","localDirLength","centralDirLength","dirEnd","generateCentralDirectoryEnd","prepareNextSource","sources","compressions","getCompression","fileCompression","zipCompression","compressionName","zip","zipFileWorker","forEach","relativePath","defaults","generate","fileAdd","originalOptions","parent","o","Date","parseInt","forceTrailingSlash","parentFolder","folderAdd","isCompressedEmpty","zipObjectContent","optimizedBinaryString","object","files","lastSlash","lastIndexOf","isRegExp","load","cb","filename","root","filter","search","entry","regexp","test","folder","newFolder","ret","clone","remove","kids","generateInternalStream","opts","generateWorker","generateAsync","generateNodeStream","ArrayReader","StringReader","BufferReader","Uint8ArrayReader","NodeBufferReader","readerFor","crc32fn","ZipEntry","loadOptions","isEncrypted","bitFlag","useUTF8","readLocalPart","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","readData","compressionMethod","method","findCompression","decompressed","readCentralPart","readString","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","processAttributes","madeBy","fileNameStr","extraReader","extraFieldId","extraFieldLength","extraFieldValue","id","setIndex","handleUTF8","decodeParamType","fileCommentStr","upath","findExtraFieldUnicodePath","fileNameByteArray","decodeFileName","ucomment","findExtraFieldUnicodeComment","commentByteArray","upathField","ucommentField","sig","ZipEntries","checkSignature","expectedSignature","readAndCheckSignature","isSignature","askedIndex","currentIndex","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","decodeContent","readBlockZip64EndOfCentral","zip64EndOfCentralSize","zip64ExtensibleData","extraDataSize","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","readCentralDir","zip64","readEndOfCentral","lastIndexOfSignature","isGarbage","endOfCentralDirOffset","expectedEndOfCentralDirOffset","extraBytes","zero","abs","prepareReader","checkEntryCRC32","zipEntry","checkCRC32","zipEntries","promises","all","results","unsafeName","safeName","unsafeOriginalName","JSZip","create","newObj","loadAsync","version","skylark","ZipFile","attach","main"],"mappings":";;;;;;;g4BAAAA,EAAA,+BACA,YACA,SAAAC,GACA,OAAAA,IAEAD,EAAA,yBACA,+BACA,SAAAE,GACA,aACA,IAAAC,GAEAC,QAAA,EACAC,OAAA,EACAC,QAAA,GAIA,GAHAH,EAAAI,YAAA,oBAAAC,aAAA,oBAAAC,WACAN,EAAAO,WAAAP,EAAAQ,QAAA,EACAR,EAAAS,WAAA,oBAAAH,WACA,oBAAAD,YACAL,EAAAU,MAAA,MACA,CACA,IAAAF,EAAA,IAAAH,YAAA,GACA,IACAL,EAAAU,KAAA,IAAA,IAAAC,MAAAH,IAAAI,KAAA,oBAAAC,KACA,MAAAC,GACA,IACA,IAAAC,EAAAC,KAAAC,aAAAD,KAAAE,mBAAAF,KAAAG,gBAAAH,KAAAI,cACAC,EAAA,IAAAN,EACAM,EAAAC,OAAAd,GACAR,EAAAU,KAAA,IAAAW,EAAAE,QAAA,mBAAAV,KACA,MAAAC,GACAd,EAAAU,MAAA,IAuBA,OAlBAV,EAAAwB,UAAA,SAAAC,GACA,MAAA,iBAAAA,EACA,SAEA,mBAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,GACA,QAEAzB,EAAAO,YAAAR,EAAA+B,SAAAL,GACA,aAEAzB,EAAAS,YAAAgB,aAAAnB,WACA,aAEAN,EAAAI,aAAAqB,aAAApB,YACA,mBADA,GAKAL,IAEAH,EAAA,wBACA,aACA,SAAAG,GACA,aAEA,IAAA+B,EAAA,oEAZA,OACAC,OAYA,SAAAP,GACA,IACAQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EADAC,KAEAC,EAAA,EAAAC,EAAAjB,EAAAkB,OAAAC,EAAAF,EACAG,EAAA,WAAA7C,EAAAwB,UAAAC,GACA,KAAAgB,EAAAhB,EAAAkB,QACAC,EAAAF,EAAAD,EACAI,GAKAZ,EAAAR,EAAAgB,KACAP,EAAAO,EAAAC,EAAAjB,EAAAgB,KAAA,EACAN,EAAAM,EAAAC,EAAAjB,EAAAgB,KAAA,IANAR,EAAAR,EAAAqB,WAAAL,KACAP,EAAAO,EAAAC,EAAAjB,EAAAqB,WAAAL,KAAA,EACAN,EAAAM,EAAAC,EAAAjB,EAAAqB,WAAAL,KAAA,GAMAL,EAAAH,GAAA,EACAI,GAAA,EAAAJ,IAAA,EAAAC,GAAA,EACAI,EAAAM,EAAA,GAAA,GAAAV,IAAA,EAAAC,GAAA,EAAA,GACAI,EAAAK,EAAA,EAAA,GAAAT,EAAA,GAhFAK,EAAAO,KAAAhB,EAAAiB,OAAAZ,GAAAL,EAAAiB,OAAAX,GAAAN,EAAAiB,OAAAV,GAAAP,EAAAiB,OAAAT,IAEA,OAAAC,EAAAS,KAAA,KAgDAC,OA9CA,SAAAzB,GACA,IAAAQ,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAE,EAAA,EAAAU,EAAA,EAEA,GADA,UACA1B,EAAA2B,OAAA,EADA,QACAT,QACA,MAAA,IAAAU,MAAA,mDAGA,IAUAb,EAVAc,EAAA,GADA7B,EAAAA,EAAA8B,QAAA,mBAAA,KACAZ,OAAA,EACAlB,EAAAuB,OAAAvB,EAAAkB,OAAA,KAAAZ,EAAAiB,OAAA,KACAM,IAEA7B,EAAAuB,OAAAvB,EAAAkB,OAAA,KAAAZ,EAAAiB,OAAA,KACAM,IAEA,GAAAA,EAAA,GAAA,EACA,MAAA,IAAAD,MAAA,6CAIAb,EADAxC,EAAAS,WACA,IAAAH,WAAA,EAAAgD,GAEA,IAAAE,MAAA,EAAAF,GAEA,KAAAb,EAAAhB,EAAAkB,QACAP,EAAAL,EAAA0B,QAAAhC,EAAAuB,OAAAP,MACAJ,EAAAN,EAAA0B,QAAAhC,EAAAuB,OAAAP,MACAH,EAAAP,EAAA0B,QAAAhC,EAAAuB,OAAAP,MACAF,EAAAR,EAAA0B,QAAAhC,EAAAuB,OAAAP,MACAR,EAAAG,GAAA,EAAAC,GAAA,EACAH,GAAA,GAAAG,IAAA,EAAAC,GAAA,EACAH,GAAA,EAAAG,IAAA,EAAAC,EACAC,EAAAW,KAAAlB,EACA,KAAAK,IACAE,EAAAW,KAAAjB,GAEA,KAAAK,IACAC,EAAAW,KAAAhB,GAGA,OAAAK,MAQA3C,EAAA,4BAAA,WACA,aAEA,OAAA6D,QAAAA,WAEA7D,EAAA,uBACA,8BACA,iCACA,2CACA,2BACA,YACA,WACA,cACA,SAAAE,EAAA4D,EAAAC,EAAAC,EAAA7D,EAAAC,EAAA6D,GACA,aACA,IAAAC,GAGAC,QAAA,SAAAC,EAAArD,GACAmD,EAAAG,aAAA,QACA,IACA,OAAA,IAAAvD,MAAAsD,IAAArD,KAAAA,IACA,MAAAE,GACA,IACA,IAAAC,EAAAC,KAAAC,aAAAD,KAAAE,mBAAAF,KAAAG,gBAAAH,KAAAI,cACAC,EAAA,IAAAN,EAEA,OADAM,EAAAC,OAAA2C,GACA5C,EAAAE,QAAAX,GACA,MAAAE,GACA,MAAA,IAAAuC,MAAA,uCA4IA,OAvIAU,EAAAI,kBAAAP,EAEAG,EAAAK,YAAA,SAAAC,EAAA5C,GAgBA,MAHA,cAAA4C,IACAA,EAAA,UAEAV,EAAAU,EAAA5C,IAEAsC,EAAAO,QAAA,SAAAC,GAGA,IAFA,IAAAC,EAAAD,EAAAE,MAAA,KACAC,KACAC,EAAA,EAAAA,EAAAH,EAAA7B,OAAAgC,IAAA,CACA,IAAAV,EAAAO,EAAAG,GACA,MAAAV,GAAA,KAAAA,GAAA,IAAAU,GAAAA,IAAAH,EAAA7B,OAAA,IAEA,OAAAsB,EACAS,EAAAE,MAEAF,EAAA3B,KAAAkB,IAGA,OAAAS,EAAAzB,KAAA,MAqBAc,EAAAvC,UAAAxB,EAAAwB,UAEAuC,EAAAG,aAAA,SAAAtD,GACA,IAAAiE,EAAA7E,EAAAY,EAAAkE,eACA,IAAAD,EACA,MAAA,IAAAxB,MAAAzC,EAAA,uCAGAmD,EAAAgB,iBAAA,MACAhB,EAAAiB,kBAAA,EACAjB,EAAAkB,OAAA,SAAAC,GACA,IAAAC,EAAA1C,EAAA2C,EAAA,GACA,IAAA3C,EAAA,EAAAA,GAAAyC,GAAA,IAAAvC,OAAAF,IACA0C,EAAAD,EAAApC,WAAAL,GACA2C,GAAA,OAAAD,EAAA,GAAA,IAAA,IAAAA,EAAAvD,SAAA,IAAAyD,cAEA,OAAAD,GAEArB,EAAAuB,MAAA,SAAAC,EAAAC,EAAAxE,GACAyE,WAAA,WACAF,EAAAG,MAAA1E,GAAA,KAAAwE,UAGAzB,EAAA4B,SAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,aAEAA,EAAAnE,UAAAkE,EAAAlE,UACAiE,EAAAjE,UAAA,IAAAmE,GAEA/B,EAAAgC,OAAA,WACA,IAAAtD,EAAAuD,EAAAtB,KACA,IAAAjC,EAAA,EAAAA,EAAAwD,UAAAtD,OAAAF,IACA,IAAAuD,KAAAC,UAAAxD,GACAf,OAAAC,UAAAuE,eAAArE,KAAAoE,UAAAxD,GAAAuD,SAAA,IAAAtB,EAAAsB,KACAtB,EAAAsB,GAAAC,UAAAxD,GAAAuD,IAIA,OAAAtB,GAEAX,EAAAoC,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA3C,EAAAJ,QAAAY,QAAA+B,GAAAK,KAAA,SAAAC,GACA,IAAAC,EAAA5G,EAAAU,OAAAiG,aAAAhG,OAGA,KAFA,gBACA,iBACA8C,QAAA/B,OAAAC,UAAAC,SAAAC,KAAA8E,KACA,OAAAC,GAAA,oBAAAC,WACA,IAAA/C,EAAAJ,QAAA,SAAAY,EAAAwC,GACA,IAAAC,EAAA,IAAAF,WACAE,EAAAC,OAAA,SAAAlG,GACAwD,EAAAxD,EAAAmG,OAAAvC,SAEAqC,EAAAG,QAAA,SAAApG,GACAgG,EAAAhG,EAAAmG,OAAAE,QAEAJ,EAAAK,kBAAAT,KAGAA,IAGA,OAAAF,EAAAC,KAAA,SAAAC,GACA,IAAAU,EAAAtD,EAAAvC,UAAAmF,GACA,OAAAU,GAGA,gBAAAA,EACAV,EAAA5C,EAAAK,YAAA,aAAAuC,GACA,WAAAU,IACAb,EACAG,EAAA1G,EAAAiD,OAAAyD,GACAL,IACA,IAAAC,IACAI,EAAAW,cAAAX,KAIAA,GAbA7C,EAAAJ,QAAAoD,OAAA,IAAAzD,MAAA,2BAAA+C,EAAA,kFAiBArC,IAEAlE,EAAA,wCAAA,WACA,aAEA,SAAA0H,EAAAnB,GACAoB,KAAApB,KAAAA,GAAA,UACAoB,KAAAC,cACAD,KAAAE,eAAA,KACAF,KAAAG,mBACAH,KAAAI,UAAA,EACAJ,KAAAK,YAAA,EACAL,KAAAM,UAAA,EACAN,KAAAO,YACApB,QACAqB,OACAb,UAEAK,KAAAS,SAAA,KAuIA,OArIAV,EAAA5F,WACAoB,KAAA,SAAAmF,GACAV,KAAAW,KAAA,OAAAD,IAEAF,IAAA,WACA,GAAAR,KAAAK,WACA,OAAA,EAEAL,KAAAY,QACA,IACAZ,KAAAW,KAAA,OACAX,KAAAa,UACAb,KAAAK,YAAA,EACA,MAAA/G,GACA0G,KAAAW,KAAA,QAAArH,GAEA,OAAA,GAEAqG,MAAA,SAAArG,GACA,OAAA0G,KAAAK,aAGAL,KAAAI,SACAJ,KAAAE,eAAA5G,GAEA0G,KAAAK,YAAA,EACAL,KAAAW,KAAA,QAAArH,GACA0G,KAAAS,UACAT,KAAAS,SAAAd,MAAArG,GAEA0G,KAAAa,YAEA,IAEAC,GAAA,SAAAlC,EAAAmC,GAEA,OADAf,KAAAO,WAAA3B,GAAArD,KAAAwF,GACAf,MAEAa,QAAA,WACAb,KAAAC,WAAAD,KAAAE,eAAAF,KAAAG,gBAAA,KACAH,KAAAO,eAEAI,KAAA,SAAA/B,EAAAoC,GACA,GAAAhB,KAAAO,WAAA3B,GACA,IAAA,IAAA3D,EAAA,EAAAA,EAAA+E,KAAAO,WAAA3B,GAAAzD,OAAAF,IACA+E,KAAAO,WAAA3B,GAAA3D,GAAAZ,KAAA2F,KAAAgB,IAIAC,KAAA,SAAAC,GACA,OAAAA,EAAAC,iBAAAnB,OAEAmB,iBAAA,SAAAV,GACA,GAAAT,KAAAM,SACA,MAAA,IAAAzE,MAAA,eAAAmE,KAAA,4BAEAA,KAAAC,WAAAQ,EAAAR,WACAD,KAAAoB,kBACApB,KAAAS,SAAAA,EACA,IAAAjH,EAAAwG,KAUA,OATAS,EAAAK,GAAA,OAAA,SAAAJ,GACAlH,EAAA6H,aAAAX,KAEAD,EAAAK,GAAA,MAAA,WACAtH,EAAAgH,QAEAC,EAAAK,GAAA,QAAA,SAAAxH,GACAE,EAAAmG,MAAArG,KAEA0G,MAEAsB,MAAA,WACA,OAAAtB,KAAAI,WAAAJ,KAAAK,aAGAL,KAAAI,UAAA,EACAJ,KAAAS,UACAT,KAAAS,SAAAa,SAEA,IAEAC,OAAA,WACA,IAAAvB,KAAAI,UAAAJ,KAAAK,WACA,OAAA,EAEAL,KAAAI,UAAA,EACA,IAAAoB,GAAA,EAQA,OAPAxB,KAAAE,iBACAF,KAAAL,MAAAK,KAAAE,gBACAsB,GAAA,GAEAxB,KAAAS,UACAT,KAAAS,SAAAc,UAEAC,GAEAZ,MAAA,aAEAS,aAAA,SAAAX,GACAV,KAAAzE,KAAAmF,IAEAe,eAAA,SAAAC,EAAAC,GAGA,OAFA3B,KAAAG,gBAAAuB,GAAAC,EACA3B,KAAAoB,kBACApB,MAEAoB,gBAAA,WACA,IAAA,IAAAM,KAAA1B,KAAAG,gBACAjG,OAAAC,UAAAuE,eAAArE,KAAA2F,KAAAG,gBAAAuB,KAGA1B,KAAAC,WAAAyB,GAAA1B,KAAAG,gBAAAuB,KAGAE,KAAA,WACA,GAAA5B,KAAAM,SACA,MAAA,IAAAzE,MAAA,eAAAmE,KAAA,4BAEAA,KAAAM,UAAA,EACAN,KAAAS,UACAT,KAAAS,SAAAmB,QAGAxH,SAAA,WACA,IAAAyH,EAAA,UAAA7B,KAAApB,KACA,OAAAoB,KAAAS,SACAT,KAAAS,SAAA,OAAAoB,EAEAA,IAKA9B,IAGA1H,EAAA,sBACA,8BACA,UACA,YACA,0BACA,SAAAE,EAAAgE,EAAA/D,EAAAuH,GACA,aAIA,IAHA,IAAA+B,KAEAC,EAAA,IAAA/F,MAAA,KACAf,EAAA,EAAAA,EAAA,IAAAA,IACA8G,EAAA9G,GAAAA,GAAA,IAAA,EAAAA,GAAA,IAAA,EAAAA,GAAA,IAAA,EAAAA,GAAA,IAAA,EAAAA,GAAA,IAAA,EAAA,EAEA8G,EAAA,KAAAA,EAAA,KAAA,EAwHA,SAAAC,IACAjC,EAAA1F,KAAA2F,KAAA,gBACAA,KAAAiC,SAAA,KA0CA,SAAAC,IACAnC,EAAA1F,KAAA2F,KAAA,gBAWA,OAtEA8B,EAAAK,WAAA,SAAAzE,GACA,OAAAlF,EAAAO,WAEAR,EAAA6J,KAAA1E,EAAA,SA5GA,SAAAA,GACA,IAAA2E,EAAAC,EAAAC,EAAAC,EAAAvH,EAAAwH,EAAA/E,EAAAvC,OAAAuH,EAAA,EACA,IAAAF,EAAA,EAAAA,EAAAC,EAAAD,IAEA,QAAA,OADAF,EAAA5E,EAAApC,WAAAkH,MACAA,EAAA,EAAAC,GAEA,QAAA,OADAF,EAAA7E,EAAApC,WAAAkH,EAAA,OAEAF,EAAA,OAAAA,EAAA,OAAA,KAAAC,EAAA,OACAC,KAGAE,GAAAJ,EAAA,IAAA,EAAAA,EAAA,KAAA,EAAAA,EAAA,MAAA,EAAA,EAGAD,EADA7J,EAAAS,WACA,IAAAH,WAAA4J,GAEA,IAAA1G,MAAA0G,GAEA,IAAAzH,EAAA,EAAAuH,EAAA,EAAAvH,EAAAyH,EAAAF,IAEA,QAAA,OADAF,EAAA5E,EAAApC,WAAAkH,MACAA,EAAA,EAAAC,GAEA,QAAA,OADAF,EAAA7E,EAAApC,WAAAkH,EAAA,OAEAF,EAAA,OAAAA,EAAA,OAAA,KAAAC,EAAA,OACAC,KAGAF,EAAA,IACAD,EAAApH,KAAAqH,EACAA,EAAA,MACAD,EAAApH,KAAA,IAAAqH,IAAA,EACAD,EAAApH,KAAA,IAAA,GAAAqH,GACAA,EAAA,OACAD,EAAApH,KAAA,IAAAqH,IAAA,GACAD,EAAApH,KAAA,IAAAqH,IAAA,EAAA,GACAD,EAAApH,KAAA,IAAA,GAAAqH,IAEAD,EAAApH,KAAA,IAAAqH,IAAA,GACAD,EAAApH,KAAA,IAAAqH,IAAA,GAAA,GACAD,EAAApH,KAAA,IAAAqH,IAAA,EAAA,GACAD,EAAApH,KAAA,IAAA,GAAAqH,GAGA,OAAAD,EAmEAM,CAAAjF,IAEAoE,EAAAc,WAAA,SAAAP,GACA,OAAA7J,EAAAO,WACAwD,EAAAK,YAAA,aAAAyF,GAAAjI,SAAA,SAnDA,SAAAiI,GACA,IAAApH,EAAA4H,EAAAP,EAAAQ,EACA5H,EAAAmH,EAAAlH,OACA4H,EAAA,IAAA/G,MAAA,EAAAd,GACA,IAAA2H,EAAA,EAAA5H,EAAA,EAAAA,EAAAC,GAEA,IADAoH,EAAAD,EAAApH,MACA,IACA8H,EAAAF,KAAAP,OAIA,IADAQ,EAAAf,EAAAO,IACA,EACAS,EAAAF,KAAA,MACA5H,GAAA6H,EAAA,MAFA,CAMA,IADAR,GAAA,IAAAQ,EAAA,GAAA,IAAAA,EAAA,GAAA,EACAA,EAAA,GAAA7H,EAAAC,GACAoH,EAAAA,GAAA,EAAA,GAAAD,EAAApH,KACA6H,IAEAA,EAAA,EACAC,EAAAF,KAAA,MAGAP,EAAA,MACAS,EAAAF,KAAAP,GAEAA,GAAA,MACAS,EAAAF,KAAA,MAAAP,GAAA,GAAA,KACAS,EAAAF,KAAA,MAAA,KAAAP,GAGAS,EAAA5H,SAAA0H,IACAE,EAAAC,SACAD,EAAAA,EAAAC,SAAA,EAAAH,GAEAE,EAAA5H,OAAA0H,GAGA,OAAAtG,EAAAI,kBAAAoG,GAcAE,CADAZ,EAAA9F,EAAAK,YAAApE,EAAAS,WAAA,aAAA,QAAAoJ,KAOA9F,EAAA4B,SAAA6D,EAAAjC,GACAiC,EAAA7H,UAAAkH,aAAA,SAAAX,GACA,IAAAvB,EAAA5C,EAAAK,YAAApE,EAAAS,WAAA,aAAA,QAAAyH,EAAAvB,MACA,GAAAa,KAAAiC,UAAAjC,KAAAiC,SAAA9G,OAAA,CACA,GAAA3C,EAAAS,WAAA,CACA,IAAAiK,EAAA/D,GACAA,EAAA,IAAArG,WAAAoK,EAAA/H,OAAA6E,KAAAiC,SAAA9G,SACAgI,IAAAnD,KAAAiC,SAAA,GACA9C,EAAAgE,IAAAD,EAAAlD,KAAAiC,SAAA9G,aAEAgE,EAAAa,KAAAiC,SAAAmB,OAAAjE,GAEAa,KAAAiC,SAAA,KAEA,IAAAoB,EA5FA,SAAAhB,EAAAiB,GACA,IAAAC,GACAD,EAAAA,GAAAjB,EAAAlH,QACAkH,EAAAlH,SACAmI,EAAAjB,EAAAlH,QAEAoI,EAAAD,EAAA,EACA,KAAAC,GAAA,GAAA,MAAA,IAAAlB,EAAAkB,KACAA,IAEA,GAAAA,EAAA,EACA,OAAAD,EAEA,GAAA,IAAAC,EACA,OAAAD,EAEA,OAAAC,EAAAxB,EAAAM,EAAAkB,IAAAD,EAAAC,EAAAD,EA4EAE,CAAArE,GACAsE,EAAAtE,EACAkE,IAAAlE,EAAAhE,SACA3C,EAAAS,YACAwK,EAAAtE,EAAA6D,SAAA,EAAAK,GACArD,KAAAiC,SAAA9C,EAAA6D,SAAAK,EAAAlE,EAAAhE,UAEAsI,EAAAtE,EAAAuE,MAAA,EAAAL,GACArD,KAAAiC,SAAA9C,EAAAuE,MAAAL,EAAAlE,EAAAhE,UAGA6E,KAAAzE,MACA4D,KAAA2C,EAAAc,WAAAa,GACAE,KAAAjD,EAAAiD,QAGA3B,EAAA7H,UAAAyG,MAAA,WACAZ,KAAAiC,UAAAjC,KAAAiC,SAAA9G,SACA6E,KAAAzE,MACA4D,KAAA2C,EAAAc,WAAA5C,KAAAiC,UACA0B,UAEA3D,KAAAiC,SAAA,OAGAH,EAAAE,iBAAAA,EAIAzF,EAAA4B,SAAA+D,EAAAnC,GACAmC,EAAA/H,UAAAkH,aAAA,SAAAX,GACAV,KAAAzE,MACA4D,KAAA2C,EAAAK,WAAAzB,EAAAvB,MACAwE,KAAAjD,EAAAiD,QAGA7B,EAAAI,iBAAAA,EAEAJ,IAEAzJ,EAAA,sCACA,kBACA,YACA,SAAA0H,EAAAxD,GACA,aAEA,SAAAqH,EAAAC,GACA9D,EAAA1F,KAAA2F,KAAA,oBAAA6D,GACA7D,KAAA6D,SAAAA,EAUA,OARAtH,EAAA4B,SAAAyF,EAAA7D,GACA6D,EAAAzJ,UAAAkH,aAAA,SAAAX,GACAV,KAAAzE,MACA4D,KAAA5C,EAAAK,YAAAoD,KAAA6D,SAAAnD,EAAAvB,MACAwE,KAAAjD,EAAAiD,QAIAC,IAGAvL,EAAA,qCACA,WACA,kBACA,kBACA,YACA,aACA,eACA,SAAAkE,EAAAqH,EAAA7D,EAAAtH,EAAAD,EAAA8D,GACA,aAyCA,SAAAwH,EAAAC,EAAAC,GACA,OAAA,IAAA1H,EAAAJ,QAAA,SAAAY,EAAAwC,GACA,IAAA2E,KACAC,EAAAH,EAAAI,cAAAC,EAAAL,EAAAM,YAAAC,EAAAP,EAAAQ,UACAR,EAAAjD,GAAA,OAAA,SAAA3B,EAAAwE,GACAM,EAAA1I,KAAA4D,GACA6E,GACAA,EAAAL,KAEA7C,GAAA,QAAA,SAAA0D,GACAP,KACA3E,EAAAkF,KACA1D,GAAA,MAAA,WACA,IACA,IAAA5D,EA/CA,SAAA9D,EAAAqL,EAAAH,GACA,OAAAlL,GACA,IAAA,OACA,OAAAmD,EAAAC,QAAAD,EAAAK,YAAA,cAAA6H,GAAAH,GACA,IAAA,SACA,OAAA7L,EAAA+B,OAAAiK,GACA,QACA,OAAAlI,EAAAK,YAAAxD,EAAAqL,IAwCAC,CAAAN,EArCA,SAAAhL,EAAA6K,GACA,IAAAhJ,EAAAkC,EAAA,EAAAS,EAAA,KAAA9B,EAAA,EACA,IAAAb,EAAA,EAAAA,EAAAgJ,EAAA9I,OAAAF,IACAa,GAAAmI,EAAAhJ,GAAAE,OAEA,OAAA/B,GACA,IAAA,SACA,OAAA6K,EAAAxI,KAAA,IACA,IAAA,QACA,OAAAO,MAAA7B,UAAAiJ,OAAAlF,SAAA+F,GACA,IAAA,aAEA,IADArG,EAAA,IAAA9E,WAAAgD,GACAb,EAAA,EAAAA,EAAAgJ,EAAA9I,OAAAF,IACA2C,EAAAuF,IAAAc,EAAAhJ,GAAAkC,GACAA,GAAA8G,EAAAhJ,GAAAE,OAEA,OAAAyC,EACA,IAAA,aACA,OAAArF,OAAA6K,OAAAa,GACA,QACA,MAAA,IAAApI,MAAA,8BAAAzC,EAAA,MAiBAgK,CAAAc,EAAAD,GAAAK,GACAxH,EAAAI,GACA,MAAA5D,GACAgG,EAAAhG,GAEA2K,OACA1C,WAGA,SAAAoD,EAAAC,EAAA/H,EAAAyH,GACA,IAAAO,EAAAhI,EACA,OAAAA,GACA,IAAA,OACA,IAAA,cACAgI,EAAA,aACA,MACA,IAAA,SACAA,EAAA,SAGA,IACA7E,KAAAmE,cAAAU,EACA7E,KAAAqE,YAAAxH,EACAmD,KAAAuE,UAAAD,EACA/H,EAAAG,aAAAmI,GACA7E,KAAA8E,QAAAF,EAAA3D,KAAA,IAAA2C,EAAAiB,IACAD,EAAAhD,OACA,MAAAtI,GACA0G,KAAA8E,QAAA,IAAA/E,EAAA,SACAC,KAAA8E,QAAAnF,MAAArG,IAqCA,OAlCAqL,EAAAxK,WACA2J,WAAA,SAAAiB,GACA,OAAAjB,EAAA9D,KAAA+E,IAEAjE,GAAA,SAAAkE,EAAAC,GACA,IAAAzL,EAAAwG,KAUA,MATA,SAAAgF,EACAhF,KAAA8E,QAAAhE,GAAAkE,EAAA,SAAAtE,GACAuE,EAAA5K,KAAAb,EAAAkH,EAAAvB,KAAAuB,EAAAiD,QAGA3D,KAAA8E,QAAAhE,GAAAkE,EAAA,WACAzI,EAAAuB,MAAAmH,EAAAxG,UAAAjF,KAGAwG,MAEAuB,OAAA,WAEA,OADAhF,EAAAuB,MAAAkC,KAAA8E,QAAAvD,UAAAvB,KAAA8E,SACA9E,MAEAsB,MAAA,WAEA,OADAtB,KAAA8E,QAAAxD,QACAtB,MAEAkF,eAAA,SAAAH,GAEA,GADAxI,EAAAG,aAAA,cACA,eAAAsD,KAAAqE,YACA,MAAA,IAAAxI,MAAAmE,KAAAqE,YAAA,oCAEA,OAAA,IAAAc,0BAAAnF,MAAAoF,WAAA,eAAApF,KAAAqE,aAAAU,KAIAJ,IAEAtM,EAAA,4BAAA,WACA,aACA,IAAAgN,WACAC,QAAAD,YAiBA,SAAAE,EAAAC,GACA,MAAA,iBAAAA,GAAAxJ,MAAAX,QAAAmK,KAPA,SAAAA,GACA,IAAAhH,EACA,IAAAA,KAAAgH,EACA,OAAA,EACA,OAAA,EAGAC,CAAAD,GAEA,OAnBAH,QAAA5M,QAAA,EACA4M,QAAAK,QAAA,EACAL,QAAAM,KAAA,EACAN,QAAAO,eAAA,EACAP,QAAAQ,KAAA,KACAR,QAAAS,YAAA,KACAT,QAAAU,mBAAA,KACAV,QAAAW,QAAA,KACAX,QAAAY,gBAAA,KACAZ,QAAAa,eAAA,KAUAX,EAAAD,OAAAD,SACAC,OAAAD,QACAE,EAAAF,SACAA,aADA,IAGAhN,EAAA,mCACA,WACA,mBACA,SAAAkE,EAAAwD,GACA,aAGA,SAAAoG,EAAAC,GACArG,EAAA1F,KAAA2F,KAAA,cACA,IAAAxG,EAAAwG,KACAA,KAAAqG,aAAA,EACArG,KAAA7C,MAAA,EACA6C,KAAAsD,IAAA,EACAtD,KAAAb,KAAA,KACAa,KAAA5G,KAAA,GACA4G,KAAAsG,gBAAA,EACAF,EAAAlH,KAAA,SAAAC,GACA3F,EAAA6M,aAAA,EACA7M,EAAA2F,KAAAA,EACA3F,EAAA8J,IAAAnE,GAAAA,EAAAhE,QAAA,EACA3B,EAAAJ,KAAAmD,EAAAvC,UAAAmF,GACA3F,EAAA4G,UACA5G,EAAA+M,kBAEA,SAAAjN,GACAE,EAAAmG,MAAArG,KA0DA,OAvDAiD,EAAA4B,SAAAgI,EAAApG,GACAoG,EAAAhM,UAAA0G,QAAA,WACAd,EAAA5F,UAAA0G,QAAAxG,KAAA2F,MACAA,KAAAb,KAAA,MAEAgH,EAAAhM,UAAAoH,OAAA,WACA,QAAAxB,EAAA5F,UAAAoH,OAAAlH,KAAA2F,SAGAA,KAAAsG,gBAAAtG,KAAAqG,cACArG,KAAAsG,gBAAA,EACA/J,EAAAuB,MAAAkC,KAAAuG,kBAAAvG,QAEA,IAEAmG,EAAAhM,UAAAoM,eAAA,WACAvG,KAAAsG,gBAAA,EACAtG,KAAAI,UAAAJ,KAAAK,aAGAL,KAAAwG,QACAxG,KAAAK,aACA9D,EAAAuB,MAAAkC,KAAAuG,kBAAAvG,MACAA,KAAAsG,gBAAA,KAGAH,EAAAhM,UAAAqM,MAAA,WACA,GAAAxG,KAAAI,UAAAJ,KAAAK,WACA,OAAA,EAEA,IACAlB,EAAA,KAAAsH,EAAAC,KAAAC,IAAA3G,KAAAsD,IAAAtD,KAAA7C,MADAyJ,OAEA,GAAA5G,KAAA7C,OAAA6C,KAAAsD,IACA,OAAAtD,KAAAQ,MAEA,OAAAR,KAAA5G,MACA,IAAA,SACA+F,EAAAa,KAAAb,KAAA0H,UAAA7G,KAAA7C,MAAAsJ,GACA,MACA,IAAA,aACAtH,EAAAa,KAAAb,KAAA6D,SAAAhD,KAAA7C,MAAAsJ,GACA,MACA,IAAA,QACA,IAAA,aACAtH,EAAAa,KAAAb,KAAAuE,MAAA1D,KAAA7C,MAAAsJ,GAIA,OADAzG,KAAA7C,MAAAsJ,EACAzG,KAAAzE,MACA4D,KAAAA,EACAwE,MAAAmD,QAAA9G,KAAAsD,IAAAtD,KAAA7C,MAAA6C,KAAAsD,IAAA,IAAA,MAKA6C,IAEA9N,EAAA,uBAAA,WAAA,SAAAkE,GACA,aAaA,IAAAwK,EAXA,WAEA,IADA,IAAAzE,EAAA0E,KACAC,EAAA,EAAAA,EAAA,IAAAA,IAAA,CACA3E,EAAA2E,EACA,IAAA,IAAAC,EAAA,EAAAA,EAAA,EAAAA,IACA5E,EAAA,EAAAA,EAAA,WAAAA,IAAA,EAAAA,IAAA,EAEA0E,EAAAC,GAAA3E,EAEA,OAAA0E,EAEAG,GA6BA,OAZA,SAAAlN,EAAAmN,GACA,QAAA,IAAAnN,IAAAA,EAAAkB,OACA,OAAA,EAGA,MADA,WAAAoB,EAAAvC,UAAAC,GApBA,SAAAmN,EAAA/E,EAAAnH,EAAAqI,GACA,IAAA8D,EAAAN,EAAAvG,EAAA+C,EAAArI,EACAkM,IAAA,EACA,IAAA,IAAAnM,EAAAsI,EAAAtI,EAAAuF,EAAAvF,IACAmM,EAAAA,IAAA,EAAAC,EAAA,KAAAD,EAAA/E,EAAApH,KAEA,OAAA,EAAAmM,EAgBAE,CAAA,EAAAF,EAAAnN,EAAAA,EAAAkB,OAAA,GAdA,SAAAiM,EAAA1J,EAAAxC,EAAAqI,GACA,IAAA8D,EAAAN,EAAAvG,EAAA+C,EAAArI,EACAkM,IAAA,EACA,IAAA,IAAAnM,EAAAsI,EAAAtI,EAAAuF,EAAAvF,IACAmM,EAAAA,IAAA,EAAAC,EAAA,KAAAD,EAAA1J,EAAApC,WAAAL,KAEA,OAAA,EAAAmM,EAUAG,CAAA,EAAAH,EAAAnN,EAAAA,EAAAkB,OAAA,MAMA9C,EAAA,mCACA,kBACA,WACA,YACA,SAAA0H,EAAAuH,EAAA/K,GACA,aAEA,SAAAiL,IACAzH,EAAA1F,KAAA2F,KAAA,cACAA,KAAAyB,eAAA,QAAA,GAQA,OANAlF,EAAA4B,SAAAqJ,EAAAzH,GACAyH,EAAArN,UAAAkH,aAAA,SAAAX,GACAV,KAAAC,WAAAqH,MAAAA,EAAA5G,EAAAvB,KAAAa,KAAAC,WAAAqH,OAAA,GACAtH,KAAAzE,KAAAmF,IAGA8G,IAGAnP,EAAA,wCACA,WACA,mBACA,SAAAkE,EAAAwD,GACA,aAEA,SAAA0H,EAAAC,GACA3H,EAAA1F,KAAA2F,KAAA,uBAAA0H,GACA1H,KAAA0H,SAAAA,EACA1H,KAAAyB,eAAAiG,EAAA,GAUA,OARAnL,EAAA4B,SAAAsJ,EAAA1H,GACA0H,EAAAtN,UAAAkH,aAAA,SAAAX,GACA,GAAAA,EAAA,CACA,IAAAvF,EAAA6E,KAAAC,WAAAD,KAAA0H,WAAA,EACA1H,KAAAC,WAAAD,KAAA0H,UAAAvM,EAAAuF,EAAAvB,KAAAhE,OAEA4E,EAAA5F,UAAAkH,aAAAhH,KAAA2F,KAAAU,IAEA+G,IAGApP,EAAA,kCACA,aACA,sBACA,sBACA,4BACA,SAAAiE,EAAA6J,EAAAqB,EAAAC,GACA,aAEA,SAAAE,EAAAC,EAAAC,EAAAP,EAAAxB,EAAA3G,GACAa,KAAA4H,eAAAA,EACA5H,KAAA6H,iBAAAA,EACA7H,KAAAsH,MAAAA,EACAtH,KAAA8F,YAAAA,EACA9F,KAAA8H,kBAAA3I,EAqBA,OAnBAwI,EAAAxN,WACA4N,iBAAA,WACA,IAAAnD,EAAA,IAAAuB,EAAA7J,EAAAJ,QAAAY,QAAAkD,KAAA8H,oBAAA7G,KAAAjB,KAAA8F,YAAAkC,oBAAA/G,KAAA,IAAAwG,EAAA,gBACAQ,EAAAjI,KAMA,OALA4E,EAAA9D,GAAA,MAAA,WACA,GAAAd,KAAAC,WAAA,cAAAgI,EAAAJ,iBACA,MAAA,IAAAhM,MAAA,2CAGA+I,GAEAsD,oBAAA,WACA,OAAA,IAAA/B,EAAA7J,EAAAJ,QAAAY,QAAAkD,KAAA8H,oBAAArG,eAAA,iBAAAzB,KAAA4H,gBAAAnG,eAAA,mBAAAzB,KAAA6H,kBAAApG,eAAA,QAAAzB,KAAAsH,OAAA7F,eAAA,cAAAzB,KAAA8F,eAGA6B,EAAAQ,iBAAA,SAAAC,EAAAtC,EAAAC,GACA,OAAAqC,EAAAnH,KAAA,IAAAuG,GAAAvG,KAAA,IAAAwG,EAAA,qBAAAxG,KAAA6E,EAAAuC,eAAAtC,IAAA9E,KAAA,IAAAwG,EAAA,mBAAAhG,eAAA,cAAAqE,IAGA6B,IAGAtP,EAAA,2BACA,wBACA,sBACA,SACA,qBACA,0BACA,SAAAsM,EAAAwB,EAAArE,EAAA6F,EAAA5H,GACA,aAEA,IAAAuI,EAAA,SAAA1J,EAAAO,EAAAoJ,GACAvI,KAAApB,KAAAA,EACAoB,KAAA2F,IAAA4C,EAAA5C,IACA3F,KAAA6F,KAAA0C,EAAA1C,KACA7F,KAAAgG,QAAAuC,EAAAvC,QACAhG,KAAAiG,gBAAAsC,EAAAtC,gBACAjG,KAAAkG,eAAAqC,EAAArC,eACAlG,KAAAwI,MAAArJ,EACAa,KAAAyI,YAAAF,EAAA7C,OACA1F,KAAAuI,SACAzC,YAAAyC,EAAAzC,YACAC,mBAAAwC,EAAAxC,qBAGAuC,EAAAnO,WACAuO,eAAA,SAAAtP,GACA,IAAA8D,EAAA,KAAAL,EAAA,SACA,IACA,IAAAzD,EACA,MAAA,IAAAyC,MAAA,6BAGA,IAAA8M,EAAA,YADA9L,EAAAzD,EAAAkE,gBACA,SAAAT,EACA,iBAAAA,GAAA,SAAAA,IACAA,EAAA,UAEAK,EAAA8C,KAAA4I,oBACA,IAAAC,GAAA7I,KAAAyI,YACAI,IAAAF,IACAzL,EAAAA,EAAA+D,KAAA,IAAAa,EAAAI,oBAEA2G,GAAAF,IACAzL,EAAAA,EAAA+D,KAAA,IAAAa,EAAAE,mBAEA,MAAA1I,IACA4D,EAAA,IAAA6C,EAAA,UACAJ,MAAArG,GAEA,OAAA,IAAAqL,EAAAzH,EAAAL,EAAA,KAEAiM,MAAA,SAAA1P,EAAA2P,GACA,OAAA/I,KAAA0I,eAAAtP,GAAA0K,WAAAiF,IAEAC,WAAA,SAAA5P,EAAA2P,GACA,OAAA/I,KAAA0I,eAAAtP,GAAA,cAAA8L,eAAA6D,IAEAE,gBAAA,SAAAnD,EAAAC,GACA,GAAA/F,KAAAwI,iBAAAb,GAAA3H,KAAAwI,MAAA1C,YAAAoD,QAAApD,EAAAoD,MACA,OAAAlJ,KAAAwI,MAAAN,sBAEA,IAAAhL,EAAA8C,KAAA4I,oBAIA,OAHA5I,KAAAyI,cACAvL,EAAAA,EAAA+D,KAAA,IAAAa,EAAAI,mBAEAyF,EAAAQ,iBAAAjL,EAAA4I,EAAAC,IAGA6C,kBAAA,WACA,OAAA5I,KAAAwI,iBAAAb,EACA3H,KAAAwI,MAAAT,mBACA/H,KAAAwI,iBAAAzI,EACAC,KAAAwI,MAEA,IAAArC,EAAAnG,KAAAwI,SAcA,IAVA,IAAAW,GACA,SACA,WACA,eACA,eACA,iBAEAC,EAAA,WACA,MAAA,IAAAvN,MAAA,+EAEAZ,EAAA,EAAAA,EAAAkO,EAAAhO,OAAAF,IACAqN,EAAAnO,UAAAgP,EAAAlO,IAAAmO,EAEA,OAAAd,IAGAjQ,EAAA,uBACA,eACA,UACA,0BACA,SAAAgR,EAAA9M,EAAAwD,GACA,aAEA,IAAAuJ,EAAA,oBAAAxQ,YAAA,oBAAAyQ,aAAA,oBAAAC,YAEAC,EAAAH,EAAA,aAAA,QAEAI,KAIA,SAAAC,EAAAC,EAAArB,GACAxI,EAAA1F,KAAA2F,KAAA,eAAA4J,GACA5J,KAAA6J,MAAA,KACA7J,KAAA8J,YAAAF,EACA5J,KAAA+J,aAAAxB,EACAvI,KAAA2D,QA4CA,OAnDA+F,EAAAR,MAAA,OAUA3M,EAAA4B,SAAAwL,EAAA5J,GAEA4J,EAAAxP,UAAAkH,aAAA,SAAAX,GACAV,KAAA2D,KAAAjD,EAAAiD,KACA,OAAA3D,KAAA6J,OACA7J,KAAAgK,cAEAhK,KAAA6J,MAAAtO,KAAAgB,EAAAK,YAAA6M,EAAA/I,EAAAvB,OAAA,IAEAwK,EAAAxP,UAAAyG,MAAA,WACAb,EAAA5F,UAAAyG,MAAAvG,KAAA2F,MACA,OAAAA,KAAA6J,OACA7J,KAAAgK,cAEAhK,KAAA6J,MAAAtO,SAAA,IAEAoO,EAAAxP,UAAA0G,QAAA,WACAd,EAAA5F,UAAA0G,QAAAxG,KAAA2F,MACAA,KAAA6J,MAAA,MAEAF,EAAAxP,UAAA6P,YAAA,WACAhK,KAAA6J,MAAA,IAAAR,EAAArJ,KAAA8J,cACAG,KAAA,EACAC,MAAAlK,KAAA+J,aAAAG,QAAA,IAEA,IAAA1Q,EAAAwG,KACAA,KAAA6J,MAAAM,OAAA,SAAAhL,GACA3F,EAAA+B,MACA4D,KAAAA,EACAwE,KAAAnK,EAAAmK,SAKA+F,EAAArB,eAAA,SAAAtC,GACA,OAAA,IAAA4D,EAAA,UAAA5D,IAEA2D,EAAA1B,iBAAA,WACA,OAAA,IAAA2B,EAAA,eAGAD,IAEArR,EAAA,8BACA,yBACA,WACA,SAAA0H,EAAAqK,GACA,aAEA,IAAAC,GACAnB,MAAA,OACAb,eAAA,WACA,OAAA,IAAAtI,EAAA,sBAEAiI,iBAAA,WACA,OAAA,IAAAjI,EAAA,yBAIA,OACAsK,MAAAA,EACAD,QAAAA,KAGA/R,EAAA,6BAAA,WACA,aASA,OACAiS,kBARA,OASAC,oBARA,OASAC,sBARA,OASAC,gCARA,OASAC,4BARA,OASAC,gBARA,WAWAtS,EAAA,wCACA,WACA,0BACA,UACA,WACA,gBACA,SAAAkE,EAAAwD,EAAA+B,EAAAwF,EAAAsD,GACA,aAEA,IAAAC,EAAA,SAAAC,EAAAC,GACA,IAAA9P,EAAA+P,EAAA,GACA,IAAA/P,EAAA,EAAAA,EAAA8P,EAAA9P,IACA+P,GAAAC,OAAAC,aAAA,IAAAJ,GACAA,KAAA,EAEA,OAAAE,GAYAG,EAAA,SAAAlL,EAAAmL,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAC,EAAA1L,EAAA,KAAA6F,EAAA7F,EAAA,YAAA2L,EAAAJ,IAAA1J,EAAAK,WAAA0J,EAAAtP,EAAAK,YAAA,SAAA4O,EAAAG,EAAA/M,OAAAkN,EAAAvP,EAAAK,YAAA,SAAAkF,EAAAK,WAAAwJ,EAAA/M,OAAAoH,EAAA2F,EAAA3F,QAAA+F,EAAAxP,EAAAK,YAAA,SAAA4O,EAAAxF,IAAAgG,EAAAzP,EAAAK,YAAA,SAAAkF,EAAAK,WAAA6D,IAAAiG,EAAAH,EAAA3Q,SAAAwQ,EAAA/M,KAAAzD,OAAA+Q,EAAAF,EAAA7Q,SAAA6K,EAAA7K,OAAAgR,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAA1G,EAAAgG,EAAAhG,IAAAE,EAAA8F,EAAA9F,KACAyG,GACAhF,MAAA,EACAM,eAAA,EACAC,iBAAA,GAEAuD,IAAAC,IACAiB,EAAAhF,MAAArH,EAAA,MACAqM,EAAA1E,eAAA3H,EAAA,eACAqM,EAAAzE,iBAAA5H,EAAA,kBAEA,IAAAsM,EAAA,EACAnB,IACAmB,GAAA,GAEAX,IAAAK,IAAAC,IACAK,GAAA,MAEA,IAAAC,EAAA,EACAC,EAAA,EACA9G,IACA6G,GAAA,IAEA,SAAAjB,GACAkB,EAAA,IACAD,GApCA,SAAAvG,EAAAyG,GACA,IAAAxP,EAAA+I,EACAA,IACA/I,EAAAwP,EAAA,MAAA,OAEA,OAAA,MAAAxP,IAAA,GA+BAyP,CAAAhB,EAAA1F,gBAAAN,KAEA8G,EAAA,GACAD,GA/BA,IA+BAb,EAAAzF,gBA/BA,IAiCAuF,EAAA5F,EAAA+G,cACAnB,IAAA,EACAA,GAAA5F,EAAAgH,gBACApB,IAAA,EACAA,GAAA5F,EAAAiH,gBAAA,EACApB,EAAA7F,EAAAkH,iBAAA,KACArB,IAAA,EACAA,GAAA7F,EAAAmH,cAAA,EACAtB,IAAA,EACAA,GAAA7F,EAAAoH,aACAhB,IACAG,EAAAvB,EAAA,EAAA,GAAAA,EAAAvD,EAAAuE,GAAA,GAAAC,EACAK,GAAA,KAAAtB,EAAAuB,EAAAjR,OAAA,GAAAiR,GAEAF,IACAG,EAAAxB,EAAA,EAAA,GAAAA,EAAAvD,EAAAyE,GAAA,GAAAC,EACAG,GAAA,KAAAtB,EAAAwB,EAAAlR,OAAA,GAAAkR,GAEA,IAAAa,EAAA,GACAA,GAAA,OACAA,GAAArC,EAAA0B,EAAA,GACAW,GAAApH,EAAAoD,MACAgE,GAAArC,EAAAY,EAAA,GACAyB,GAAArC,EAAAa,EAAA,GACAwB,GAAArC,EAAAyB,EAAAhF,MAAA,GACA4F,GAAArC,EAAAyB,EAAA1E,eAAA,GACAsF,GAAArC,EAAAyB,EAAAzE,iBAAA,GACAqF,GAAArC,EAAAgB,EAAA1Q,OAAA,GACA+R,GAAArC,EAAAsB,EAAAhR,OAAA,GACA,IAAAgS,EAAAvC,EAAAN,kBAAA4C,EAAArB,EAAAM,EACAiB,EAAAxC,EAAAL,oBAAAM,EAAA4B,EAAA,GAAAS,EAAArC,EAAAkB,EAAA5Q,OAAA,GAAA,WAAA0P,EAAA2B,EAAA,GAAA3B,EAAAS,EAAA,GAAAO,EAAAM,EAAAJ,EACA,OACAoB,WAAAA,EACAC,UAAAA,IAcA,SAAAC,EAAAC,EAAAtH,EAAAuF,EAAAC,GACAzL,EAAA1F,KAAA2F,KAAA,iBACAA,KAAAuN,aAAA,EACAvN,KAAAwN,WAAAxH,EACAhG,KAAAyN,YAAAlC,EACAvL,KAAAwL,eAAAA,EACAxL,KAAAsN,YAAAA,EACAtN,KAAA8D,YAAA,EACA9D,KAAA0N,iBACA1N,KAAA2N,cACA3N,KAAA4N,oBAAA,EACA5N,KAAA6N,aAAA,EACA7N,KAAA8N,YAAA,KACA9N,KAAA+N,YAoIA,OAlIAxR,EAAA4B,SAAAkP,EAAAtN,GACAsN,EAAAlT,UAAAoB,KAAA,SAAAmF,GACA,IAAAsN,EAAAtN,EAAAiD,KAAAmD,SAAA,EACA+G,EAAA7N,KAAA6N,aACAI,EAAAjO,KAAA+N,SAAA5S,OACA6E,KAAA8D,WACA9D,KAAA0N,cAAAnS,KAAAmF,IAEAV,KAAAuN,cAAA7M,EAAAvB,KAAAhE,OACA4E,EAAA5F,UAAAoB,KAAAlB,KAAA2F,MACAb,KAAAuB,EAAAvB,KACAwE,MACAmK,YAAA9N,KAAA8N,YACAhH,QAAA+G,GAAAG,EAAA,KAAAH,EAAAI,EAAA,IAAAJ,EAAA,SAKAR,EAAAlT,UAAA+T,aAAA,SAAAjO,GACAD,KAAA4N,oBAAA5N,KAAAuN,aACAvN,KAAA8N,YAAA7N,EAAA,KAAArB,KACA,IAAAwM,EAAApL,KAAAsN,cAAArN,EAAA,KAAA0F,IACA,GAAAyF,EAAA,CACA,IAAA+C,EAAAhD,EAAAlL,EAAAmL,GAAA,EAAApL,KAAA4N,oBAAA5N,KAAAyN,YAAAzN,KAAAwL,gBACAxL,KAAAzE,MACA4D,KAAAgP,EAAAhB,WACAxJ,MAAAmD,QAAA,UAGA9G,KAAA8D,YAAA,GAGAuJ,EAAAlT,UAAAiU,aAAA,SAAAnO,GACAD,KAAA8D,YAAA,EACA,IAAAsH,EAAApL,KAAAsN,cAAArN,EAAA,KAAA0F,IACAwI,EAAAhD,EAAAlL,EAAAmL,GAAA,EAAApL,KAAA4N,oBAAA5N,KAAAyN,YAAAzN,KAAAwL,gBAEA,GADAxL,KAAA2N,WAAApS,KAAA4S,EAAAf,WACAhC,EACApL,KAAAzE,MACA4D,KA3DA,SAAAc,GAGA,OADA2K,EAAAD,gBAAAE,EAAA5K,EAAA,MAAA,GAAA4K,EAAA5K,EAAA,eAAA,GAAA4K,EAAA5K,EAAA,iBAAA,GAyDAoO,CAAApO,GACA0D,MAAAmD,QAAA,YAOA,IAJA9G,KAAAzE,MACA4D,KAAAgP,EAAAhB,WACAxJ,MAAAmD,QAAA,KAEA9G,KAAA0N,cAAAvS,QACA6E,KAAAzE,KAAAyE,KAAA0N,cAAAY,SAGAtO,KAAA8N,YAAA,MAEAT,EAAAlT,UAAAyG,MAAA,WAEA,IADA,IAAA2N,EAAAvO,KAAAuN,aACAtS,EAAA,EAAAA,EAAA+E,KAAA2N,WAAAxS,OAAAF,IACA+E,KAAAzE,MACA4D,KAAAa,KAAA2N,WAAA1S,GACA0I,MAAAmD,QAAA,OAGA,IAAA0H,EAAAxO,KAAAuN,aAAAgB,EACAE,EAxFA,SAAAZ,EAAAW,EAAAD,EAAAvI,EAAAwF,GACA,IACAO,EAAAxP,EAAAK,YAAA,SAAA4O,EAAAxF,IAEA,OADA4E,EAAAJ,sBAAA,WAAAK,EAAAgD,EAAA,GAAAhD,EAAAgD,EAAA,GAAAhD,EAAA2D,EAAA,GAAA3D,EAAA0D,EAAA,GAAA1D,EAAAkB,EAAA5Q,OAAA,GAAA4Q,EAqFA2C,CAAA1O,KAAA2N,WAAAxS,OAAAqT,EAAAD,EAAAvO,KAAAwN,WAAAxN,KAAAwL,gBACAxL,KAAAzE,MACA4D,KAAAsP,EACA9K,MAAAmD,QAAA,QAGAuG,EAAAlT,UAAAwU,kBAAA,WACA3O,KAAAS,SAAAT,KAAA+N,SAAAO,QACAtO,KAAAkO,aAAAlO,KAAAS,SAAAR,YACAD,KAAAI,SACAJ,KAAAS,SAAAa,QAEAtB,KAAAS,SAAAc,UAGA8L,EAAAlT,UAAAgH,iBAAA,SAAAV,GACAT,KAAA+N,SAAAxS,KAAAkF,GACA,IAAAjH,EAAAwG,KAeA,OAdAS,EAAAK,GAAA,OAAA,SAAAJ,GACAlH,EAAA6H,aAAAX,KAEAD,EAAAK,GAAA,MAAA,WACAtH,EAAA4U,aAAA5U,EAAAiH,SAAAR,YACAzG,EAAAuU,SAAA5S,OACA3B,EAAAmV,oBAEAnV,EAAAgH,QAGAC,EAAAK,GAAA,QAAA,SAAAxH,GACAE,EAAAmG,MAAArG,KAEA0G,MAEAqN,EAAAlT,UAAAoH,OAAA,WACA,QAAAxB,EAAA5F,UAAAoH,OAAAlH,KAAA2F,SAGAA,KAAAS,UAAAT,KAAA+N,SAAA5S,QACA6E,KAAA2O,qBACA,GAEA3O,KAAAS,UAAAT,KAAA+N,SAAA5S,QAAA6E,KAAAE,oBAAA,GACAF,KAAAQ,OACA,KAGA6M,EAAAlT,UAAAwF,MAAA,SAAArG,GACA,IAAAsV,EAAA5O,KAAA+N,SACA,IAAAhO,EAAA5F,UAAAwF,MAAAtF,KAAA2F,KAAA1G,GACA,OAAA,EAEA,IAAA,IAAA2B,EAAA,EAAAA,EAAA2T,EAAAzT,OAAAF,IACA,IACA2T,EAAA3T,GAAA0E,MAAArG,GACA,MAAAA,IAGA,OAAA,GAEA+T,EAAAlT,UAAAyH,KAAA,WACA7B,EAAA5F,UAAAyH,KAAAvH,KAAA2F,MAEA,IADA,IAAA4O,EAAA5O,KAAA+N,SACA9S,EAAA,EAAAA,EAAA2T,EAAAzT,OAAAF,IACA2T,EAAA3T,GAAA2G,QAIAyL,IAGAhV,EAAA,0BACA,iBACA,4BACA,SAAAwW,EAAAxB,GACA,aAEA,IAAAyB,EAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,GAAAC,EACAlJ,EAAA+I,EAAAI,GACA,IAAAnJ,EACA,MAAA,IAAAjK,MAAAoT,EAAA,wCAEA,OAAAnJ,GA2BA,OAzBA,SAAAoJ,EAAA3G,EAAAvC,GACA,IAAAmJ,EAAA,IAAA9B,EAAA9E,EAAA+E,YAAAtH,EAAAuC,EAAAgD,SAAAhD,EAAAiD,gBACAqC,EAAA,EACA,IACAqB,EAAAE,QAAA,SAAAC,EAAA1D,GACAkC,IACA,IAAA/H,EAAAgJ,EAAAnD,EAAApD,QAAAzC,YAAAyC,EAAAzC,aACAC,EAAA4F,EAAApD,QAAAxC,oBAAAwC,EAAAxC,uBACAJ,EAAAgG,EAAAhG,IAAAE,EAAA8F,EAAA9F,KACA8F,EAAA1C,gBAAAnD,EAAAC,GAAAtE,eAAA,QACA7C,KAAAyQ,EACA1J,IAAAA,EACAE,KAAAA,EACAG,QAAA2F,EAAA3F,SAAA,GACAC,gBAAA0F,EAAA1F,gBACAC,eAAAyF,EAAAzF,iBACAjF,KAAAkO,KAEAA,EAAAtB,aAAAA,EACA,MAAAvU,GACA6V,EAAAxP,MAAArG,GAEA,OAAA6V,KAMA9W,EAAA,wBACA,SACA,UACA,yBACA,wBACA,aACA,qBACA,cACA,cACA,SAAAyJ,EAAAvF,EAAAwD,EAAA4E,EAAA2K,EAAA3H,EAAAW,EAAAiH,GACA,aAEA,IAAAC,EAAA,SAAA5Q,EAAAO,EAAAsQ,GACA,IAAAC,EAAA7P,EAAAtD,EAAAvC,UAAAmF,GACAwQ,EAAApT,EAAAgC,OAAAkR,MAAAH,GACAK,EAAA9J,KAAA8J,EAAA9J,MAAA,IAAA+J,KACA,OAAAD,EAAA7J,cACA6J,EAAA7J,YAAA6J,EAAA7J,YAAAjI,eAEA,iBAAA8R,EAAA1J,kBACA0J,EAAA1J,gBAAA4J,SAAAF,EAAA1J,gBAAA,IAEA0J,EAAA1J,iBAAA,MAAA0J,EAAA1J,kBACA0J,EAAAhK,KAAA,GAEAgK,EAAAzJ,gBAAA,GAAAyJ,EAAAzJ,iBACAyJ,EAAAhK,KAAA,GAEAgK,EAAAhK,MACA/G,EAAAkR,EAAAlR,IAEA+Q,EAAA/J,gBAAA8J,EAAAK,EAAAnR,KACAoR,EAAA3V,KAAA2F,KAAA0P,GAAA,GAEA,IAAA7G,EAAA,WAAAhJ,IAAA,IAAA8P,EAAAjK,SAAA,IAAAiK,EAAAlX,OACAgX,QAAA,IAAAA,EAAA/J,SACAiK,EAAAjK,QAAAmD,GAEA,IAAAoH,EAAA9Q,aAAAwI,GAAA,IAAAxI,EAAA0I,kBACAoI,GAAAN,EAAAhK,MAAAxG,GAAA,IAAAA,EAAAhE,UACAwU,EAAAlX,QAAA,EACAkX,EAAAjK,QAAA,EACAvG,EAAA,GACAwQ,EAAA7J,YAAA,QACAjG,EAAA,UAEA,IAAAqQ,EAAA,KAEAA,EADA/Q,aAAAwI,GAAAxI,aAAAY,EACAZ,EAIA5C,EAAAoC,eAAAC,EAAAO,EAAAwQ,EAAAjK,OAAAiK,EAAAQ,sBAAAR,EAAAlX,QAEA,IAAA2X,EAAA,IAAA9H,EAAA1J,EAAAsR,EAAAP,GACA3P,KAAAqQ,MAAAzR,GAAAwR,GAEAL,EAAA,SAAAhT,GACA,MAAAA,EAAA2G,OAAA,KACA3G,EAAAA,EAAA8J,UAAA,EAAA9J,EAAA5B,OAAA,IAEA,IAAAmV,EAAAvT,EAAAwT,YAAA,KACA,OAAAD,EAAA,EAAAvT,EAAA8J,UAAA,EAAAyJ,GAAA,IAEAR,EAAA,SAAA/S,GAIA,MAHA,MAAAA,EAAA2G,OAAA,KACA3G,GAAA,KAEAA,GAEAiT,EAAA,SAAApR,EAAAgH,GASA,OARAA,OAAA,IAAAA,EAAAA,EAAA0J,EAAA1J,cACAhH,EAAAkR,EAAAlR,GACAoB,KAAAqQ,MAAAzR,IACA4Q,EAAAnV,KAAA2F,KAAApB,EAAA,MACA+G,KAAA,EACAC,cAAAA,IAGA5F,KAAAqQ,MAAAzR,IAEA,SAAA4R,EAAAJ,GACA,MAAA,oBAAAlW,OAAAC,UAAAC,SAAAC,KAAA+V,GAEA,IAAAvN,GACA4N,KAAA,WACA,MAAA,IAAA5U,MAAA,+EAEAuT,QAAA,SAAAsB,GACA,IAAAC,EAAAtB,EAAA1D,EACA,IAAAgF,KAAA3Q,KAAAqQ,MACA1E,EAAA3L,KAAAqQ,MAAAM,IACAtB,EAAAsB,EAAAjN,MAAA1D,KAAA4Q,KAAAzV,OAAAwV,EAAAxV,UACAwV,EAAAjN,MAAA,EAAA1D,KAAA4Q,KAAAzV,UAAA6E,KAAA4Q,MACAF,EAAArB,EAAA1D,IAIAkF,OAAA,SAAAC,GACA,IAAA5T,KAMA,OALA8C,KAAAoP,QAAA,SAAAC,EAAA0B,GACAD,EAAAzB,EAAA0B,IACA7T,EAAA3B,KAAAwV,KAGA7T,GAEAyO,KAAA,SAAA/M,EAAAO,EAAAwQ,GACA,GAAA,IAAAlR,UAAAtD,OAAA,CACA,GAAAqV,EAAA5R,GAAA,CACA,IAAAoS,EAAApS,EACA,OAAAoB,KAAA6Q,OAAA,SAAAxB,EAAA1D,GACA,OAAAA,EAAAhG,KAAAqL,EAAAC,KAAA5B,KAGA,IAAA7J,EAAAxF,KAAAqQ,MAAArQ,KAAA4Q,KAAAhS,GACA,OAAA4G,IAAAA,EAAAG,IACAH,EAEA,KAOA,OAHA5G,EAAAoB,KAAA4Q,KAAAhS,EACA4Q,EAAAnV,KAAA2F,KAAApB,EAAAO,EAAAwQ,GAEA3P,MAEAkR,OAAA,SAAAlQ,GACA,IAAAA,EACA,OAAAhB,KAEA,GAAAwQ,EAAAxP,GACA,OAAAhB,KAAA6Q,OAAA,SAAAxB,EAAA1D,GACA,OAAAA,EAAAhG,KAAA3E,EAAAiQ,KAAA5B,KAGA,IAAAzQ,EAAAoB,KAAA4Q,KAAA5P,EACAmQ,EAAAnB,EAAA3V,KAAA2F,KAAApB,GACAwS,EAAApR,KAAAqR,QAEA,OADAD,EAAAR,KAAAO,EAAAvS,KACAwS,GAEAE,OAAA,SAAA1S,GACAA,EAAAoB,KAAA4Q,KAAAhS,EACA,IAAA+M,EAAA3L,KAAAqQ,MAAAzR,GAOA,GANA+M,IACA,MAAA/M,EAAA8E,OAAA,KACA9E,GAAA,KAEA+M,EAAA3L,KAAAqQ,MAAAzR,IAEA+M,IAAAA,EAAAhG,WACA3F,KAAAqQ,MAAAzR,QAKA,IAHA,IAAA2S,EAAAvR,KAAA6Q,OAAA,SAAAxB,EAAA1D,GACA,OAAAA,EAAA/M,KAAA8E,MAAA,EAAA9E,EAAAzD,UAAAyD,IAEA3D,EAAA,EAAAA,EAAAsW,EAAApW,OAAAF,WACA+E,KAAAqQ,MAAAkB,EAAAtW,GAAA2D,MAGA,OAAAoB,MAEAuP,SAAA,WACA,MAAA,IAAA1T,MAAA,+EAEA2V,uBAAA,SAAAjJ,GACA,IAAA3D,EAAA6M,KACA,IAgBA,IAfAA,EAAAlV,EAAAgC,OAAAgK,OACA+E,aAAA,EACAxH,YAAA,QACAC,mBAAA,KACA3M,KAAA,GACAmS,SAAA,MACAvF,QAAA,KACA1B,SAAA,kBACAkH,eAAA1J,EAAAK,cAEA/I,KAAAqY,EAAArY,KAAAkE,cACAmU,EAAA3L,YAAA2L,EAAA3L,YAAAjI,cACA,iBAAA4T,EAAArY,OACAqY,EAAArY,KAAA,WAEAqY,EAAArY,KACA,MAAA,IAAAyC,MAAA,6BAEAU,EAAAG,aAAA+U,EAAArY,MACA,WAAAqY,EAAAlG,UAAA,YAAAkG,EAAAlG,UAAA,UAAAkG,EAAAlG,UAAA,UAAAkG,EAAAlG,WACAkG,EAAAlG,SAAA,QAEA,UAAAkG,EAAAlG,WACAkG,EAAAlG,SAAA,OAEA,IAAAvF,EAAAyL,EAAAzL,SAAAhG,KAAAgG,SAAA,GACApB,EAAA2K,EAAAmC,eAAA1R,KAAAyR,EAAAzL,GACA,MAAA1M,IACAsL,EAAA,IAAA7E,EAAA,UACAJ,MAAArG,GAEA,OAAA,IAAAqL,EAAAC,EAAA6M,EAAArY,MAAA,SAAAqY,EAAAnN,WAEAqN,cAAA,SAAApJ,EAAAQ,GACA,OAAA/I,KAAAwR,uBAAAjJ,GAAAzE,WAAAiF,IAEA6I,mBAAA,SAAArJ,EAAAQ,GAKA,OAJAR,EAAAA,OACAnP,OACAmP,EAAAnP,KAAA,cAEA4G,KAAAwR,uBAAAjJ,GAAArD,eAAA6D,KAIA,OAAAlG,IAGAxK,EAAA,oCACA,mCACA,SAAAwZ,GACA,aAEA,OAAAA,IAGAxZ,EAAA,qCACA,oCACA,SAAAyZ,GACA,aAEA,OAAAA,IAGAzZ,EAAA,yCACA,oCACA,SAAA0Z,GACA,aAEA,OAAAA,IAGA1Z,EAAA,yCACA,yCACA,SAAA2Z,GACA,aAEA,OAAAA,IAGA3Z,EAAA,kCACA,WACA,aACA,gBACA,iBACA,qBACA,sBACA,SAAAkE,EAAA/D,EAAAqZ,EAAAC,EAAAG,EAAAD,GACA,aAiBA,OAfA,SAAA7S,GACA,IAAA/F,EAAAmD,EAAAvC,UAAAmF,GAEA,GADA5C,EAAAG,aAAAtD,GACA,WAAAA,IAAAZ,EAAAS,WACA,OAAA,IAAA6Y,EAAA3S,GAEA,GAAA,eAAA/F,EACA,OAAA,IAAA6Y,EAAA9S,GAEA,GAAA3G,EAAAS,WACA,OAAA,IAAA+Y,EAAAzV,EAAAK,YAAA,aAAAuC,IAEA,OAAA,IAAA0S,EAAAtV,EAAAK,YAAA,QAAAuC,OAKA9G,EAAA,0BACA,qBACA,UACA,qBACA,UACA,SACA,iBACA,aACA,SAAA6Z,EAAA3V,EAAAoL,EAAAwK,EAAArQ,EAAA+M,EAAArW,GACA,aAeA,SAAA4Z,EAAA7J,EAAA8J,GACArS,KAAAuI,QAAAA,EACAvI,KAAAqS,YAAAA,EAuJA,OArJAD,EAAAjY,WACAmY,YAAA,WACA,OAAA,IAAA,EAAAtS,KAAAuS,UAEAC,QAAA,WACA,OAAA,OAAA,KAAAxS,KAAAuS,UAEAE,cAAA,SAAAlT,GACA,IAAAuG,EAAA4M,EAMA,GALAnT,EAAAoT,KAAA,IACA3S,KAAA4S,eAAArT,EAAAsT,QAAA,GACAH,EAAAnT,EAAAsT,QAAA,GACA7S,KAAA8S,SAAAvT,EAAAwT,SAAA/S,KAAA4S,gBACArT,EAAAoT,KAAAD,IACA,IAAA1S,KAAA4H,iBAAA,IAAA5H,KAAA6H,iBACA,MAAA,IAAAhM,MAAA,sIAGA,GAAA,QADAiK,EAhCA,SAAAkN,GACA,IAAA,IAAAC,KAAApE,EACA,GAAA3U,OAAAC,UAAAuE,eAAArE,KAAAwU,EAAAoE,IAGApE,EAAAoE,GAAA/J,QAAA8J,EACA,OAAAnE,EAAAoE,GAGA,OAAA,KAuBAC,CAAAlT,KAAAgT,oBAEA,MAAA,IAAAnX,MAAA,+BAAAU,EAAAkB,OAAAuC,KAAAgT,mBAAA,0BAAAzW,EAAAK,YAAA,SAAAoD,KAAA8S,UAAA,KAEA9S,KAAAmT,aAAA,IAAAxL,EAAA3H,KAAA4H,eAAA5H,KAAA6H,iBAAA7H,KAAAsH,MAAAxB,EAAAvG,EAAAwT,SAAA/S,KAAA4H,kBAEAwL,gBAAA,SAAA7T,GACAS,KAAAyM,cAAAlN,EAAAsT,QAAA,GACAtT,EAAAoT,KAAA,GACA3S,KAAAuS,QAAAhT,EAAAsT,QAAA,GACA7S,KAAAgT,kBAAAzT,EAAA8T,WAAA,GACArT,KAAA6F,KAAAtG,EAAA+T,WACAtT,KAAAsH,MAAA/H,EAAAsT,QAAA,GACA7S,KAAA4H,eAAArI,EAAAsT,QAAA,GACA7S,KAAA6H,iBAAAtI,EAAAsT,QAAA,GACA,IAAAD,EAAArT,EAAAsT,QAAA,GAOA,GANA7S,KAAAuT,kBAAAhU,EAAAsT,QAAA,GACA7S,KAAAwT,kBAAAjU,EAAAsT,QAAA,GACA7S,KAAAyT,gBAAAlU,EAAAsT,QAAA,GACA7S,KAAA0T,uBAAAnU,EAAAsT,QAAA,GACA7S,KAAA2T,uBAAApU,EAAAsT,QAAA,GACA7S,KAAA4T,kBAAArU,EAAAsT,QAAA,GACA7S,KAAAsS,cACA,MAAA,IAAAzW,MAAA,mCAEA0D,EAAAoT,KAAAC,GACA5S,KAAA6T,gBAAAtU,GACAS,KAAA8T,qBAAAvU,GACAS,KAAA+T,YAAAxU,EAAAwT,SAAA/S,KAAAwT,oBAEAQ,kBAAA,WACAhU,KAAAiG,gBAAA,KACAjG,KAAAkG,eAAA,KACA,IAAA+N,EAAAjU,KAAAyM,eAAA,EACAzM,KAAA2F,OAAA,GAAA3F,KAAA2T,wBApEA,IAqEAM,IACAjU,KAAAkG,eAAA,GAAAlG,KAAA2T,wBArEA,IAuEAM,IACAjU,KAAAiG,gBAAAjG,KAAA2T,wBAAA,GAAA,OAEA3T,KAAA2F,KAAA,MAAA3F,KAAAkU,YAAAxQ,OAAA,KACA1D,KAAA2F,KAAA,IAGAmO,qBAAA,WACA,GAAA9T,KAAAmM,YAAA,GAAA,CAGA,IAAAgI,EAAAjC,EAAAlS,KAAAmM,YAAA,GAAAxK,OACA3B,KAAA6H,mBAAAtL,EAAAiB,mBACAwC,KAAA6H,iBAAAsM,EAAAtB,QAAA,IAEA7S,KAAA4H,iBAAArL,EAAAiB,mBACAwC,KAAA4H,eAAAuM,EAAAtB,QAAA,IAEA7S,KAAA4T,oBAAArX,EAAAiB,mBACAwC,KAAA4T,kBAAAO,EAAAtB,QAAA,IAEA7S,KAAAyT,kBAAAlX,EAAAiB,mBACAwC,KAAAyT,gBAAAU,EAAAtB,QAAA,MAGAgB,gBAAA,SAAAtU,GACA,IAAA6U,EAAAC,EAAAC,EAAA9T,EAAAjB,EAAApC,MAAA6C,KAAAuT,kBAIA,IAHAvT,KAAAmM,cACAnM,KAAAmM,gBAEA5M,EAAApC,MAAA,EAAAqD,GACA4T,EAAA7U,EAAAsT,QAAA,GACAwB,EAAA9U,EAAAsT,QAAA,GACAyB,EAAA/U,EAAAwT,SAAAsB,GACArU,KAAAmM,YAAAiI,IACAG,GAAAH,EACAjZ,OAAAkZ,EACA1S,MAAA2S,GAGA/U,EAAAiV,SAAAhU,IAEAiU,WAAA,WACA,IAAAC,EAAAlc,EAAAS,WAAA,aAAA,QACA,GAAA+G,KAAAwS,UACAxS,KAAAkU,YAAApS,EAAAc,WAAA5C,KAAA8S,UACA9S,KAAA2U,eAAA7S,EAAAc,WAAA5C,KAAA+T,iBACA,CACA,IAAAa,EAAA5U,KAAA6U,4BACA,GAAA,OAAAD,EACA5U,KAAAkU,YAAAU,MACA,CACA,IAAAE,EAAAvY,EAAAK,YAAA8X,EAAA1U,KAAA8S,UACA9S,KAAAkU,YAAAlU,KAAAqS,YAAA0C,eAAAD,GAEA,IAAAE,EAAAhV,KAAAiV,+BACA,GAAA,OAAAD,EACAhV,KAAA2U,eAAAK,MACA,CACA,IAAAE,EAAA3Y,EAAAK,YAAA8X,EAAA1U,KAAA+T,aACA/T,KAAA2U,eAAA3U,KAAAqS,YAAA0C,eAAAG,MAIAL,0BAAA,WACA,IAAAM,EAAAnV,KAAAmM,YAAA,OACA,GAAAgJ,EAAA,CACA,IAAAhB,EAAAjC,EAAAiD,EAAAxT,OACA,OAAA,IAAAwS,EAAAtB,QAAA,GACA,KAEAV,EAAAnS,KAAA8S,YAAAqB,EAAAtB,QAAA,GACA,KAEA/Q,EAAAc,WAAAuR,EAAApB,SAAAoC,EAAAha,OAAA,IAEA,OAAA,MAEA8Z,6BAAA,WACA,IAAAG,EAAApV,KAAAmM,YAAA,OACA,GAAAiJ,EAAA,CACA,IAAAjB,EAAAjC,EAAAkD,EAAAzT,OACA,OAAA,IAAAwS,EAAAtB,QAAA,GACA,KAEAV,EAAAnS,KAAA+T,eAAAI,EAAAtB,QAAA,GACA,KAEA/Q,EAAAc,WAAAuR,EAAApB,SAAAqC,EAAAja,OAAA,IAEA,OAAA,OAIAiX,IAGA/Z,EAAA,4BACA,qBACA,UACA,cACA,aACA,aACA,SAAA6Z,EAAA3V,EAAA8Y,EAAAjD,EAAA5Z,GACA,aAEA,SAAA8c,EAAAjD,GACArS,KAAAqQ,SACArQ,KAAAqS,YAAAA,EAiJA,OA/IAiD,EAAAnb,WACAob,eAAA,SAAAC,GACA,IAAAxV,KAAAT,OAAAkW,sBAAAD,GAAA,CACAxV,KAAAT,OAAApC,OAAA,EACA,IAAAyN,EAAA5K,KAAAT,OAAA8T,WAAA,GACA,MAAA,IAAAxX,MAAA,+CAAAU,EAAAkB,OAAAmN,GAAA,cAAArO,EAAAkB,OAAA+X,GAAA,OAGAE,YAAA,SAAAC,EAAAH,GACA,IAAAI,EAAA5V,KAAAT,OAAApC,MACA6C,KAAAT,OAAAiV,SAAAmB,GACA,IAAA/K,EAAA5K,KAAAT,OAAA8T,WAAA,GACAnW,EAAA0N,IAAA4K,EAEA,OADAxV,KAAAT,OAAAiV,SAAAoB,GACA1Y,GAEA2Y,sBAAA,WACA7V,KAAA8V,WAAA9V,KAAAT,OAAAsT,QAAA,GACA7S,KAAA+V,wBAAA/V,KAAAT,OAAAsT,QAAA,GACA7S,KAAAgW,4BAAAhW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAiW,kBAAAjW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAkW,eAAAlW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAmW,iBAAAnW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAoW,iBAAApW,KAAAT,OAAAsT,QAAA,GACA,IAAArF,EAAAxN,KAAAT,OAAAwT,SAAA/S,KAAAoW,kBACA1B,EAAAlc,EAAAS,WAAA,aAAA,QACAod,EAAA9Z,EAAAK,YAAA8X,EAAAlH,GACAxN,KAAAwN,WAAAxN,KAAAqS,YAAA0C,eAAAsB,IAEAC,2BAAA,WACAtW,KAAAuW,sBAAAvW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAT,OAAAoT,KAAA,GACA3S,KAAA8V,WAAA9V,KAAAT,OAAAsT,QAAA,GACA7S,KAAA+V,wBAAA/V,KAAAT,OAAAsT,QAAA,GACA7S,KAAAgW,4BAAAhW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAiW,kBAAAjW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAkW,eAAAlW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAmW,iBAAAnW,KAAAT,OAAAsT,QAAA,GACA7S,KAAAwW,uBAEA,IADA,IAAApC,EAAAC,EAAAC,EAAAmC,EAAAzW,KAAAuW,sBAAA,GAAA,EACAE,GACArC,EAAApU,KAAAT,OAAAsT,QAAA,GACAwB,EAAArU,KAAAT,OAAAsT,QAAA,GACAyB,EAAAtU,KAAAT,OAAAwT,SAAAsB,GACArU,KAAAwW,oBAAApC,IACAG,GAAAH,EACAjZ,OAAAkZ,EACA1S,MAAA2S,IAIAoC,kCAAA,WAIA,GAHA1W,KAAA2W,6BAAA3W,KAAAT,OAAAsT,QAAA,GACA7S,KAAA4W,mCAAA5W,KAAAT,OAAAsT,QAAA,GACA7S,KAAA6W,WAAA7W,KAAAT,OAAAsT,QAAA,GACA7S,KAAA6W,WAAA,EACA,MAAA,IAAAhb,MAAA,wCAGAib,eAAA,WACA,IAAA7b,EAAA0Q,EACA,IAAA1Q,EAAA,EAAAA,EAAA+E,KAAAqQ,MAAAlV,OAAAF,IACA0Q,EAAA3L,KAAAqQ,MAAApV,GACA+E,KAAAT,OAAAiV,SAAA7I,EAAAiI,mBACA5T,KAAAuV,eAAAF,EAAA/K,mBACAqB,EAAA8G,cAAAzS,KAAAT,QACAoM,EAAA8I,aACA9I,EAAAqI,qBAGA+C,eAAA,WACA,IAAApL,EAEA,IADA3L,KAAAT,OAAAiV,SAAAxU,KAAAmW,kBACAnW,KAAAT,OAAAkW,sBAAAJ,EAAA9K,uBACAoB,EAAA,IAAAyG,GAAA4E,MAAAhX,KAAAgX,OAAAhX,KAAAqS,cACAe,gBAAApT,KAAAT,QACAS,KAAAqQ,MAAA9U,KAAAoQ,GAEA,GAAA3L,KAAAiW,oBAAAjW,KAAAqQ,MAAAlV,QACA,IAAA6E,KAAAiW,mBAAA,IAAAjW,KAAAqQ,MAAAlV,OACA,MAAA,IAAAU,MAAA,kCAAAmE,KAAAiW,kBAAA,gCAAAjW,KAAAqQ,MAAAlV,SAKA8b,iBAAA,WACA,IAAA3L,EAAAtL,KAAAT,OAAA2X,qBAAA7B,EAAA7K,uBACA,GAAAc,EAAA,EAAA,CACA,IAAA6L,GAAAnX,KAAA0V,YAAA,EAAAL,EAAA/K,mBACA,MAAA6M,EACA,IAAAtb,MAAA,2IAEA,IAAAA,MAAA,sDAGAmE,KAAAT,OAAAiV,SAAAlJ,GACA,IAAA8L,EAAA9L,EAGA,GAFAtL,KAAAuV,eAAAF,EAAA7K,uBACAxK,KAAA6V,wBACA7V,KAAA8V,aAAAvZ,EAAAgB,kBAAAyC,KAAA+V,0BAAAxZ,EAAAgB,kBAAAyC,KAAAgW,8BAAAzZ,EAAAgB,kBAAAyC,KAAAiW,oBAAA1Z,EAAAgB,kBAAAyC,KAAAkW,iBAAA3Z,EAAAiB,kBAAAwC,KAAAmW,mBAAA5Z,EAAAiB,iBAAA,CAGA,GAFAwC,KAAAgX,OAAA,GACA1L,EAAAtL,KAAAT,OAAA2X,qBAAA7B,EAAA5K,kCACA,EACA,MAAA,IAAA5O,MAAA,wEAKA,GAHAmE,KAAAT,OAAAiV,SAAAlJ,GACAtL,KAAAuV,eAAAF,EAAA5K,iCACAzK,KAAA0W,qCACA1W,KAAA0V,YAAA1V,KAAA4W,mCAAAvB,EAAA3K,+BACA1K,KAAA4W,mCAAA5W,KAAAT,OAAA2X,qBAAA7B,EAAA3K,6BACA1K,KAAA4W,mCAAA,GACA,MAAA,IAAA/a,MAAA,gEAGAmE,KAAAT,OAAAiV,SAAAxU,KAAA4W,oCACA5W,KAAAuV,eAAAF,EAAA3K,6BACA1K,KAAAsW,6BAEA,IAAAe,EAAArX,KAAAmW,iBAAAnW,KAAAkW,eACAlW,KAAAgX,QACAK,GAAA,GACAA,GAAA,GAAArX,KAAAuW,uBAEA,IAAAe,EAAAF,EAAAC,EACA,GAAAC,EAAA,EACAtX,KAAA0V,YAAA0B,EAAA/B,EAAA9K,uBAEAvK,KAAAT,OAAAgY,KAAAD,QAEA,GAAAA,EAAA,EACA,MAAA,IAAAzb,MAAA,0BAAA6K,KAAA8Q,IAAAF,GAAA,YAGAG,cAAA,SAAAtY,GACAa,KAAAT,OAAA2S,EAAA/S,IAEAsR,KAAA,SAAAtR,GACAa,KAAAyX,cAAAtY,GACAa,KAAAiX,mBACAjX,KAAA+W,iBACA/W,KAAA8W,mBAGAxB,IAGAjd,EAAA,sBACA,UACA,aACA,SACA,eACA,uBACA,SAAAkE,EAAAD,EAAAwF,EAAAwT,EAAA9N,GACA,aAEA,SAAAkQ,EAAAC,GACA,OAAA,IAAArb,EAAAJ,QAAA,SAAAY,EAAAwC,GACA,IAAAsF,EAAA+S,EAAAxE,aAAApL,mBAAA9G,KAAA,IAAAuG,GACA5C,EAAA9D,GAAA,QAAA,SAAAxH,GACAgG,EAAAhG,KACAwH,GAAA,MAAA,WACA8D,EAAA3E,WAAAqH,QAAAqQ,EAAAxE,aAAA7L,MACAhI,EAAA,IAAAzD,MAAA,mCAEAiB,MAEAyE,WAwDA,OArDA,SAAApC,EAAAoJ,GACA,IAAA2G,EAAAlP,KAWA,OAVAuI,EAAAhM,EAAAgC,OAAAgK,OACA9P,QAAA,EACAmf,YAAA,EACAzH,uBAAA,EACAvK,eAAA,EACAmP,eAAAjT,EAAAc,aAKArG,EAAAoC,eAAA,sBAAAQ,GAAA,EAAAoJ,EAAA4H,sBAAA5H,EAAA9P,QAAAyG,KAAA,SAAAC,GACA,IAAA0Y,EAAA,IAAAvC,EAAA/M,GAEA,OADAsP,EAAApH,KAAAtR,GACA0Y,IACA3Y,KAAA,SAAA2Y,GACA,IAAAC,GAAAxb,EAAAJ,QAAAY,QAAA+a,IACAxH,EAAAwH,EAAAxH,MACA,GAAA9H,EAAAqP,WACA,IAAA,IAAA3c,EAAA,EAAAA,EAAAoV,EAAAlV,OAAAF,IACA6c,EAAAvc,KAAAmc,EAAArH,EAAApV,KAGA,OAAAqB,EAAAJ,QAAA6b,IAAAD,KACA5Y,KAAA,SAAA8Y,GAGA,IAFA,IAAAH,EAAAG,EAAA1J,QACA+B,EAAAwH,EAAAxH,MACApV,EAAA,EAAAA,EAAAoV,EAAAlV,OAAAF,IAAA,CACA,IAAAhB,EAAAoW,EAAApV,GACAgd,EAAAhe,EAAAia,YACAgE,EAAA3b,EAAAO,QAAA7C,EAAAia,aACAhF,EAAAvD,KAAAuM,EAAAje,EAAAkZ,cACAzN,QAAA,EACAyK,uBAAA,EACAtK,KAAA5L,EAAA4L,KACAF,IAAA1L,EAAA0L,IACAK,QAAA/L,EAAA0a,eAAAxZ,OAAAlB,EAAA0a,eAAA,KACA1O,gBAAAhM,EAAAgM,gBACAC,eAAAjM,EAAAiM,eACAN,cAAA2C,EAAA3C,gBAEA3L,EAAA0L,MACAuJ,EAAAvD,KAAAuM,GAAAC,mBAAAF,GAMA,OAHAJ,EAAArK,WAAArS,SACA+T,EAAAlJ,QAAA6R,EAAArK,YAEA0B,OAMA7W,EAAA,uBACA,WACA,SACA,YACA,aACA,cACA,SAAA+X,EAAAK,EAAAjY,EAAA8W,EAAAhT,GACA,aAEA,SAAA8b,IACA,KAAApY,gBAAAoY,GACA,OAAA,IAAAA,EAEA,GAAA3Z,UAAAtD,OACA,MAAA,IAAAU,MAAA,kGAEAmE,KAAAqQ,MAAAnW,OAAAme,OAAA,MACArY,KAAAgG,QAAA,KACAhG,KAAA4Q,KAAA,GACA5Q,KAAAqR,MAAA,WACA,IAAAiH,EAAA,IAAAF,EACA,IAAA,IAAAnd,KAAA+E,KACA,mBAAAA,KAAA/E,KACAqd,EAAArd,GAAA+E,KAAA/E,IAGA,OAAAqd,GAYA,OATAF,EAAAje,UAAAiW,EACAgI,EAAAje,UAAAoe,UAAA9H,EACA2H,EAAA5f,QAAAA,EACA4f,EAAA9I,SAAAA,EACA8I,EAAAI,QAAA,SACAJ,EAAAG,UAAA,SAAA9T,EAAA8D,GACA,OAAA,IAAA6P,GAAAG,UAAA9T,EAAA8D,IAEA6P,EAAA9b,SAAAA,EACA8b,IAGA/f,EAAA,sBACA,mBACA,WACA,SAAAogB,EAAAL,GAEA,IAAAlJ,EAAA,SAAA/P,EAAAoJ,GACA,IAAA2G,EAAA,IAAAkJ,EACA,OAAA3Z,UAAAtD,OAAA,EACA+T,EAAAqJ,UAAApZ,EAAAoJ,GAEA2G,GAMA,OAFAA,EAAAwJ,QAAAN,EAEAK,EAAAE,OAAA,aAAAzJ,KAGA7W,EAAA,iBAAA,sBAAA,SAAAugB,GAAA,OAAAA","file":"../skylark-jszip.js","sourcesContent":["define('skylark-langx-binary/Buffer',[\r\n  \"./memory\"\r\n],function(Memory){\r\n  return Memory;\r\n});\ndefine('skylark-jszip/support',[\n    \"skylark-langx-binary/Buffer\",\n], function (Buffer) {\n    'use strict';\n    var support = {};\n\n    support.base64 = true;\n    support.array = true;\n    support.string = true;\n    support.arraybuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';\n    support.nodebuffer = support.buffer = true;///typeof Buffer !== 'undefined';\n    support.uint8array = typeof Uint8Array !== 'undefined';\n    if (typeof ArrayBuffer === 'undefined') {\n        support.blob = false;\n    } else {\n        var buffer = new ArrayBuffer(0);\n        try {\n            support.blob = new Blob([buffer], { type: 'application/zip' }).size === 0;\n        } catch (e) {\n            try {\n                var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n                var builder = new Builder();\n                builder.append(buffer);\n                support.blob = builder.getBlob('application/zip').size === 0;\n            } catch (e) {\n                support.blob = false;\n            }\n        }\n    }\n\n    support.getTypeOf = function (input) {\n        if (typeof input === 'string') {\n            return 'string';\n        }\n        if (Object.prototype.toString.call(input) === '[object Array]') {\n            return 'array';\n        }\n        if (support.nodebuffer && Buffer.isBuffer(input)) {\n            return 'nodebuffer';\n        }\n        if (support.uint8array && input instanceof Uint8Array) {\n            return 'uint8array';\n        }\n        if (support.arraybuffer && input instanceof ArrayBuffer) {\n            return 'arraybuffer';\n        }\n    };\n\n    return support;\n});\ndefine('skylark-jszip/base64',[\n    './support'\n], function (support) {\n    'use strict';\n\n    var _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    function encode(input) {\n        var output = [];\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0, len = input.length, remainingBytes = len;\n        var isArray = support.getTypeOf(input) !== 'string';\n        while (i < input.length) {\n            remainingBytes = len - i;\n            if (!isArray) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = i < len ? input.charCodeAt(i++) : 0;\n                chr3 = i < len ? input.charCodeAt(i++) : 0;\n            } else {\n                chr1 = input[i++];\n                chr2 = i < len ? input[i++] : 0;\n                chr3 = i < len ? input[i++] : 0;\n            }\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = remainingBytes > 1 ? (chr2 & 15) << 2 | chr3 >> 6 : 64;\n            enc4 = remainingBytes > 2 ? chr3 & 63 : 64;\n            output.push(_keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));\n        }\n        return output.join('');\n    };\n    function decode(input) {\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0, resultIndex = 0;\n        var dataUrlPrefix = 'data:';\n        if (input.substr(0, dataUrlPrefix.length) === dataUrlPrefix) {\n            throw new Error('Invalid base64 input, it looks like a data url.');\n        }\n        input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === _keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (input.charAt(input.length - 2) === _keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (totalLength % 1 !== 0) {\n            throw new Error('Invalid base64 input, bad content length.');\n        }\n        var output;\n        if (support.uint8array) {\n            output = new Uint8Array(totalLength | 0);\n        } else {\n            output = new Array(totalLength | 0);\n        }\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n            chr1 = enc1 << 2 | enc2 >> 4;\n            chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n            chr3 = (enc3 & 3) << 6 | enc4;\n            output[resultIndex++] = chr1;\n            if (enc3 !== 64) {\n                output[resultIndex++] = chr2;\n            }\n            if (enc4 !== 64) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return output;\n    };\n\n    return {\n        encode,\n        decode\n    }\n});\ndefine('skylark-jszip/external',[],function () {\n    'use strict';\n\n    return  { Promise};\n});\ndefine('skylark-jszip/utils',[\n    'skylark-langx-binary/buffer',\n    'skylark-langx-binary/transform',\n    'skylark-langx-binary/arraylike-to-string',\n    \"skylark-langx-constructs\",\n    './support',\n    './base64',\n    './external',\n], function (Buffer,transform,arrayLikeToString,constructs,support, base64, external) {\n    'use strict';\n    var utils = {};\n\n\n    utils.newBlob = function (part, type) {\n        utils.checkSupport('blob');\n        try {\n            return new Blob([part], { type: type });\n        } catch (e) {\n            try {\n                var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n                var builder = new Builder();\n                builder.append(part);\n                return builder.getBlob(type);\n            } catch (e) {\n                throw new Error(\"Bug : can't construct the Blob.\");\n            }\n        }\n    };\n\n    utils.applyFromCharCode = arrayLikeToString;\n\n    utils.transformTo = function (outputType, input) {\n        /*\n        if (!input) {\n            input = '';\n        }\n        if (!outputType) {\n            return input;\n        }\n        utils.checkSupport(outputType);\n        var inputType = utils.getTypeOf(input);\n        var result = transform[inputType][outputType](input);\n        return result;\n        */\n        if (outputType==\"nodebuffer\") {\n            outputType = \"memory\";\n        }\n        return transform(outputType,input);\n    };\n    utils.resolve = function (path) {\n        var parts = path.split('/');\n        var result = [];\n        for (var index = 0; index < parts.length; index++) {\n            var part = parts[index];\n            if (part === '.' || part === '' && index !== 0 && index !== parts.length - 1) {\n                continue;\n            } else if (part === '..') {\n                result.pop();\n            } else {\n                result.push(part);\n            }\n        }\n        return result.join('/');\n    };\n    /*\n    utils.getTypeOf = function (input) {\n        if (typeof input === 'string') {\n            return 'string';\n        }\n        if (Object.prototype.toString.call(input) === '[object Array]') {\n            return 'array';\n        }\n        if (support.nodebuffer && Buffer.isBuffer(input)) {\n            return 'nodebuffer';\n        }\n        if (support.uint8array && input instanceof Uint8Array) {\n            return 'uint8array';\n        }\n        if (support.arraybuffer && input instanceof ArrayBuffer) {\n            return 'arraybuffer';\n        }\n    };\n    */\n    utils.getTypeOf = support.getTypeOf;\n    \n    utils.checkSupport = function (type) {\n        var supported = support[type.toLowerCase()];\n        if (!supported) {\n            throw new Error(type + ' is not supported by this platform');\n        }\n    };\n    utils.MAX_VALUE_16BITS = 65535;\n    utils.MAX_VALUE_32BITS = -1;\n    utils.pretty = function (str) {\n        var res = '', code, i;\n        for (i = 0; i < (str || '').length; i++) {\n            code = str.charCodeAt(i);\n            res += '\\\\x' + (code < 16 ? '0' : '') + code.toString(16).toUpperCase();\n        }\n        return res;\n    };\n    utils.delay = function (callback, args, self) {\n        setTimeout(function () {\n            callback.apply(self || null, args || []);\n        });\n    };\n    utils.inherits = function (ctor, superCtor) {\n        var Obj = function () {\n        };\n        Obj.prototype = superCtor.prototype;\n        ctor.prototype = new Obj();\n    };\n    utils.extend = function () {\n        var result = {}, i, attr;\n        for (i = 0; i < arguments.length; i++) {\n            for (attr in arguments[i]) {\n                if (Object.prototype.hasOwnProperty.call(arguments[i], attr) && typeof result[attr] === 'undefined') {\n                    result[attr] = arguments[i][attr];\n                }\n            }\n        }\n        return result;\n    };\n    utils.prepareContent = function (name, inputData, isBinary, isOptimizedBinaryString, isBase64) {\n        var promise = external.Promise.resolve(inputData).then(function (data) {\n            var isBlob = support.blob && (data instanceof Blob || [\n                '[object File]',\n                '[object Blob]'\n            ].indexOf(Object.prototype.toString.call(data)) !== -1);\n            if (isBlob && typeof FileReader !== 'undefined') {\n                return new external.Promise(function (resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        resolve(e.target.result);\n                    };\n                    reader.onerror = function (e) {\n                        reject(e.target.error);\n                    };\n                    reader.readAsArrayBuffer(data);\n                });\n            } else {\n                return data;\n            }\n        });\n        return promise.then(function (data) {\n            var dataType = utils.getTypeOf(data);\n            if (!dataType) {\n                return external.Promise.reject(new Error(\"Can't read the data of '\" + name + \"'. Is it \" + 'in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?'));\n            }\n            if (dataType === 'arraybuffer') {\n                data = utils.transformTo('uint8array', data);\n            } else if (dataType === 'string') {\n                if (isBase64) {\n                    data = base64.decode(data);\n                } else if (isBinary) {\n                    if (isOptimizedBinaryString !== true) {\n                        data = string2binary(data);\n                    }\n                }\n            }\n            return data;\n        });\n    };\n\n    return utils;\n});\ndefine('skylark-jszip/stream/GenericWorker',[], function () {\n    'use strict';\n\n    function GenericWorker(name) {\n        this.name = name || 'default';\n        this.streamInfo = {};\n        this.generatedError = null;\n        this.extraStreamInfo = {};\n        this.isPaused = true;\n        this.isFinished = false;\n        this.isLocked = false;\n        this._listeners = {\n            'data': [],\n            'end': [],\n            'error': []\n        };\n        this.previous = null;\n    }\n    GenericWorker.prototype = {\n        push: function (chunk) {\n            this.emit('data', chunk);\n        },\n        end: function () {\n            if (this.isFinished) {\n                return false;\n            }\n            this.flush();\n            try {\n                this.emit('end');\n                this.cleanUp();\n                this.isFinished = true;\n            } catch (e) {\n                this.emit('error', e);\n            }\n            return true;\n        },\n        error: function (e) {\n            if (this.isFinished) {\n                return false;\n            }\n            if (this.isPaused) {\n                this.generatedError = e;\n            } else {\n                this.isFinished = true;\n                this.emit('error', e);\n                if (this.previous) {\n                    this.previous.error(e);\n                }\n                this.cleanUp();\n            }\n            return true;\n        },\n        on: function (name, listener) {\n            this._listeners[name].push(listener);\n            return this;\n        },\n        cleanUp: function () {\n            this.streamInfo = this.generatedError = this.extraStreamInfo = null;\n            this._listeners = [];\n        },\n        emit: function (name, arg) {\n            if (this._listeners[name]) {\n                for (var i = 0; i < this._listeners[name].length; i++) {\n                    this._listeners[name][i].call(this, arg);\n                }\n            }\n        },\n        pipe: function (next) {\n            return next.registerPrevious(this);\n        },\n        registerPrevious: function (previous) {\n            if (this.isLocked) {\n                throw new Error(\"The stream '\" + this + \"' has already been used.\");\n            }\n            this.streamInfo = previous.streamInfo;\n            this.mergeStreamInfo();\n            this.previous = previous;\n            var self = this;\n            previous.on('data', function (chunk) {\n                self.processChunk(chunk);\n            });\n            previous.on('end', function () {\n                self.end();\n            });\n            previous.on('error', function (e) {\n                self.error(e);\n            });\n            return this;\n        },\n        pause: function () {\n            if (this.isPaused || this.isFinished) {\n                return false;\n            }\n            this.isPaused = true;\n            if (this.previous) {\n                this.previous.pause();\n            }\n            return true;\n        },\n        resume: function () {\n            if (!this.isPaused || this.isFinished) {\n                return false;\n            }\n            this.isPaused = false;\n            var withError = false;\n            if (this.generatedError) {\n                this.error(this.generatedError);\n                withError = true;\n            }\n            if (this.previous) {\n                this.previous.resume();\n            }\n            return !withError;\n        },\n        flush: function () {\n        },\n        processChunk: function (chunk) {\n            this.push(chunk);\n        },\n        withStreamInfo: function (key, value) {\n            this.extraStreamInfo[key] = value;\n            this.mergeStreamInfo();\n            return this;\n        },\n        mergeStreamInfo: function () {\n            for (var key in this.extraStreamInfo) {\n                if (!Object.prototype.hasOwnProperty.call(this.extraStreamInfo, key)) {\n                    continue;\n                }\n                this.streamInfo[key] = this.extraStreamInfo[key];\n            }\n        },\n        lock: function () {\n            if (this.isLocked) {\n                throw new Error(\"The stream '\" + this + \"' has already been used.\");\n            }\n            this.isLocked = true;\n            if (this.previous) {\n                this.previous.lock();\n            }\n        },\n        toString: function () {\n            var me = 'Worker ' + this.name;\n            if (this.previous) {\n                return this.previous + ' -> ' + me;\n            } else {\n                return me;\n            }\n        }\n    };\n\n    return GenericWorker;\n\n});\ndefine('skylark-jszip/utf8',[\n    'skylark-langx-binary/buffer',\n    './utils',\n    './support',\n    './stream/GenericWorker'\n], function (Buffer,utils, support,  GenericWorker) {\n    'use strict';\n    var utf8 = {};\n\n    var _utf8len = new Array(256);\n    for (var i = 0; i < 256; i++) {\n        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;\n    }\n    _utf8len[254] = _utf8len[254] = 1;\n    var string2buf = function (str) {\n        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n        for (m_pos = 0; m_pos < str_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;\n        }\n        if (support.uint8array) {\n            buf = new Uint8Array(buf_len);\n        } else {\n            buf = new Array(buf_len);\n        }\n        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            if (c < 128) {\n                buf[i++] = c;\n            } else if (c < 2048) {\n                buf[i++] = 192 | c >>> 6;\n                buf[i++] = 128 | c & 63;\n            } else if (c < 65536) {\n                buf[i++] = 224 | c >>> 12;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            } else {\n                buf[i++] = 240 | c >>> 18;\n                buf[i++] = 128 | c >>> 12 & 63;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            }\n        }\n        return buf;\n    };\n    var utf8border = function (buf, max) {\n        var pos;\n        max = max || buf.length;\n        if (max > buf.length) {\n            max = buf.length;\n        }\n        pos = max - 1;\n        while (pos >= 0 && (buf[pos] & 192) === 128) {\n            pos--;\n        }\n        if (pos < 0) {\n            return max;\n        }\n        if (pos === 0) {\n            return max;\n        }\n        return pos + _utf8len[buf[pos]] > max ? pos : max;\n    };\n    var buf2string = function (buf) {\n        var i, out, c, c_len;\n        var len = buf.length;\n        var utf16buf = new Array(len * 2);\n        for (out = 0, i = 0; i < len;) {\n            c = buf[i++];\n            if (c < 128) {\n                utf16buf[out++] = c;\n                continue;\n            }\n            c_len = _utf8len[c];\n            if (c_len > 4) {\n                utf16buf[out++] = 65533;\n                i += c_len - 1;\n                continue;\n            }\n            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;\n            while (c_len > 1 && i < len) {\n                c = c << 6 | buf[i++] & 63;\n                c_len--;\n            }\n            if (c_len > 1) {\n                utf16buf[out++] = 65533;\n                continue;\n            }\n            if (c < 65536) {\n                utf16buf[out++] = c;\n            } else {\n                c -= 65536;\n                utf16buf[out++] = 55296 | c >> 10 & 1023;\n                utf16buf[out++] = 56320 | c & 1023;\n            }\n        }\n        if (utf16buf.length !== out) {\n            if (utf16buf.subarray) {\n                utf16buf = utf16buf.subarray(0, out);\n            } else {\n                utf16buf.length = out;\n            }\n        }\n        return utils.applyFromCharCode(utf16buf);\n    };\n    utf8.utf8encode = function utf8encode(str) {\n        if (support.nodebuffer) {\n            ///return nodejsUtils.newBufferFrom(str, 'utf-8');\n            return Buffer.from(str,'utf-8');\n        }\n        return string2buf(str);\n    };\n    utf8.utf8decode = function utf8decode(buf) {\n        if (support.nodebuffer) {\n            return utils.transformTo('nodebuffer', buf).toString('utf-8');\n        }\n        buf = utils.transformTo(support.uint8array ? 'uint8array' : 'array', buf);\n        return buf2string(buf);\n    };\n    function Utf8DecodeWorker() {\n        GenericWorker.call(this, 'utf-8 decode');\n        this.leftOver = null;\n    }\n    utils.inherits(Utf8DecodeWorker, GenericWorker);\n    Utf8DecodeWorker.prototype.processChunk = function (chunk) {\n        var data = utils.transformTo(support.uint8array ? 'uint8array' : 'array', chunk.data);\n        if (this.leftOver && this.leftOver.length) {\n            if (support.uint8array) {\n                var previousData = data;\n                data = new Uint8Array(previousData.length + this.leftOver.length);\n                data.set(this.leftOver, 0);\n                data.set(previousData, this.leftOver.length);\n            } else {\n                data = this.leftOver.concat(data);\n            }\n            this.leftOver = null;\n        }\n        var nextBoundary = utf8border(data);\n        var usableData = data;\n        if (nextBoundary !== data.length) {\n            if (support.uint8array) {\n                usableData = data.subarray(0, nextBoundary);\n                this.leftOver = data.subarray(nextBoundary, data.length);\n            } else {\n                usableData = data.slice(0, nextBoundary);\n                this.leftOver = data.slice(nextBoundary, data.length);\n            }\n        }\n        this.push({\n            data: utf8.utf8decode(usableData),\n            meta: chunk.meta\n        });\n    };\n    Utf8DecodeWorker.prototype.flush = function () {\n        if (this.leftOver && this.leftOver.length) {\n            this.push({\n                data: utf8.utf8decode(this.leftOver),\n                meta: {}\n            });\n            this.leftOver = null;\n        }\n    };\n    utf8.Utf8DecodeWorker = Utf8DecodeWorker;\n    function Utf8EncodeWorker() {\n        GenericWorker.call(this, 'utf-8 encode');\n    }\n    utils.inherits(Utf8EncodeWorker, GenericWorker);\n    Utf8EncodeWorker.prototype.processChunk = function (chunk) {\n        this.push({\n            data: utf8.utf8encode(chunk.data),\n            meta: chunk.meta\n        });\n    };\n    utf8.Utf8EncodeWorker = Utf8EncodeWorker;\n\n    return utf8;\n});\ndefine('skylark-jszip/stream/ConvertWorker',[\n    './GenericWorker',\n    '../utils'\n], function (GenericWorker, utils) {\n    'use strict';\n\n    function ConvertWorker(destType) {\n        GenericWorker.call(this, 'ConvertWorker to ' + destType);\n        this.destType = destType;\n    }\n    utils.inherits(ConvertWorker, GenericWorker);\n    ConvertWorker.prototype.processChunk = function (chunk) {\n        this.push({\n            data: utils.transformTo(this.destType, chunk.data),\n            meta: chunk.meta\n        });\n    };\n\n    return ConvertWorker;\n\n});\ndefine('skylark-jszip/stream/StreamHelper',[\n    '../utils',\n    './ConvertWorker',\n    './GenericWorker',\n    '../base64',\n    '../support',\n    '../external'\n], function (utils, ConvertWorker, GenericWorker, base64, support, external) {\n    'use strict';\n\n    ///if (support.nodestream) {\n    ///    try {\n    ///        NodejsStreamOutputAdapter = __module__6;\n    ///    } catch (e) {\n    ///    }\n    ///}\n    function transformZipOutput(type, content, mimeType) {\n        switch (type) {\n        case 'blob':\n            return utils.newBlob(utils.transformTo('arraybuffer', content), mimeType);\n        case 'base64':\n            return base64.encode(content);\n        default:\n            return utils.transformTo(type, content);\n        }\n    }\n    function concat(type, dataArray) {\n        var i, index = 0, res = null, totalLength = 0;\n        for (i = 0; i < dataArray.length; i++) {\n            totalLength += dataArray[i].length;\n        }\n        switch (type) {\n        case 'string':\n            return dataArray.join('');\n        case 'array':\n            return Array.prototype.concat.apply([], dataArray);\n        case 'uint8array':\n            res = new Uint8Array(totalLength);\n            for (i = 0; i < dataArray.length; i++) {\n                res.set(dataArray[i], index);\n                index += dataArray[i].length;\n            }\n            return res;\n        case 'nodebuffer':\n            return Buffer.concat(dataArray);\n        default:\n            throw new Error(\"concat : unsupported type '\" + type + \"'\");\n        }\n    }\n    function accumulate(helper, updateCallback) {\n        return new external.Promise(function (resolve, reject) {\n            var dataArray = [];\n            var chunkType = helper._internalType, resultType = helper._outputType, mimeType = helper._mimeType;\n            helper.on('data', function (data, meta) {\n                dataArray.push(data);\n                if (updateCallback) {\n                    updateCallback(meta);\n                }\n            }).on('error', function (err) {\n                dataArray = [];\n                reject(err);\n            }).on('end', function () {\n                try {\n                    var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n                    resolve(result);\n                } catch (e) {\n                    reject(e);\n                }\n                dataArray = [];\n            }).resume();\n        });\n    }\n    function StreamHelper(worker, outputType, mimeType) {\n        var internalType = outputType;\n        switch (outputType) {\n        case 'blob':\n        case 'arraybuffer':\n            internalType = 'uint8array';\n            break;\n        case 'base64':\n            internalType = 'string';\n            break;\n        }\n        try {\n            this._internalType = internalType;\n            this._outputType = outputType;\n            this._mimeType = mimeType;\n            utils.checkSupport(internalType);\n            this._worker = worker.pipe(new ConvertWorker(internalType));\n            worker.lock();\n        } catch (e) {\n            this._worker = new GenericWorker('error');\n            this._worker.error(e);\n        }\n    }\n    StreamHelper.prototype = {\n        accumulate: function (updateCb) {\n            return accumulate(this, updateCb);\n        },\n        on: function (evt, fn) {\n            var self = this;\n            if (evt === 'data') {\n                this._worker.on(evt, function (chunk) {\n                    fn.call(self, chunk.data, chunk.meta);\n                });\n            } else {\n                this._worker.on(evt, function () {\n                    utils.delay(fn, arguments, self);\n                });\n            }\n            return this;\n        },\n        resume: function () {\n            utils.delay(this._worker.resume, [], this._worker);\n            return this;\n        },\n        pause: function () {\n            this._worker.pause();\n            return this;\n        },\n        toNodejsStream: function (updateCb) {\n            utils.checkSupport('nodestream');\n            if (this._outputType !== 'nodebuffer') {\n                throw new Error(this._outputType + ' is not supported by this method');\n            }\n            return new NodejsStreamOutputAdapter(this, { objectMode: this._outputType !== 'nodebuffer' }, updateCb);\n        }\n    };\n   \n    return StreamHelper;\n});\ndefine('skylark-jszip/defaults',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    exports.base64 = false;\n    exports.binary = false;\n    exports.dir = false;\n    exports.createFolders = true;\n    exports.date = null;\n    exports.compression = null;\n    exports.compressionOptions = null;\n    exports.comment = null;\n    exports.unixPermissions = null;\n    exports.dosPermissions = null;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-jszip/stream/DataWorker',[\n    '../utils',\n    './GenericWorker'\n], function (utils, GenericWorker) {\n    'use strict';\n\n    var DEFAULT_BLOCK_SIZE = 16 * 1024;\n    function DataWorker(dataP) {\n        GenericWorker.call(this, 'DataWorker');\n        var self = this;\n        this.dataIsReady = false;\n        this.index = 0;\n        this.max = 0;\n        this.data = null;\n        this.type = '';\n        this._tickScheduled = false;\n        dataP.then(function (data) {\n            self.dataIsReady = true;\n            self.data = data;\n            self.max = data && data.length || 0;\n            self.type = utils.getTypeOf(data);\n            if (!self.isPaused) {\n                self._tickAndRepeat();\n            }\n        }, function (e) {\n            self.error(e);\n        });\n    }\n    utils.inherits(DataWorker, GenericWorker);\n    DataWorker.prototype.cleanUp = function () {\n        GenericWorker.prototype.cleanUp.call(this);\n        this.data = null;\n    };\n    DataWorker.prototype.resume = function () {\n        if (!GenericWorker.prototype.resume.call(this)) {\n            return false;\n        }\n        if (!this._tickScheduled && this.dataIsReady) {\n            this._tickScheduled = true;\n            utils.delay(this._tickAndRepeat, [], this);\n        }\n        return true;\n    };\n    DataWorker.prototype._tickAndRepeat = function () {\n        this._tickScheduled = false;\n        if (this.isPaused || this.isFinished) {\n            return;\n        }\n        this._tick();\n        if (!this.isFinished) {\n            utils.delay(this._tickAndRepeat, [], this);\n            this._tickScheduled = true;\n        }\n    };\n    DataWorker.prototype._tick = function () {\n        if (this.isPaused || this.isFinished) {\n            return false;\n        }\n        var size = DEFAULT_BLOCK_SIZE;\n        var data = null, nextIndex = Math.min(this.max, this.index + size);\n        if (this.index >= this.max) {\n            return this.end();\n        } else {\n            switch (this.type) {\n            case 'string':\n                data = this.data.substring(this.index, nextIndex);\n                break;\n            case 'uint8array':\n                data = this.data.subarray(this.index, nextIndex);\n                break;\n            case 'array':\n            case 'nodebuffer':\n                data = this.data.slice(this.index, nextIndex);\n                break;\n            }\n            this.index = nextIndex;\n            return this.push({\n                data: data,\n                meta: { percent: this.max ? this.index / this.max * 100 : 0 }\n            });\n        }\n    };\n    \n    return DataWorker;\n});\ndefine('skylark-jszip/crc32',['./utils'], function (utils) {\n    'use strict';\n\n    function makeTable() {\n        var c, table = [];\n        for (var n = 0; n < 256; n++) {\n            c = n;\n            for (var k = 0; k < 8; k++) {\n                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;\n            }\n            table[n] = c;\n        }\n        return table;\n    }\n    var crcTable = makeTable();\n    function crc32(crc, buf, len, pos) {\n        var t = crcTable, end = pos + len;\n        crc = crc ^ -1;\n        for (var i = pos; i < end; i++) {\n            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];\n        }\n        return crc ^ -1;\n    }\n    function crc32str(crc, str, len, pos) {\n        var t = crcTable, end = pos + len;\n        crc = crc ^ -1;\n        for (var i = pos; i < end; i++) {\n            crc = crc >>> 8 ^ t[(crc ^ str.charCodeAt(i)) & 255];\n        }\n        return crc ^ -1;\n    }\n    function crc32wrapper(input, crc) {\n        if (typeof input === 'undefined' || !input.length) {\n            return 0;\n        }\n        var isArray = utils.getTypeOf(input) !== 'string';\n        if (isArray) {\n            return crc32(crc | 0, input, input.length, 0);\n        } else {\n            return crc32str(crc | 0, input, input.length, 0);\n        }\n    }\n\n    return crc32wrapper;\n});\ndefine('skylark-jszip/stream/Crc32Probe',[\n    './GenericWorker',\n    '../crc32',\n    '../utils'\n], function (GenericWorker, crc32, utils) {\n    'use strict';\n\n    function Crc32Probe() {\n        GenericWorker.call(this, 'Crc32Probe');\n        this.withStreamInfo('crc32', 0);\n    }\n    utils.inherits(Crc32Probe, GenericWorker);\n    Crc32Probe.prototype.processChunk = function (chunk) {\n        this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);\n        this.push(chunk);\n    };\n    \n    return Crc32Probe;\n\n});\ndefine('skylark-jszip/stream/DataLengthProbe',[\n    '../utils',\n    './GenericWorker'\n], function (utils, GenericWorker) {\n    'use strict';\n\n    function DataLengthProbe(propName) {\n        GenericWorker.call(this, 'DataLengthProbe for ' + propName);\n        this.propName = propName;\n        this.withStreamInfo(propName, 0);\n    }\n    utils.inherits(DataLengthProbe, GenericWorker);\n    DataLengthProbe.prototype.processChunk = function (chunk) {\n        if (chunk) {\n            var length = this.streamInfo[this.propName] || 0;\n            this.streamInfo[this.propName] = length + chunk.data.length;\n        }\n        GenericWorker.prototype.processChunk.call(this, chunk);\n    };\n    return DataLengthProbe;\n\n});\ndefine('skylark-jszip/compressedObject',[\n    './external',\n    './stream/DataWorker',\n    './stream/Crc32Probe',\n    './stream/DataLengthProbe'\n], function (external, DataWorker, Crc32Probe, DataLengthProbe) {\n    'use strict';\n\n    function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n        this.compressedSize = compressedSize;\n        this.uncompressedSize = uncompressedSize;\n        this.crc32 = crc32;\n        this.compression = compression;\n        this.compressedContent = data;\n    }\n    CompressedObject.prototype = {\n        getContentWorker: function () {\n            var worker = new DataWorker(external.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe('data_length'));\n            var that = this;\n            worker.on('end', function () {\n                if (this.streamInfo['data_length'] !== that.uncompressedSize) {\n                    throw new Error('Bug : uncompressed data size mismatch');\n                }\n            });\n            return worker;\n        },\n        getCompressedWorker: function () {\n            return new DataWorker(external.Promise.resolve(this.compressedContent)).withStreamInfo('compressedSize', this.compressedSize).withStreamInfo('uncompressedSize', this.uncompressedSize).withStreamInfo('crc32', this.crc32).withStreamInfo('compression', this.compression);\n        }\n    };\n    CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n        return uncompressedWorker.pipe(new Crc32Probe()).pipe(new DataLengthProbe('uncompressedSize')).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe('compressedSize')).withStreamInfo('compression', compression);\n    };\n    \n    return CompressedObject;\n\n});\ndefine('skylark-jszip/zipObject',[\n    './stream/StreamHelper',\n    './stream/DataWorker',\n    './utf8',\n    './compressedObject',\n    './stream/GenericWorker'\n], function (StreamHelper, DataWorker, utf8, CompressedObject, GenericWorker) {\n    'use strict';\n\n    var ZipObject = function (name, data, options) {\n        this.name = name;\n        this.dir = options.dir;\n        this.date = options.date;\n        this.comment = options.comment;\n        this.unixPermissions = options.unixPermissions;\n        this.dosPermissions = options.dosPermissions;\n        this._data = data;\n        this._dataBinary = options.binary;\n        this.options = {\n            compression: options.compression,\n            compressionOptions: options.compressionOptions\n        };\n    };\n    ZipObject.prototype = {\n        internalStream: function (type) {\n            var result = null, outputType = 'string';\n            try {\n                if (!type) {\n                    throw new Error('No output type specified.');\n                }\n                outputType = type.toLowerCase();\n                var askUnicodeString = outputType === 'string' || outputType === 'text';\n                if (outputType === 'binarystring' || outputType === 'text') {\n                    outputType = 'string';\n                }\n                result = this._decompressWorker();\n                var isUnicodeString = !this._dataBinary;\n                if (isUnicodeString && !askUnicodeString) {\n                    result = result.pipe(new utf8.Utf8EncodeWorker());\n                }\n                if (!isUnicodeString && askUnicodeString) {\n                    result = result.pipe(new utf8.Utf8DecodeWorker());\n                }\n            } catch (e) {\n                result = new GenericWorker('error');\n                result.error(e);\n            }\n            return new StreamHelper(result, outputType, '');\n        },\n        async: function (type, onUpdate) {\n            return this.internalStream(type).accumulate(onUpdate);\n        },\n        nodeStream: function (type, onUpdate) {\n            return this.internalStream(type || 'nodebuffer').toNodejsStream(onUpdate);\n        },\n        _compressWorker: function (compression, compressionOptions) {\n            if (this._data instanceof CompressedObject && this._data.compression.magic === compression.magic) {\n                return this._data.getCompressedWorker();\n            } else {\n                var result = this._decompressWorker();\n                if (!this._dataBinary) {\n                    result = result.pipe(new utf8.Utf8EncodeWorker());\n                }\n                return CompressedObject.createWorkerFrom(result, compression, compressionOptions);\n            }\n        },\n        _decompressWorker: function () {\n            if (this._data instanceof CompressedObject) {\n                return this._data.getContentWorker();\n            } else if (this._data instanceof GenericWorker) {\n                return this._data;\n            } else {\n                return new DataWorker(this._data);\n            }\n        }\n    };\n    var removedMethods = [\n        'asText',\n        'asBinary',\n        'asNodeBuffer',\n        'asUint8Array',\n        'asArrayBuffer'\n    ];\n    var removedFn = function () {\n        throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');\n    };\n    for (var i = 0; i < removedMethods.length; i++) {\n        ZipObject.prototype[removedMethods[i]] = removedFn;\n    }\n    return ZipObject;\n\n});\ndefine('skylark-jszip/flate',[\n    'skylark-pako',\n    './utils',\n    './stream/GenericWorker'\n], function (pako, utils, GenericWorker) {\n    'use strict';\n\n    var USE_TYPEDARRAY = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Uint32Array !== 'undefined';\n\n    var ARRAY_TYPE = USE_TYPEDARRAY ? 'uint8array' : 'array';\n\n    var flate = {};\n\n    flate.magic = '\\b\\0';\n\n    function FlateWorker(action, options) {\n        GenericWorker.call(this, 'FlateWorker/' + action);\n        this._pako = null;\n        this._pakoAction = action;\n        this._pakoOptions = options;\n        this.meta = {};\n    }\n\n    utils.inherits(FlateWorker, GenericWorker);\n\n    FlateWorker.prototype.processChunk = function (chunk) {\n        this.meta = chunk.meta;\n        if (this._pako === null) {\n            this._createPako();\n        }\n        this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n    };\n    FlateWorker.prototype.flush = function () {\n        GenericWorker.prototype.flush.call(this);\n        if (this._pako === null) {\n            this._createPako();\n        }\n        this._pako.push([], true);\n    };\n    FlateWorker.prototype.cleanUp = function () {\n        GenericWorker.prototype.cleanUp.call(this);\n        this._pako = null;\n    };\n    FlateWorker.prototype._createPako = function () {\n        this._pako = new pako[this._pakoAction]({\n            raw: true,\n            level: this._pakoOptions.level || -1\n        });\n        var self = this;\n        this._pako.onData = function (data) {\n            self.push({\n                data: data,\n                meta: self.meta\n            });\n        };\n    };\n\n    flate.compressWorker = function (compressionOptions) {\n        return new FlateWorker(\"Deflate\", compressionOptions);\n    };\n    flate.uncompressWorker = function () {\n        return new FlateWorker(\"Inflate\", {});\n    };\n\n    return flate;\n});\ndefine('skylark-jszip/compressions',[\n    './stream/GenericWorker',\n    './flate'\n], function (GenericWorker, DEFLATE) {\n    'use strict';\n\n    var STORE = {\n        magic: '\\0\\0',\n        compressWorker: function () {\n            return new GenericWorker('STORE compression');\n        },\n        uncompressWorker: function () {\n            return new GenericWorker('STORE decompression');\n        }\n    };\n\n    return {\n        STORE,\n        DEFLATE\n    }\n});\ndefine('skylark-jszip/signature',[], function () {\n    'use strict';\n\n    const LOCAL_FILE_HEADER = 'PK\\x03\\x04';\n    const CENTRAL_FILE_HEADER = 'PK\\x01\\x02';\n    const CENTRAL_DIRECTORY_END = 'PK\\x05\\x06';\n    const ZIP64_CENTRAL_DIRECTORY_LOCATOR = 'PK\\x06\\x07';\n    const ZIP64_CENTRAL_DIRECTORY_END = 'PK\\x06\\x06';\n    const DATA_DESCRIPTOR = 'PK\\x07\\b';\n\n    return {\n        LOCAL_FILE_HEADER,\n        CENTRAL_FILE_HEADER,\n        CENTRAL_DIRECTORY_END,\n        ZIP64_CENTRAL_DIRECTORY_LOCATOR,\n        ZIP64_CENTRAL_DIRECTORY_END,\n        DATA_DESCRIPTOR\n    };\n});\ndefine('skylark-jszip/generate/ZipFileWorker',[\n    '../utils',\n    '../stream/GenericWorker',\n    '../utf8',\n    '../crc32',\n    '../signature'\n], function (utils, GenericWorker, utf8, crc32, signature) {\n    'use strict';\n\n    var decToHex = function (dec, bytes) {\n        var hex = '', i;\n        for (i = 0; i < bytes; i++) {\n            hex += String.fromCharCode(dec & 255);\n            dec = dec >>> 8;\n        }\n        return hex;\n    };\n    var generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n        var result = unixPermissions;\n        if (!unixPermissions) {\n            result = isDir ? 16893 : 33204;\n        }\n        return (result & 65535) << 16;\n    };\n    var generateDosExternalFileAttr = function (dosPermissions) {\n        return (dosPermissions || 0) & 63;\n    };\n    var generateZipParts = function (streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {\n        var file = streamInfo['file'], compression = streamInfo['compression'], useCustomEncoding = encodeFileName !== utf8.utf8encode, encodedFileName = utils.transformTo('string', encodeFileName(file.name)), utfEncodedFileName = utils.transformTo('string', utf8.utf8encode(file.name)), comment = file.comment, encodedComment = utils.transformTo('string', encodeFileName(comment)), utfEncodedComment = utils.transformTo('string', utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, dosTime, dosDate, extraFields = '', unicodePathExtraField = '', unicodeCommentExtraField = '', dir = file.dir, date = file.date;\n        var dataInfo = {\n            crc32: 0,\n            compressedSize: 0,\n            uncompressedSize: 0\n        };\n        if (!streamedContent || streamingEnded) {\n            dataInfo.crc32 = streamInfo['crc32'];\n            dataInfo.compressedSize = streamInfo['compressedSize'];\n            dataInfo.uncompressedSize = streamInfo['uncompressedSize'];\n        }\n        var bitflag = 0;\n        if (streamedContent) {\n            bitflag |= 8;\n        }\n        if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {\n            bitflag |= 2048;\n        }\n        var extFileAttr = 0;\n        var versionMadeBy = 0;\n        if (dir) {\n            extFileAttr |= 16;\n        }\n        if (platform === 'UNIX') {\n            versionMadeBy = 798;\n            extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n        } else {\n            versionMadeBy = 20;\n            extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n        }\n        dosTime = date.getUTCHours();\n        dosTime = dosTime << 6;\n        dosTime = dosTime | date.getUTCMinutes();\n        dosTime = dosTime << 5;\n        dosTime = dosTime | date.getUTCSeconds() / 2;\n        dosDate = date.getUTCFullYear() - 1980;\n        dosDate = dosDate << 4;\n        dosDate = dosDate | date.getUTCMonth() + 1;\n        dosDate = dosDate << 5;\n        dosDate = dosDate | date.getUTCDate();\n        if (useUTF8ForFileName) {\n            unicodePathExtraField = decToHex(1, 1) + decToHex(crc32(encodedFileName), 4) + utfEncodedFileName;\n            extraFields += 'up' + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField;\n        }\n        if (useUTF8ForComment) {\n            unicodeCommentExtraField = decToHex(1, 1) + decToHex(crc32(encodedComment), 4) + utfEncodedComment;\n            extraFields += 'uc' + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField;\n        }\n        var header = '';\n        header += '\\n\\0';\n        header += decToHex(bitflag, 2);\n        header += compression.magic;\n        header += decToHex(dosTime, 2);\n        header += decToHex(dosDate, 2);\n        header += decToHex(dataInfo.crc32, 4);\n        header += decToHex(dataInfo.compressedSize, 4);\n        header += decToHex(dataInfo.uncompressedSize, 4);\n        header += decToHex(encodedFileName.length, 2);\n        header += decToHex(extraFields.length, 2);\n        var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n        var dirRecord = signature.CENTRAL_FILE_HEADER + decToHex(versionMadeBy, 2) + header + decToHex(encodedComment.length, 2) + '\\0\\0' + '\\0\\0' + decToHex(extFileAttr, 4) + decToHex(offset, 4) + encodedFileName + extraFields + encodedComment;\n        return {\n            fileRecord: fileRecord,\n            dirRecord: dirRecord\n        };\n    };\n    var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {\n        var dirEnd = '';\n        var encodedComment = utils.transformTo('string', encodeFileName(comment));\n        dirEnd = signature.CENTRAL_DIRECTORY_END + '\\0\\0' + '\\0\\0' + decToHex(entriesCount, 2) + decToHex(entriesCount, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(encodedComment.length, 2) + encodedComment;\n        return dirEnd;\n    };\n    var generateDataDescriptors = function (streamInfo) {\n        var descriptor = '';\n        descriptor = signature.DATA_DESCRIPTOR + decToHex(streamInfo['crc32'], 4) + decToHex(streamInfo['compressedSize'], 4) + decToHex(streamInfo['uncompressedSize'], 4);\n        return descriptor;\n    };\n    function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {\n        GenericWorker.call(this, 'ZipFileWorker');\n        this.bytesWritten = 0;\n        this.zipComment = comment;\n        this.zipPlatform = platform;\n        this.encodeFileName = encodeFileName;\n        this.streamFiles = streamFiles;\n        this.accumulate = false;\n        this.contentBuffer = [];\n        this.dirRecords = [];\n        this.currentSourceOffset = 0;\n        this.entriesCount = 0;\n        this.currentFile = null;\n        this._sources = [];\n    }\n    utils.inherits(ZipFileWorker, GenericWorker);\n    ZipFileWorker.prototype.push = function (chunk) {\n        var currentFilePercent = chunk.meta.percent || 0;\n        var entriesCount = this.entriesCount;\n        var remainingFiles = this._sources.length;\n        if (this.accumulate) {\n            this.contentBuffer.push(chunk);\n        } else {\n            this.bytesWritten += chunk.data.length;\n            GenericWorker.prototype.push.call(this, {\n                data: chunk.data,\n                meta: {\n                    currentFile: this.currentFile,\n                    percent: entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100\n                }\n            });\n        }\n    };\n    ZipFileWorker.prototype.openedSource = function (streamInfo) {\n        this.currentSourceOffset = this.bytesWritten;\n        this.currentFile = streamInfo['file'].name;\n        var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n        if (streamedContent) {\n            var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n            this.push({\n                data: record.fileRecord,\n                meta: { percent: 0 }\n            });\n        } else {\n            this.accumulate = true;\n        }\n    };\n    ZipFileWorker.prototype.closedSource = function (streamInfo) {\n        this.accumulate = false;\n        var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n        var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n        this.dirRecords.push(record.dirRecord);\n        if (streamedContent) {\n            this.push({\n                data: generateDataDescriptors(streamInfo),\n                meta: { percent: 100 }\n            });\n        } else {\n            this.push({\n                data: record.fileRecord,\n                meta: { percent: 0 }\n            });\n            while (this.contentBuffer.length) {\n                this.push(this.contentBuffer.shift());\n            }\n        }\n        this.currentFile = null;\n    };\n    ZipFileWorker.prototype.flush = function () {\n        var localDirLength = this.bytesWritten;\n        for (var i = 0; i < this.dirRecords.length; i++) {\n            this.push({\n                data: this.dirRecords[i],\n                meta: { percent: 100 }\n            });\n        }\n        var centralDirLength = this.bytesWritten - localDirLength;\n        var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);\n        this.push({\n            data: dirEnd,\n            meta: { percent: 100 }\n        });\n    };\n    ZipFileWorker.prototype.prepareNextSource = function () {\n        this.previous = this._sources.shift();\n        this.openedSource(this.previous.streamInfo);\n        if (this.isPaused) {\n            this.previous.pause();\n        } else {\n            this.previous.resume();\n        }\n    };\n    ZipFileWorker.prototype.registerPrevious = function (previous) {\n        this._sources.push(previous);\n        var self = this;\n        previous.on('data', function (chunk) {\n            self.processChunk(chunk);\n        });\n        previous.on('end', function () {\n            self.closedSource(self.previous.streamInfo);\n            if (self._sources.length) {\n                self.prepareNextSource();\n            } else {\n                self.end();\n            }\n        });\n        previous.on('error', function (e) {\n            self.error(e);\n        });\n        return this;\n    };\n    ZipFileWorker.prototype.resume = function () {\n        if (!GenericWorker.prototype.resume.call(this)) {\n            return false;\n        }\n        if (!this.previous && this._sources.length) {\n            this.prepareNextSource();\n            return true;\n        }\n        if (!this.previous && !this._sources.length && !this.generatedError) {\n            this.end();\n            return true;\n        }\n    };\n    ZipFileWorker.prototype.error = function (e) {\n        var sources = this._sources;\n        if (!GenericWorker.prototype.error.call(this, e)) {\n            return false;\n        }\n        for (var i = 0; i < sources.length; i++) {\n            try {\n                sources[i].error(e);\n            } catch (e) {\n            }\n        }\n        return true;\n    };\n    ZipFileWorker.prototype.lock = function () {\n        GenericWorker.prototype.lock.call(this);\n        var sources = this._sources;\n        for (var i = 0; i < sources.length; i++) {\n            sources[i].lock();\n        }\n    };\n\n    return ZipFileWorker;\n\n});\ndefine('skylark-jszip/generate',[\r\n    './compressions',\r\n    './generate/ZipFileWorker'\r\n], function (compressions, ZipFileWorker) {\r\n    'use strict';\r\n\r\n    var getCompression = function (fileCompression, zipCompression) {\r\n        var compressionName = fileCompression || zipCompression;\r\n        var compression = compressions[compressionName];\r\n        if (!compression) {\r\n            throw new Error(compressionName + ' is not a valid compression method !');\r\n        }\r\n        return compression;\r\n    };\r\n    function generateWorker(zip, options, comment) {\r\n        var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);\r\n        var entriesCount = 0;\r\n        try {\r\n            zip.forEach(function (relativePath, file) {\r\n                entriesCount++;\r\n                var compression = getCompression(file.options.compression, options.compression);\r\n                var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\r\n                var dir = file.dir, date = file.date;\r\n                file._compressWorker(compression, compressionOptions).withStreamInfo('file', {\r\n                    name: relativePath,\r\n                    dir: dir,\r\n                    date: date,\r\n                    comment: file.comment || '',\r\n                    unixPermissions: file.unixPermissions,\r\n                    dosPermissions: file.dosPermissions\r\n                }).pipe(zipFileWorker);\r\n            });\r\n            zipFileWorker.entriesCount = entriesCount;\r\n        } catch (e) {\r\n            zipFileWorker.error(e);\r\n        }\r\n        return zipFileWorker;\r\n    };\r\n\r\n    return generateWorker;\r\n\r\n});\ndefine('skylark-jszip/object',[\n    './utf8',\n    './utils',\n    './stream/GenericWorker',\n    './stream/StreamHelper',\n    './defaults',\n    './compressedObject',\n    './zipObject',\n    './generate'\n], function (utf8, utils, GenericWorker, StreamHelper, defaults, CompressedObject, ZipObject, generate) {\n    'use strict';\n\n    var fileAdd = function (name, data, originalOptions) {\n        var dataType = utils.getTypeOf(data), parent;\n        var o = utils.extend(originalOptions || {}, defaults);\n        o.date = o.date || new Date();\n        if (o.compression !== null) {\n            o.compression = o.compression.toUpperCase();\n        }\n        if (typeof o.unixPermissions === 'string') {\n            o.unixPermissions = parseInt(o.unixPermissions, 8);\n        }\n        if (o.unixPermissions && o.unixPermissions & 16384) {\n            o.dir = true;\n        }\n        if (o.dosPermissions && o.dosPermissions & 16) {\n            o.dir = true;\n        }\n        if (o.dir) {\n            name = forceTrailingSlash(name);\n        }\n        if (o.createFolders && (parent = parentFolder(name))) {\n            folderAdd.call(this, parent, true);\n        }\n        var isUnicodeString = dataType === 'string' && o.binary === false && o.base64 === false;\n        if (!originalOptions || typeof originalOptions.binary === 'undefined') {\n            o.binary = !isUnicodeString;\n        }\n        var isCompressedEmpty = data instanceof CompressedObject && data.uncompressedSize === 0;\n        if (isCompressedEmpty || o.dir || !data || data.length === 0) {\n            o.base64 = false;\n            o.binary = true;\n            data = '';\n            o.compression = 'STORE';\n            dataType = 'string';\n        }\n        var zipObjectContent = null;\n        if (data instanceof CompressedObject || data instanceof GenericWorker) {\n            zipObjectContent = data;\n        ///} else if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {\n        ///    zipObjectContent = new NodejsStreamInputAdapter(name, data);\n        } else {\n            zipObjectContent = utils.prepareContent(name, data, o.binary, o.optimizedBinaryString, o.base64);\n        }\n        var object = new ZipObject(name, zipObjectContent, o);\n        this.files[name] = object;\n    };\n    var parentFolder = function (path) {\n        if (path.slice(-1) === '/') {\n            path = path.substring(0, path.length - 1);\n        }\n        var lastSlash = path.lastIndexOf('/');\n        return lastSlash > 0 ? path.substring(0, lastSlash) : '';\n    };\n    var forceTrailingSlash = function (path) {\n        if (path.slice(-1) !== '/') {\n            path += '/';\n        }\n        return path;\n    };\n    var folderAdd = function (name, createFolders) {\n        createFolders = typeof createFolders !== 'undefined' ? createFolders : defaults.createFolders;\n        name = forceTrailingSlash(name);\n        if (!this.files[name]) {\n            fileAdd.call(this, name, null, {\n                dir: true,\n                createFolders: createFolders\n            });\n        }\n        return this.files[name];\n    };\n    function isRegExp(object) {\n        return Object.prototype.toString.call(object) === '[object RegExp]';\n    }\n    var out = {\n        load: function () {\n            throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');\n        },\n        forEach: function (cb) {\n            var filename, relativePath, file;\n            for (filename in this.files) {\n                file = this.files[filename];\n                relativePath = filename.slice(this.root.length, filename.length);\n                if (relativePath && filename.slice(0, this.root.length) === this.root) {\n                    cb(relativePath, file);\n                }\n            }\n        },\n        filter: function (search) {\n            var result = [];\n            this.forEach(function (relativePath, entry) {\n                if (search(relativePath, entry)) {\n                    result.push(entry);\n                }\n            });\n            return result;\n        },\n        file: function (name, data, o) {\n            if (arguments.length === 1) {\n                if (isRegExp(name)) {\n                    var regexp = name;\n                    return this.filter(function (relativePath, file) {\n                        return !file.dir && regexp.test(relativePath);\n                    });\n                } else {\n                    var obj = this.files[this.root + name];\n                    if (obj && !obj.dir) {\n                        return obj;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                name = this.root + name;\n                fileAdd.call(this, name, data, o);\n            }\n            return this;\n        },\n        folder: function (arg) {\n            if (!arg) {\n                return this;\n            }\n            if (isRegExp(arg)) {\n                return this.filter(function (relativePath, file) {\n                    return file.dir && arg.test(relativePath);\n                });\n            }\n            var name = this.root + arg;\n            var newFolder = folderAdd.call(this, name);\n            var ret = this.clone();\n            ret.root = newFolder.name;\n            return ret;\n        },\n        remove: function (name) {\n            name = this.root + name;\n            var file = this.files[name];\n            if (!file) {\n                if (name.slice(-1) !== '/') {\n                    name += '/';\n                }\n                file = this.files[name];\n            }\n            if (file && !file.dir) {\n                delete this.files[name];\n            } else {\n                var kids = this.filter(function (relativePath, file) {\n                    return file.name.slice(0, name.length) === name;\n                });\n                for (var i = 0; i < kids.length; i++) {\n                    delete this.files[kids[i].name];\n                }\n            }\n            return this;\n        },\n        generate: function () {\n            throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');\n        },\n        generateInternalStream: function (options) {\n            var worker, opts = {};\n            try {\n                opts = utils.extend(options || {}, {\n                    streamFiles: false,\n                    compression: 'STORE',\n                    compressionOptions: null,\n                    type: '',\n                    platform: 'DOS',\n                    comment: null,\n                    mimeType: 'application/zip',\n                    encodeFileName: utf8.utf8encode\n                });\n                opts.type = opts.type.toLowerCase();\n                opts.compression = opts.compression.toUpperCase();\n                if (opts.type === 'binarystring') {\n                    opts.type = 'string';\n                }\n                if (!opts.type) {\n                    throw new Error('No output type specified.');\n                }\n                utils.checkSupport(opts.type);\n                if (opts.platform === 'darwin' || opts.platform === 'freebsd' || opts.platform === 'linux' || opts.platform === 'sunos') {\n                    opts.platform = 'UNIX';\n                }\n                if (opts.platform === 'win32') {\n                    opts.platform = 'DOS';\n                }\n                var comment = opts.comment || this.comment || '';\n                worker = generate.generateWorker(this, opts, comment);\n            } catch (e) {\n                worker = new GenericWorker('error');\n                worker.error(e);\n            }\n            return new StreamHelper(worker, opts.type || 'string', opts.mimeType);\n        },\n        generateAsync: function (options, onUpdate) {\n            return this.generateInternalStream(options).accumulate(onUpdate);\n        },\n        generateNodeStream: function (options, onUpdate) {\n            options = options || {};\n            if (!options.type) {\n                options.type = 'nodebuffer';\n            }\n            return this.generateInternalStream(options).toNodejsStream(onUpdate);\n        }\n    };\n\n    return out;\n\n});\ndefine('skylark-jszip/reader/ArrayReader',[\n    \"skylark-io-readers/array-reader\"\n], function (ArrayReader) {\n    'use strict';\n\n    return ArrayReader;\n\n});\ndefine('skylark-jszip/reader/StringReader',[\n    \"skylark-io-readers/string-reader\"\n], function (StringReader) {\n    'use strict';\n\n    return StringReader;\n\n});\ndefine('skylark-jszip/reader/NodeBufferReader',[\n    \"skylark-io-readers/buffer-reader\"\n], function (BufferReader) {\n    'use strict';\n\n    return BufferReader;\n\n});\ndefine('skylark-jszip/reader/Uint8ArrayReader',[\n    \"skylark-io-readers/uint8-array-reader\"\n], function (Uint8ArrayReader) {\n    'use strict';\n\n    return Uint8ArrayReader;\n\n});\ndefine('skylark-jszip/reader/readerFor',[\n    '../utils',\n    '../support',\n    './ArrayReader',\n    './StringReader',\n    './NodeBufferReader',\n    './Uint8ArrayReader'\n], function (utils, support, ArrayReader, StringReader, NodeBufferReader, Uint8ArrayReader) {\n    'use strict';\n\n    function readerFor(data) {\n        var type = utils.getTypeOf(data);\n        utils.checkSupport(type);\n        if (type === 'string' && !support.uint8array) {\n            return new StringReader(data);\n        }\n        if (type === 'nodebuffer') {\n            return new NodeBufferReader(data);\n        }\n        if (support.uint8array) {\n            return new Uint8ArrayReader(utils.transformTo('uint8array', data));\n        }\n        return new ArrayReader(utils.transformTo('array', data));\n    }\n\n    return readerFor;\n});\ndefine('skylark-jszip/zipEntry',[\n    './reader/readerFor',\n    './utils',\n    './compressedObject',\n    './crc32',\n    './utf8',\n    './compressions',\n    './support'\n], function (readerFor, utils, CompressedObject, crc32fn, utf8, compressions, support) {\n    'use strict';\n\n    var MADE_BY_DOS = 0;\n    var MADE_BY_UNIX = 3;\n    var findCompression = function (compressionMethod) {\n        for (var method in compressions) {\n            if (!Object.prototype.hasOwnProperty.call(compressions, method)) {\n                continue;\n            }\n            if (compressions[method].magic === compressionMethod) {\n                return compressions[method];\n            }\n        }\n        return null;\n    };\n    function ZipEntry(options, loadOptions) {\n        this.options = options;\n        this.loadOptions = loadOptions;\n    }\n    ZipEntry.prototype = {\n        isEncrypted: function () {\n            return (this.bitFlag & 1) === 1;\n        },\n        useUTF8: function () {\n            return (this.bitFlag & 2048) === 2048;\n        },\n        readLocalPart: function (reader) {\n            var compression, localExtraFieldsLength;\n            reader.skip(22);\n            this.fileNameLength = reader.readInt(2);\n            localExtraFieldsLength = reader.readInt(2);\n            this.fileName = reader.readData(this.fileNameLength);\n            reader.skip(localExtraFieldsLength);\n            if (this.compressedSize === -1 || this.uncompressedSize === -1) {\n                throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory \" + '(compressedSize === -1 || uncompressedSize === -1)');\n            }\n            compression = findCompression(this.compressionMethod);\n            if (compression === null) {\n                throw new Error('Corrupted zip : compression ' + utils.pretty(this.compressionMethod) + ' unknown (inner file : ' + utils.transformTo('string', this.fileName) + ')');\n            }\n            this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));\n        },\n        readCentralPart: function (reader) {\n            this.versionMadeBy = reader.readInt(2);\n            reader.skip(2);\n            this.bitFlag = reader.readInt(2);\n            this.compressionMethod = reader.readString(2);\n            this.date = reader.readDate();\n            this.crc32 = reader.readInt(4);\n            this.compressedSize = reader.readInt(4);\n            this.uncompressedSize = reader.readInt(4);\n            var fileNameLength = reader.readInt(2);\n            this.extraFieldsLength = reader.readInt(2);\n            this.fileCommentLength = reader.readInt(2);\n            this.diskNumberStart = reader.readInt(2);\n            this.internalFileAttributes = reader.readInt(2);\n            this.externalFileAttributes = reader.readInt(4);\n            this.localHeaderOffset = reader.readInt(4);\n            if (this.isEncrypted()) {\n                throw new Error('Encrypted zip are not supported');\n            }\n            reader.skip(fileNameLength);\n            this.readExtraFields(reader);\n            this.parseZIP64ExtraField(reader);\n            this.fileComment = reader.readData(this.fileCommentLength);\n        },\n        processAttributes: function () {\n            this.unixPermissions = null;\n            this.dosPermissions = null;\n            var madeBy = this.versionMadeBy >> 8;\n            this.dir = this.externalFileAttributes & 16 ? true : false;\n            if (madeBy === MADE_BY_DOS) {\n                this.dosPermissions = this.externalFileAttributes & 63;\n            }\n            if (madeBy === MADE_BY_UNIX) {\n                this.unixPermissions = this.externalFileAttributes >> 16 & 65535;\n            }\n            if (!this.dir && this.fileNameStr.slice(-1) === '/') {\n                this.dir = true;\n            }\n        },\n        parseZIP64ExtraField: function () {\n            if (!this.extraFields[1]) {\n                return;\n            }\n            var extraReader = readerFor(this.extraFields[1].value);\n            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n                this.uncompressedSize = extraReader.readInt(8);\n            }\n            if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n                this.compressedSize = extraReader.readInt(8);\n            }\n            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n                this.localHeaderOffset = extraReader.readInt(8);\n            }\n            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n                this.diskNumberStart = extraReader.readInt(4);\n            }\n        },\n        readExtraFields: function (reader) {\n            var end = reader.index + this.extraFieldsLength, extraFieldId, extraFieldLength, extraFieldValue;\n            if (!this.extraFields) {\n                this.extraFields = {};\n            }\n            while (reader.index + 4 < end) {\n                extraFieldId = reader.readInt(2);\n                extraFieldLength = reader.readInt(2);\n                extraFieldValue = reader.readData(extraFieldLength);\n                this.extraFields[extraFieldId] = {\n                    id: extraFieldId,\n                    length: extraFieldLength,\n                    value: extraFieldValue\n                };\n            }\n            reader.setIndex(end);\n        },\n        handleUTF8: function () {\n            var decodeParamType = support.uint8array ? 'uint8array' : 'array';\n            if (this.useUTF8()) {\n                this.fileNameStr = utf8.utf8decode(this.fileName);\n                this.fileCommentStr = utf8.utf8decode(this.fileComment);\n            } else {\n                var upath = this.findExtraFieldUnicodePath();\n                if (upath !== null) {\n                    this.fileNameStr = upath;\n                } else {\n                    var fileNameByteArray = utils.transformTo(decodeParamType, this.fileName);\n                    this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);\n                }\n                var ucomment = this.findExtraFieldUnicodeComment();\n                if (ucomment !== null) {\n                    this.fileCommentStr = ucomment;\n                } else {\n                    var commentByteArray = utils.transformTo(decodeParamType, this.fileComment);\n                    this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);\n                }\n            }\n        },\n        findExtraFieldUnicodePath: function () {\n            var upathField = this.extraFields[28789];\n            if (upathField) {\n                var extraReader = readerFor(upathField.value);\n                if (extraReader.readInt(1) !== 1) {\n                    return null;\n                }\n                if (crc32fn(this.fileName) !== extraReader.readInt(4)) {\n                    return null;\n                }\n                return utf8.utf8decode(extraReader.readData(upathField.length - 5));\n            }\n            return null;\n        },\n        findExtraFieldUnicodeComment: function () {\n            var ucommentField = this.extraFields[25461];\n            if (ucommentField) {\n                var extraReader = readerFor(ucommentField.value);\n                if (extraReader.readInt(1) !== 1) {\n                    return null;\n                }\n                if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {\n                    return null;\n                }\n                return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));\n            }\n            return null;\n        }\n    };\n\n    return ZipEntry;\n\n});\ndefine('skylark-jszip/zipEntries',[\n    './reader/readerFor',\n    './utils',\n    './signature',\n    './zipEntry',\n    './support'\n], function (readerFor, utils, sig, ZipEntry, support) {\n    'use strict';\n\n    function ZipEntries(loadOptions) {\n        this.files = [];\n        this.loadOptions = loadOptions;\n    }\n    ZipEntries.prototype = {\n        checkSignature: function (expectedSignature) {\n            if (!this.reader.readAndCheckSignature(expectedSignature)) {\n                this.reader.index -= 4;\n                var signature = this.reader.readString(4);\n                throw new Error('Corrupted zip or bug: unexpected signature ' + '(' + utils.pretty(signature) + ', expected ' + utils.pretty(expectedSignature) + ')');\n            }\n        },\n        isSignature: function (askedIndex, expectedSignature) {\n            var currentIndex = this.reader.index;\n            this.reader.setIndex(askedIndex);\n            var signature = this.reader.readString(4);\n            var result = signature === expectedSignature;\n            this.reader.setIndex(currentIndex);\n            return result;\n        },\n        readBlockEndOfCentral: function () {\n            this.diskNumber = this.reader.readInt(2);\n            this.diskWithCentralDirStart = this.reader.readInt(2);\n            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);\n            this.centralDirRecords = this.reader.readInt(2);\n            this.centralDirSize = this.reader.readInt(4);\n            this.centralDirOffset = this.reader.readInt(4);\n            this.zipCommentLength = this.reader.readInt(2);\n            var zipComment = this.reader.readData(this.zipCommentLength);\n            var decodeParamType = support.uint8array ? 'uint8array' : 'array';\n            var decodeContent = utils.transformTo(decodeParamType, zipComment);\n            this.zipComment = this.loadOptions.decodeFileName(decodeContent);\n        },\n        readBlockZip64EndOfCentral: function () {\n            this.zip64EndOfCentralSize = this.reader.readInt(8);\n            this.reader.skip(4);\n            this.diskNumber = this.reader.readInt(4);\n            this.diskWithCentralDirStart = this.reader.readInt(4);\n            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);\n            this.centralDirRecords = this.reader.readInt(8);\n            this.centralDirSize = this.reader.readInt(8);\n            this.centralDirOffset = this.reader.readInt(8);\n            this.zip64ExtensibleData = {};\n            var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;\n            while (index < extraDataSize) {\n                extraFieldId = this.reader.readInt(2);\n                extraFieldLength = this.reader.readInt(4);\n                extraFieldValue = this.reader.readData(extraFieldLength);\n                this.zip64ExtensibleData[extraFieldId] = {\n                    id: extraFieldId,\n                    length: extraFieldLength,\n                    value: extraFieldValue\n                };\n            }\n        },\n        readBlockZip64EndOfCentralLocator: function () {\n            this.diskWithZip64CentralDirStart = this.reader.readInt(4);\n            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);\n            this.disksCount = this.reader.readInt(4);\n            if (this.disksCount > 1) {\n                throw new Error('Multi-volumes zip are not supported');\n            }\n        },\n        readLocalFiles: function () {\n            var i, file;\n            for (i = 0; i < this.files.length; i++) {\n                file = this.files[i];\n                this.reader.setIndex(file.localHeaderOffset);\n                this.checkSignature(sig.LOCAL_FILE_HEADER);\n                file.readLocalPart(this.reader);\n                file.handleUTF8();\n                file.processAttributes();\n            }\n        },\n        readCentralDir: function () {\n            var file;\n            this.reader.setIndex(this.centralDirOffset);\n            while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {\n                file = new ZipEntry({ zip64: this.zip64 }, this.loadOptions);\n                file.readCentralPart(this.reader);\n                this.files.push(file);\n            }\n            if (this.centralDirRecords !== this.files.length) {\n                if (this.centralDirRecords !== 0 && this.files.length === 0) {\n                    throw new Error('Corrupted zip or bug: expected ' + this.centralDirRecords + ' records in central dir, got ' + this.files.length);\n                } else {\n                }\n            }\n        },\n        readEndOfCentral: function () {\n            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);\n            if (offset < 0) {\n                var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);\n                if (isGarbage) {\n                    throw new Error(\"Can't find end of central directory : is this a zip file ? \" + 'If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html');\n                } else {\n                    throw new Error(\"Corrupted zip: can't find end of central directory\");\n                }\n            }\n            this.reader.setIndex(offset);\n            var endOfCentralDirOffset = offset;\n            this.checkSignature(sig.CENTRAL_DIRECTORY_END);\n            this.readBlockEndOfCentral();\n            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {\n                this.zip64 = true;\n                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n                if (offset < 0) {\n                    throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");\n                }\n                this.reader.setIndex(offset);\n                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n                this.readBlockZip64EndOfCentralLocator();\n                if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {\n                    this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n                    if (this.relativeOffsetEndOfZip64CentralDir < 0) {\n                        throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");\n                    }\n                }\n                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);\n                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n                this.readBlockZip64EndOfCentral();\n            }\n            var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;\n            if (this.zip64) {\n                expectedEndOfCentralDirOffset += 20;\n                expectedEndOfCentralDirOffset += 12 + this.zip64EndOfCentralSize;\n            }\n            var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;\n            if (extraBytes > 0) {\n                if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {\n                } else {\n                    this.reader.zero = extraBytes;\n                }\n            } else if (extraBytes < 0) {\n                throw new Error('Corrupted zip: missing ' + Math.abs(extraBytes) + ' bytes.');\n            }\n        },\n        prepareReader: function (data) {\n            this.reader = readerFor(data);\n        },\n        load: function (data) {\n            this.prepareReader(data);\n            this.readEndOfCentral();\n            this.readCentralDir();\n            this.readLocalFiles();\n        }\n    };\n    return ZipEntries;\n\n});\ndefine('skylark-jszip/load',[\n    './utils',\n    './external',\n    './utf8',\n    './zipEntries',\n    './stream/Crc32Probe'\n], function (utils, external, utf8, ZipEntries, Crc32Probe) {\n    'use strict';\n\n    function checkEntryCRC32(zipEntry) {\n        return new external.Promise(function (resolve, reject) {\n            var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());\n            worker.on('error', function (e) {\n                reject(e);\n            }).on('end', function () {\n                if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {\n                    reject(new Error('Corrupted zip : CRC32 mismatch'));\n                } else {\n                    resolve();\n                }\n            }).resume();\n        });\n    }\n    function load(data, options) {\n        var zip = this;\n        options = utils.extend(options || {}, {\n            base64: false,\n            checkCRC32: false,\n            optimizedBinaryString: false,\n            createFolders: false,\n            decodeFileName: utf8.utf8decode\n        });\n        ///if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {\n        ///    return external.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\"));\n        ///}\n        return utils.prepareContent('the loaded zip file', data, true, options.optimizedBinaryString, options.base64).then(function (data) {\n            var zipEntries = new ZipEntries(options);\n            zipEntries.load(data);\n            return zipEntries;\n        }).then(function checkCRC32(zipEntries) {\n            var promises = [external.Promise.resolve(zipEntries)];\n            var files = zipEntries.files;\n            if (options.checkCRC32) {\n                for (var i = 0; i < files.length; i++) {\n                    promises.push(checkEntryCRC32(files[i]));\n                }\n            }\n            return external.Promise.all(promises);\n        }).then(function addFiles(results) {\n            var zipEntries = results.shift();\n            var files = zipEntries.files;\n            for (var i = 0; i < files.length; i++) {\n                var input = files[i];\n                var unsafeName = input.fileNameStr;\n                var safeName = utils.resolve(input.fileNameStr);\n                zip.file(safeName, input.decompressed, {\n                    binary: true,\n                    optimizedBinaryString: true,\n                    date: input.date,\n                    dir: input.dir,\n                    comment: input.fileCommentStr.length ? input.fileCommentStr : null,\n                    unixPermissions: input.unixPermissions,\n                    dosPermissions: input.dosPermissions,\n                    createFolders: options.createFolders\n                });\n                if (!input.dir) {\n                    zip.file(safeName).unsafeOriginalName = unsafeName;\n                }\n            }\n            if (zipEntries.zipComment.length) {\n                zip.comment = zipEntries.zipComment;\n            }\n            return zip;\n        });\n    };\n\n    return load;\n});\ndefine('skylark-jszip/JSZip',[\n    './object',\n    './load',\n    './support',\n    './defaults',\n    './external'\n], function (object, load, support, defaults, external) {\n    'use strict';\n\n    function JSZip() {\n        if (!(this instanceof JSZip)) {\n            return new JSZip();\n        }\n        if (arguments.length) {\n            throw new Error('The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.');\n        }\n        this.files = Object.create(null);\n        this.comment = null;\n        this.root = '';\n        this.clone = function () {\n            var newObj = new JSZip();\n            for (var i in this) {\n                if (typeof this[i] !== 'function') {\n                    newObj[i] = this[i];\n                }\n            }\n            return newObj;\n        };\n    }\n    JSZip.prototype = object;\n    JSZip.prototype.loadAsync = load;\n    JSZip.support = support;\n    JSZip.defaults = defaults;\n    JSZip.version = '3.10.1';\n    JSZip.loadAsync = function (content, options) {\n        return new JSZip().loadAsync(content, options);\n    };\n    JSZip.external = external;\n    return JSZip;\n\n});\ndefine('skylark-jszip/main',[\r\n    \"skylark-langx-ns\",\r\n    \"./JSZip\"\r\n], function(skylark, JSZip) {\r\n\r\n    var zip = function(data, options) {\r\n        var zip =  new JSZip();\r\n        if (arguments.length>0) {\r\n        \treturn zip.loadAsync(data, options);\r\n        } else {\r\n        \treturn zip;\r\n        }\r\n    };\r\n\r\n    zip.ZipFile = JSZip\r\n\r\n    return skylark.attach(\"intg.jszip\", zip);\r\n\r\n});\ndefine('skylark-jszip', ['skylark-jszip/main'], function (main) { return main; });\n\n"]}