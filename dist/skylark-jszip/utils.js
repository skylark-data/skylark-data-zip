/**
 * skylark-jszip - A skylark wrapper for jszip.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-binary/buffer","skylark-langx-binary/transform","skylark-langx-binary/arraylike-to-string","skylark-langx-constructs","./support","./base64","./external"],function(r,e,t,n,o,a,i){"use strict";var l={newBlob:function(r,e){l.checkSupport("blob");try{return new Blob([r],{type:e})}catch(n){try{var t=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return t.append(r),t.getBlob(e)}catch(r){throw new Error("Bug : can't construct the Blob.")}}}};return l.applyFromCharCode=t,l.transformTo=function(r,t){return"nodebuffer"==r&&(r="memory"),e(r,t)},l.resolve=function(r){for(var e=r.split("/"),t=[],n=0;n<e.length;n++){var o=e[n];"."===o||""===o&&0!==n&&n!==e.length-1||(".."===o?t.pop():t.push(o))}return t.join("/")},l.getTypeOf=o.getTypeOf,l.checkSupport=function(r){if(!o[r.toLowerCase()])throw new Error(r+" is not supported by this platform")},l.MAX_VALUE_16BITS=65535,l.MAX_VALUE_32BITS=-1,l.pretty=function(r){var e,t,n="";for(t=0;t<(r||"").length;t++)n+="\\x"+((e=r.charCodeAt(t))<16?"0":"")+e.toString(16).toUpperCase();return n},l.delay=function(r,e,t){setTimeout(function(){r.apply(t||null,e||[])})},l.inherits=function(r,e){var t=function(){};t.prototype=e.prototype,r.prototype=new t},l.extend=function(){var r,e,t={};for(r=0;r<arguments.length;r++)for(e in arguments[r])Object.prototype.hasOwnProperty.call(arguments[r],e)&&void 0===t[e]&&(t[e]=arguments[r][e]);return t},l.prepareContent=function(r,e,t,n,u){return i.Promise.resolve(e).then(function(r){return o.blob&&(r instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(r)))&&"undefined"!=typeof FileReader?new i.Promise(function(e,t){var n=new FileReader;n.onload=function(r){e(r.target.result)},n.onerror=function(r){t(r.target.error)},n.readAsArrayBuffer(r)}):r}).then(function(e){var o=l.getTypeOf(e);return o?("arraybuffer"===o?e=l.transformTo("uint8array",e):"string"===o&&(u?e=a.decode(e):t&&!0!==n&&(e=string2binary(e))),e):i.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})},l});
//# sourceMappingURL=sourcemaps/utils.js.map
