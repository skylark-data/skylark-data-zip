{"version":3,"sources":["reader/NodeBufferReader.js"],"names":["define","Uint8ArrayReader","utils","NodeBufferReader","data","call","this","inherits","prototype","readData","size","checkOffset","result","slice","zero","index"],"mappings":";;;;;;;AAAAA,QACI,qBACA,YACD,SAAUC,EAAkBC,GAC3B,aAEA,SAASC,EAAiBC,GACtBH,EAAiBI,KAAKC,KAAMF,GAShC,OAPAF,EAAMK,SAASJ,EAAkBF,GACjCE,EAAiBK,UAAUC,SAAW,SAAUC,GAC5CJ,KAAKK,YAAYD,GACjB,IAAIE,EAASN,KAAKF,KAAKS,MAAMP,KAAKQ,KAAOR,KAAKS,MAAOT,KAAKQ,KAAOR,KAAKS,MAAQL,GAE9E,OADAJ,KAAKS,OAASL,EACPE,GAEJT","file":"../../reader/NodeBufferReader.js","sourcesContent":["define([\n    './Uint8ArrayReader',\n    '../utils'\n], function (Uint8ArrayReader, utils) {\n    'use strict';\n\n    function NodeBufferReader(data) {\n        Uint8ArrayReader.call(this, data);\n    }\n    utils.inherits(NodeBufferReader, Uint8ArrayReader);\n    NodeBufferReader.prototype.readData = function (size) {\n        this.checkOffset(size);\n        var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);\n        this.index += size;\n        return result;\n    };\n    return NodeBufferReader;\n});"]}