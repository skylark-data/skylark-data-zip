{"version":3,"sources":["utf8.js"],"names":["define","Buffer","utils","support","GenericWorker","utf8","_utf8len","Array","i","Utf8DecodeWorker","call","this","leftOver","Utf8EncodeWorker","utf8encode","str","nodebuffer","from","buf","c","c2","m_pos","str_len","length","buf_len","charCodeAt","uint8array","Uint8Array","string2buf","utf8decode","transformTo","toString","out","c_len","len","utf16buf","subarray","applyFromCharCode","buf2string","inherits","prototype","processChunk","chunk","data","previousData","set","concat","nextBoundary","max","pos","utf8border","usableData","slice","push","meta","flush"],"mappings":"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","file":"../utf8.js","sourcesContent":["define([\n    'skylark-langx-binary/buffer',\n    './utils',\n    './support',\n    './stream/GenericWorker'\n], function (Buffer,utils, support,  GenericWorker) {\n    'use strict';\n    var utf8 = {};\n\n    var _utf8len = new Array(256);\n    for (var i = 0; i < 256; i++) {\n        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;\n    }\n    _utf8len[254] = _utf8len[254] = 1;\n    var string2buf = function (str) {\n        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n        for (m_pos = 0; m_pos < str_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;\n        }\n        if (support.uint8array) {\n            buf = new Uint8Array(buf_len);\n        } else {\n            buf = new Array(buf_len);\n        }\n        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            if (c < 128) {\n                buf[i++] = c;\n            } else if (c < 2048) {\n                buf[i++] = 192 | c >>> 6;\n                buf[i++] = 128 | c & 63;\n            } else if (c < 65536) {\n                buf[i++] = 224 | c >>> 12;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            } else {\n                buf[i++] = 240 | c >>> 18;\n                buf[i++] = 128 | c >>> 12 & 63;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            }\n        }\n        return buf;\n    };\n    var utf8border = function (buf, max) {\n        var pos;\n        max = max || buf.length;\n        if (max > buf.length) {\n            max = buf.length;\n        }\n        pos = max - 1;\n        while (pos >= 0 && (buf[pos] & 192) === 128) {\n            pos--;\n        }\n        if (pos < 0) {\n            return max;\n        }\n        if (pos === 0) {\n            return max;\n        }\n        return pos + _utf8len[buf[pos]] > max ? pos : max;\n    };\n    var buf2string = function (buf) {\n        var i, out, c, c_len;\n        var len = buf.length;\n        var utf16buf = new Array(len * 2);\n        for (out = 0, i = 0; i < len;) {\n            c = buf[i++];\n            if (c < 128) {\n                utf16buf[out++] = c;\n                continue;\n            }\n            c_len = _utf8len[c];\n            if (c_len > 4) {\n                utf16buf[out++] = 65533;\n                i += c_len - 1;\n                continue;\n            }\n            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;\n            while (c_len > 1 && i < len) {\n                c = c << 6 | buf[i++] & 63;\n                c_len--;\n            }\n            if (c_len > 1) {\n                utf16buf[out++] = 65533;\n                continue;\n            }\n            if (c < 65536) {\n                utf16buf[out++] = c;\n            } else {\n                c -= 65536;\n                utf16buf[out++] = 55296 | c >> 10 & 1023;\n                utf16buf[out++] = 56320 | c & 1023;\n            }\n        }\n        if (utf16buf.length !== out) {\n            if (utf16buf.subarray) {\n                utf16buf = utf16buf.subarray(0, out);\n            } else {\n                utf16buf.length = out;\n            }\n        }\n        return utils.applyFromCharCode(utf16buf);\n    };\n    utf8.utf8encode = function utf8encode(str) {\n        if (support.nodebuffer) {\n            ///return nodejsUtils.newBufferFrom(str, 'utf-8');\n            return Buffer.from(str,'utf-8');\n        }\n        return string2buf(str);\n    };\n    utf8.utf8decode = function utf8decode(buf) {\n        if (support.nodebuffer) {\n            return utils.transformTo('nodebuffer', buf).toString('utf-8');\n        }\n        buf = utils.transformTo(support.uint8array ? 'uint8array' : 'array', buf);\n        return buf2string(buf);\n    };\n    function Utf8DecodeWorker() {\n        GenericWorker.call(this, 'utf-8 decode');\n        this.leftOver = null;\n    }\n    utils.inherits(Utf8DecodeWorker, GenericWorker);\n    Utf8DecodeWorker.prototype.processChunk = function (chunk) {\n        var data = utils.transformTo(support.uint8array ? 'uint8array' : 'array', chunk.data);\n        if (this.leftOver && this.leftOver.length) {\n            if (support.uint8array) {\n                var previousData = data;\n                data = new Uint8Array(previousData.length + this.leftOver.length);\n                data.set(this.leftOver, 0);\n                data.set(previousData, this.leftOver.length);\n            } else {\n                data = this.leftOver.concat(data);\n            }\n            this.leftOver = null;\n        }\n        var nextBoundary = utf8border(data);\n        var usableData = data;\n        if (nextBoundary !== data.length) {\n            if (support.uint8array) {\n                usableData = data.subarray(0, nextBoundary);\n                this.leftOver = data.subarray(nextBoundary, data.length);\n            } else {\n                usableData = data.slice(0, nextBoundary);\n                this.leftOver = data.slice(nextBoundary, data.length);\n            }\n        }\n        this.push({\n            data: utf8.utf8decode(usableData),\n            meta: chunk.meta\n        });\n    };\n    Utf8DecodeWorker.prototype.flush = function () {\n        if (this.leftOver && this.leftOver.length) {\n            this.push({\n                data: utf8.utf8decode(this.leftOver),\n                meta: {}\n            });\n            this.leftOver = null;\n        }\n    };\n    utf8.Utf8DecodeWorker = Utf8DecodeWorker;\n    function Utf8EncodeWorker() {\n        GenericWorker.call(this, 'utf-8 encode');\n    }\n    utils.inherits(Utf8EncodeWorker, GenericWorker);\n    Utf8EncodeWorker.prototype.processChunk = function (chunk) {\n        this.push({\n            data: utf8.utf8encode(chunk.data),\n            meta: chunk.meta\n        });\n    };\n    utf8.Utf8EncodeWorker = Utf8EncodeWorker;\n\n    return utf8;\n});"]}