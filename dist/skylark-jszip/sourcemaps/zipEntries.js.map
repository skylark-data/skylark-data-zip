{"version":3,"sources":["zipEntries.js"],"names":["define","readerFor","utils","sig","ZipEntry","support","ZipEntries","loadOptions","this","files","prototype","checkSignature","expectedSignature","reader","readAndCheckSignature","index","signature","readString","Error","pretty","isSignature","askedIndex","currentIndex","setIndex","result","readBlockEndOfCentral","diskNumber","readInt","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","zipComment","readData","decodeParamType","uint8array","decodeContent","transformTo","decodeFileName","readBlockZip64EndOfCentral","zip64EndOfCentralSize","skip","zip64ExtensibleData","extraFieldId","extraFieldLength","extraFieldValue","extraDataSize","id","length","value","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","i","file","localHeaderOffset","LOCAL_FILE_HEADER","readLocalPart","handleUTF8","processAttributes","readCentralDir","CENTRAL_FILE_HEADER","zip64","readCentralPart","push","readEndOfCentral","offset","lastIndexOfSignature","CENTRAL_DIRECTORY_END","endOfCentralDirOffset","MAX_VALUE_16BITS","MAX_VALUE_32BITS","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","expectedEndOfCentralDirOffset","extraBytes","zero","Math","abs","prepareReader","data","load"],"mappings":"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","file":"../zipEntries.js","sourcesContent":["define([\n    './reader/readerFor',\n    './utils',\n    './signature',\n    './zipEntry',\n    './support'\n], function (readerFor, utils, sig, ZipEntry, support) {\n    'use strict';\n\n    function ZipEntries(loadOptions) {\n        this.files = [];\n        this.loadOptions = loadOptions;\n    }\n    ZipEntries.prototype = {\n        checkSignature: function (expectedSignature) {\n            if (!this.reader.readAndCheckSignature(expectedSignature)) {\n                this.reader.index -= 4;\n                var signature = this.reader.readString(4);\n                throw new Error('Corrupted zip or bug: unexpected signature ' + '(' + utils.pretty(signature) + ', expected ' + utils.pretty(expectedSignature) + ')');\n            }\n        },\n        isSignature: function (askedIndex, expectedSignature) {\n            var currentIndex = this.reader.index;\n            this.reader.setIndex(askedIndex);\n            var signature = this.reader.readString(4);\n            var result = signature === expectedSignature;\n            this.reader.setIndex(currentIndex);\n            return result;\n        },\n        readBlockEndOfCentral: function () {\n            this.diskNumber = this.reader.readInt(2);\n            this.diskWithCentralDirStart = this.reader.readInt(2);\n            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);\n            this.centralDirRecords = this.reader.readInt(2);\n            this.centralDirSize = this.reader.readInt(4);\n            this.centralDirOffset = this.reader.readInt(4);\n            this.zipCommentLength = this.reader.readInt(2);\n            var zipComment = this.reader.readData(this.zipCommentLength);\n            var decodeParamType = support.uint8array ? 'uint8array' : 'array';\n            var decodeContent = utils.transformTo(decodeParamType, zipComment);\n            this.zipComment = this.loadOptions.decodeFileName(decodeContent);\n        },\n        readBlockZip64EndOfCentral: function () {\n            this.zip64EndOfCentralSize = this.reader.readInt(8);\n            this.reader.skip(4);\n            this.diskNumber = this.reader.readInt(4);\n            this.diskWithCentralDirStart = this.reader.readInt(4);\n            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);\n            this.centralDirRecords = this.reader.readInt(8);\n            this.centralDirSize = this.reader.readInt(8);\n            this.centralDirOffset = this.reader.readInt(8);\n            this.zip64ExtensibleData = {};\n            var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;\n            while (index < extraDataSize) {\n                extraFieldId = this.reader.readInt(2);\n                extraFieldLength = this.reader.readInt(4);\n                extraFieldValue = this.reader.readData(extraFieldLength);\n                this.zip64ExtensibleData[extraFieldId] = {\n                    id: extraFieldId,\n                    length: extraFieldLength,\n                    value: extraFieldValue\n                };\n            }\n        },\n        readBlockZip64EndOfCentralLocator: function () {\n            this.diskWithZip64CentralDirStart = this.reader.readInt(4);\n            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);\n            this.disksCount = this.reader.readInt(4);\n            if (this.disksCount > 1) {\n                throw new Error('Multi-volumes zip are not supported');\n            }\n        },\n        readLocalFiles: function () {\n            var i, file;\n            for (i = 0; i < this.files.length; i++) {\n                file = this.files[i];\n                this.reader.setIndex(file.localHeaderOffset);\n                this.checkSignature(sig.LOCAL_FILE_HEADER);\n                file.readLocalPart(this.reader);\n                file.handleUTF8();\n                file.processAttributes();\n            }\n        },\n        readCentralDir: function () {\n            var file;\n            this.reader.setIndex(this.centralDirOffset);\n            while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {\n                file = new ZipEntry({ zip64: this.zip64 }, this.loadOptions);\n                file.readCentralPart(this.reader);\n                this.files.push(file);\n            }\n            if (this.centralDirRecords !== this.files.length) {\n                if (this.centralDirRecords !== 0 && this.files.length === 0) {\n                    throw new Error('Corrupted zip or bug: expected ' + this.centralDirRecords + ' records in central dir, got ' + this.files.length);\n                } else {\n                }\n            }\n        },\n        readEndOfCentral: function () {\n            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);\n            if (offset < 0) {\n                var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);\n                if (isGarbage) {\n                    throw new Error(\"Can't find end of central directory : is this a zip file ? \" + 'If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html');\n                } else {\n                    throw new Error(\"Corrupted zip: can't find end of central directory\");\n                }\n            }\n            this.reader.setIndex(offset);\n            var endOfCentralDirOffset = offset;\n            this.checkSignature(sig.CENTRAL_DIRECTORY_END);\n            this.readBlockEndOfCentral();\n            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {\n                this.zip64 = true;\n                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n                if (offset < 0) {\n                    throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");\n                }\n                this.reader.setIndex(offset);\n                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n                this.readBlockZip64EndOfCentralLocator();\n                if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {\n                    this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n                    if (this.relativeOffsetEndOfZip64CentralDir < 0) {\n                        throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");\n                    }\n                }\n                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);\n                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n                this.readBlockZip64EndOfCentral();\n            }\n            var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;\n            if (this.zip64) {\n                expectedEndOfCentralDirOffset += 20;\n                expectedEndOfCentralDirOffset += 12 + this.zip64EndOfCentralSize;\n            }\n            var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;\n            if (extraBytes > 0) {\n                if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {\n                } else {\n                    this.reader.zero = extraBytes;\n                }\n            } else if (extraBytes < 0) {\n                throw new Error('Corrupted zip: missing ' + Math.abs(extraBytes) + ' bytes.');\n            }\n        },\n        prepareReader: function (data) {\n            this.reader = readerFor(data);\n        },\n        load: function (data) {\n            this.prepareReader(data);\n            this.readEndOfCentral();\n            this.readCentralDir();\n            this.readLocalFiles();\n        }\n    };\n    return ZipEntries;\n\n});"]}