{"version":3,"sources":["base64.js"],"names":["define","support","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","len","length","remainingBytes","isArray","getTypeOf","charCodeAt","push","charAt","join","decode","resultIndex","substr","Error","totalLength","replace","uint8array","Uint8Array","Array","indexOf"],"mappings":";;;;;;;AAAAA,QACI,aACD,SAAUC,GACT,aAEA,IAAIC,EAAU,oEAqEd,OACIC,OArEJ,SAAgBC,GAKZ,IAJA,IACIC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EADpCC,KAEAC,EAAI,EAAGC,EAAMV,EAAMW,OAAQC,EAAiBF,EAC5CG,EAAuC,WAA7BhB,EAAQiB,UAAUd,GACzBS,EAAIT,EAAMW,QACbC,EAAiBF,EAAMD,EAClBI,GAKDZ,EAAOD,EAAMS,KACbP,EAAOO,EAAIC,EAAMV,EAAMS,KAAO,EAC9BN,EAAOM,EAAIC,EAAMV,EAAMS,KAAO,IAN9BR,EAAOD,EAAMe,WAAWN,KACxBP,EAAOO,EAAIC,EAAMV,EAAMe,WAAWN,KAAO,EACzCN,EAAOM,EAAIC,EAAMV,EAAMe,WAAWN,KAAO,GAM7CL,EAAOH,GAAQ,EACfI,GAAe,EAAPJ,IAAa,EAAIC,GAAQ,EACjCI,EAAOM,EAAiB,GAAY,GAAPV,IAAc,EAAIC,GAAQ,EAAI,GAC3DI,EAAOK,EAAiB,EAAW,GAAPT,EAAY,GACxCK,EAAOQ,KAAKlB,EAAQmB,OAAOb,GAAQN,EAAQmB,OAAOZ,GAAQP,EAAQmB,OAAOX,GAAQR,EAAQmB,OAAOV,IAEpG,OAAOC,EAAOU,KAAK,KAgDnBC,OA9CJ,SAAgBnB,GACZ,IAAIC,EAAMC,EAAMC,EACNE,EAAMC,EAAMC,EAClBE,EAAI,EAAGW,EAAc,EAEzB,GADoB,UAChBpB,EAAMqB,OAAO,EADG,QACcV,QAC9B,MAAM,IAAIW,MAAM,mDAGpB,IAUId,EAVAe,EAA6B,GADjCvB,EAAQA,EAAMwB,QAAQ,mBAAoB,KAClBb,OAAa,EAOrC,GANIX,EAAMiB,OAAOjB,EAAMW,OAAS,KAAOb,EAAQmB,OAAO,KAClDM,IAEAvB,EAAMiB,OAAOjB,EAAMW,OAAS,KAAOb,EAAQmB,OAAO,KAClDM,IAEAA,EAAc,GAAM,EACpB,MAAM,IAAID,MAAM,6CAQpB,IAJId,EADAX,EAAQ4B,WACC,IAAIC,WAAyB,EAAdH,GAEf,IAAII,MAAoB,EAAdJ,GAEhBd,EAAIT,EAAMW,QAKbV,EAJOH,EAAQ8B,QAAQ5B,EAAMiB,OAAOR,OAIrB,GAHfJ,EAAOP,EAAQ8B,QAAQ5B,EAAMiB,OAAOR,QAGT,EAC3BP,GAAe,GAAPG,IAAc,GAHtBC,EAAOR,EAAQ8B,QAAQ5B,EAAMiB,OAAOR,QAGF,EAClCN,GAAe,EAAPG,IAAa,GAHrBC,EAAOT,EAAQ8B,QAAQ5B,EAAMiB,OAAOR,OAIpCD,EAAOY,KAAiBnB,EACX,KAATK,IACAE,EAAOY,KAAiBlB,GAEf,KAATK,IACAC,EAAOY,KAAiBjB,GAGhC,OAAOK","file":"../base64.js","sourcesContent":["define([\n    './support'\n], function (support) {\n    'use strict';\n\n    var _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    function encode(input) {\n        var output = [];\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0, len = input.length, remainingBytes = len;\n        var isArray = support.getTypeOf(input) !== 'string';\n        while (i < input.length) {\n            remainingBytes = len - i;\n            if (!isArray) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = i < len ? input.charCodeAt(i++) : 0;\n                chr3 = i < len ? input.charCodeAt(i++) : 0;\n            } else {\n                chr1 = input[i++];\n                chr2 = i < len ? input[i++] : 0;\n                chr3 = i < len ? input[i++] : 0;\n            }\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = remainingBytes > 1 ? (chr2 & 15) << 2 | chr3 >> 6 : 64;\n            enc4 = remainingBytes > 2 ? chr3 & 63 : 64;\n            output.push(_keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));\n        }\n        return output.join('');\n    };\n    function decode(input) {\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0, resultIndex = 0;\n        var dataUrlPrefix = 'data:';\n        if (input.substr(0, dataUrlPrefix.length) === dataUrlPrefix) {\n            throw new Error('Invalid base64 input, it looks like a data url.');\n        }\n        input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === _keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (input.charAt(input.length - 2) === _keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (totalLength % 1 !== 0) {\n            throw new Error('Invalid base64 input, bad content length.');\n        }\n        var output;\n        if (support.uint8array) {\n            output = new Uint8Array(totalLength | 0);\n        } else {\n            output = new Array(totalLength | 0);\n        }\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n            chr1 = enc1 << 2 | enc2 >> 4;\n            chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n            chr3 = (enc3 & 3) << 6 | enc4;\n            output[resultIndex++] = chr1;\n            if (enc3 !== 64) {\n                output[resultIndex++] = chr2;\n            }\n            if (enc4 !== 64) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return output;\n    };\n\n    return {\n        encode,\n        decode\n    }\n});"]}