{"version":3,"sources":["zipEntry.js"],"names":["define","readerFor","utils","CompressedObject","crc32fn","utf8","compressions","support","ZipEntry","options","loadOptions","this","prototype","isEncrypted","bitFlag","useUTF8","readLocalPart","reader","compression","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","readData","compressedSize","uncompressedSize","Error","compressionMethod","method","Object","hasOwnProperty","call","magic","findCompression","pretty","transformTo","decompressed","crc32","readCentralPart","versionMadeBy","readString","date","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","processAttributes","unixPermissions","dosPermissions","madeBy","dir","fileNameStr","slice","extraFields","extraReader","value","MAX_VALUE_32BITS","extraFieldId","extraFieldLength","extraFieldValue","end","index","id","length","setIndex","handleUTF8","decodeParamType","uint8array","utf8decode","fileCommentStr","upath","findExtraFieldUnicodePath","fileNameByteArray","decodeFileName","ucomment","findExtraFieldUnicodeComment","commentByteArray","upathField","ucommentField"],"mappings":";;;;;;;AAAAA,QACI,qBACA,UACA,qBACA,UACA,SACA,iBACA,aACD,SAAUC,EAAWC,EAAOC,EAAkBC,EAASC,EAAMC,EAAcC,GAC1E,aAeA,SAASC,EAASC,EAASC,GACvBC,KAAKF,QAAUA,EACfE,KAAKD,YAAcA,EAuJvB,OArJAF,EAASI,WACLC,YAAa,WACT,OAA8B,IAAP,EAAfF,KAAKG,UAEjBC,QAAS,WACL,OAAiC,OAAV,KAAfJ,KAAKG,UAEjBE,cAAe,SAAUC,GACrB,IAAIC,EAAaC,EAMjB,GALAF,EAAOG,KAAK,IACZT,KAAKU,eAAiBJ,EAAOK,QAAQ,GACrCH,EAAyBF,EAAOK,QAAQ,GACxCX,KAAKY,SAAWN,EAAOO,SAASb,KAAKU,gBACrCJ,EAAOG,KAAKD,IACiB,IAAzBR,KAAKc,iBAAoD,IAA3Bd,KAAKe,iBACnC,MAAM,IAAIC,MAAM,sIAGpB,GAAoB,QADpBT,EAhCc,SAAUU,GAC5B,IAAK,IAAIC,KAAUvB,EACf,GAAKwB,OAAOlB,UAAUmB,eAAeC,KAAK1B,EAAcuB,IAGpDvB,EAAauB,GAAQI,QAAUL,EAC/B,OAAOtB,EAAauB,GAG5B,OAAO,KAuBWK,CAAgBvB,KAAKiB,oBAE/B,MAAM,IAAID,MAAM,+BAAiCzB,EAAMiC,OAAOxB,KAAKiB,mBAAqB,0BAA4B1B,EAAMkC,YAAY,SAAUzB,KAAKY,UAAY,KAErKZ,KAAK0B,aAAe,IAAIlC,EAAiBQ,KAAKc,eAAgBd,KAAKe,iBAAkBf,KAAK2B,MAAOpB,EAAaD,EAAOO,SAASb,KAAKc,kBAEvIc,gBAAiB,SAAUtB,GACvBN,KAAK6B,cAAgBvB,EAAOK,QAAQ,GACpCL,EAAOG,KAAK,GACZT,KAAKG,QAAUG,EAAOK,QAAQ,GAC9BX,KAAKiB,kBAAoBX,EAAOwB,WAAW,GAC3C9B,KAAK+B,KAAOzB,EAAO0B,WACnBhC,KAAK2B,MAAQrB,EAAOK,QAAQ,GAC5BX,KAAKc,eAAiBR,EAAOK,QAAQ,GACrCX,KAAKe,iBAAmBT,EAAOK,QAAQ,GACvC,IAAID,EAAiBJ,EAAOK,QAAQ,GAOpC,GANAX,KAAKiC,kBAAoB3B,EAAOK,QAAQ,GACxCX,KAAKkC,kBAAoB5B,EAAOK,QAAQ,GACxCX,KAAKmC,gBAAkB7B,EAAOK,QAAQ,GACtCX,KAAKoC,uBAAyB9B,EAAOK,QAAQ,GAC7CX,KAAKqC,uBAAyB/B,EAAOK,QAAQ,GAC7CX,KAAKsC,kBAAoBhC,EAAOK,QAAQ,GACpCX,KAAKE,cACL,MAAM,IAAIc,MAAM,mCAEpBV,EAAOG,KAAKC,GACZV,KAAKuC,gBAAgBjC,GACrBN,KAAKwC,qBAAqBlC,GAC1BN,KAAKyC,YAAcnC,EAAOO,SAASb,KAAKkC,oBAE5CQ,kBAAmB,WACf1C,KAAK2C,gBAAkB,KACvB3C,KAAK4C,eAAiB,KACtB,IAAIC,EAAS7C,KAAK6B,eAAiB,EACnC7B,KAAK8C,OAAoC,GAA9B9C,KAAKqC,wBApEN,IAqENQ,IACA7C,KAAK4C,eAA+C,GAA9B5C,KAAKqC,wBArEpB,IAuEPQ,IACA7C,KAAK2C,gBAAkB3C,KAAKqC,wBAA0B,GAAK,OAE1DrC,KAAK8C,KAAsC,MAA/B9C,KAAK+C,YAAYC,OAAO,KACrChD,KAAK8C,KAAM,IAGnBN,qBAAsB,WAClB,GAAKxC,KAAKiD,YAAY,GAAtB,CAGA,IAAIC,EAAc5D,EAAUU,KAAKiD,YAAY,GAAGE,OAC5CnD,KAAKe,mBAAqBxB,EAAM6D,mBAChCpD,KAAKe,iBAAmBmC,EAAYvC,QAAQ,IAE5CX,KAAKc,iBAAmBvB,EAAM6D,mBAC9BpD,KAAKc,eAAiBoC,EAAYvC,QAAQ,IAE1CX,KAAKsC,oBAAsB/C,EAAM6D,mBACjCpD,KAAKsC,kBAAoBY,EAAYvC,QAAQ,IAE7CX,KAAKmC,kBAAoB5C,EAAM6D,mBAC/BpD,KAAKmC,gBAAkBe,EAAYvC,QAAQ,MAGnD4B,gBAAiB,SAAUjC,GACvB,IAAiD+C,EAAcC,EAAkBC,EAA7EC,EAAMlD,EAAOmD,MAAQzD,KAAKiC,kBAI9B,IAHKjC,KAAKiD,cACNjD,KAAKiD,gBAEF3C,EAAOmD,MAAQ,EAAID,GACtBH,EAAe/C,EAAOK,QAAQ,GAC9B2C,EAAmBhD,EAAOK,QAAQ,GAClC4C,EAAkBjD,EAAOO,SAASyC,GAClCtD,KAAKiD,YAAYI,IACbK,GAAIL,EACJM,OAAQL,EACRH,MAAOI,GAGfjD,EAAOsD,SAASJ,IAEpBK,WAAY,WACR,IAAIC,EAAkBlE,EAAQmE,WAAa,aAAe,QAC1D,GAAI/D,KAAKI,UACLJ,KAAK+C,YAAcrD,EAAKsE,WAAWhE,KAAKY,UACxCZ,KAAKiE,eAAiBvE,EAAKsE,WAAWhE,KAAKyC,iBACxC,CACH,IAAIyB,EAAQlE,KAAKmE,4BACjB,GAAc,OAAVD,EACAlE,KAAK+C,YAAcmB,MAChB,CACH,IAAIE,EAAoB7E,EAAMkC,YAAYqC,EAAiB9D,KAAKY,UAChEZ,KAAK+C,YAAc/C,KAAKD,YAAYsE,eAAeD,GAEvD,IAAIE,EAAWtE,KAAKuE,+BACpB,GAAiB,OAAbD,EACAtE,KAAKiE,eAAiBK,MACnB,CACH,IAAIE,EAAmBjF,EAAMkC,YAAYqC,EAAiB9D,KAAKyC,aAC/DzC,KAAKiE,eAAiBjE,KAAKD,YAAYsE,eAAeG,MAIlEL,0BAA2B,WACvB,IAAIM,EAAazE,KAAKiD,YAAY,OAClC,GAAIwB,EAAY,CACZ,IAAIvB,EAAc5D,EAAUmF,EAAWtB,OACvC,OAA+B,IAA3BD,EAAYvC,QAAQ,GACb,KAEPlB,EAAQO,KAAKY,YAAcsC,EAAYvC,QAAQ,GACxC,KAEJjB,EAAKsE,WAAWd,EAAYrC,SAAS4D,EAAWd,OAAS,IAEpE,OAAO,MAEXY,6BAA8B,WAC1B,IAAIG,EAAgB1E,KAAKiD,YAAY,OACrC,GAAIyB,EAAe,CACf,IAAIxB,EAAc5D,EAAUoF,EAAcvB,OAC1C,OAA+B,IAA3BD,EAAYvC,QAAQ,GACb,KAEPlB,EAAQO,KAAKyC,eAAiBS,EAAYvC,QAAQ,GAC3C,KAEJjB,EAAKsE,WAAWd,EAAYrC,SAAS6D,EAAcf,OAAS,IAEvE,OAAO,OAIR9D","file":"../zipEntry.js","sourcesContent":["define([\n    './reader/readerFor',\n    './utils',\n    './compressedObject',\n    './crc32',\n    './utf8',\n    './compressions',\n    './support'\n], function (readerFor, utils, CompressedObject, crc32fn, utf8, compressions, support) {\n    'use strict';\n\n    var MADE_BY_DOS = 0;\n    var MADE_BY_UNIX = 3;\n    var findCompression = function (compressionMethod) {\n        for (var method in compressions) {\n            if (!Object.prototype.hasOwnProperty.call(compressions, method)) {\n                continue;\n            }\n            if (compressions[method].magic === compressionMethod) {\n                return compressions[method];\n            }\n        }\n        return null;\n    };\n    function ZipEntry(options, loadOptions) {\n        this.options = options;\n        this.loadOptions = loadOptions;\n    }\n    ZipEntry.prototype = {\n        isEncrypted: function () {\n            return (this.bitFlag & 1) === 1;\n        },\n        useUTF8: function () {\n            return (this.bitFlag & 2048) === 2048;\n        },\n        readLocalPart: function (reader) {\n            var compression, localExtraFieldsLength;\n            reader.skip(22);\n            this.fileNameLength = reader.readInt(2);\n            localExtraFieldsLength = reader.readInt(2);\n            this.fileName = reader.readData(this.fileNameLength);\n            reader.skip(localExtraFieldsLength);\n            if (this.compressedSize === -1 || this.uncompressedSize === -1) {\n                throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory \" + '(compressedSize === -1 || uncompressedSize === -1)');\n            }\n            compression = findCompression(this.compressionMethod);\n            if (compression === null) {\n                throw new Error('Corrupted zip : compression ' + utils.pretty(this.compressionMethod) + ' unknown (inner file : ' + utils.transformTo('string', this.fileName) + ')');\n            }\n            this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));\n        },\n        readCentralPart: function (reader) {\n            this.versionMadeBy = reader.readInt(2);\n            reader.skip(2);\n            this.bitFlag = reader.readInt(2);\n            this.compressionMethod = reader.readString(2);\n            this.date = reader.readDate();\n            this.crc32 = reader.readInt(4);\n            this.compressedSize = reader.readInt(4);\n            this.uncompressedSize = reader.readInt(4);\n            var fileNameLength = reader.readInt(2);\n            this.extraFieldsLength = reader.readInt(2);\n            this.fileCommentLength = reader.readInt(2);\n            this.diskNumberStart = reader.readInt(2);\n            this.internalFileAttributes = reader.readInt(2);\n            this.externalFileAttributes = reader.readInt(4);\n            this.localHeaderOffset = reader.readInt(4);\n            if (this.isEncrypted()) {\n                throw new Error('Encrypted zip are not supported');\n            }\n            reader.skip(fileNameLength);\n            this.readExtraFields(reader);\n            this.parseZIP64ExtraField(reader);\n            this.fileComment = reader.readData(this.fileCommentLength);\n        },\n        processAttributes: function () {\n            this.unixPermissions = null;\n            this.dosPermissions = null;\n            var madeBy = this.versionMadeBy >> 8;\n            this.dir = this.externalFileAttributes & 16 ? true : false;\n            if (madeBy === MADE_BY_DOS) {\n                this.dosPermissions = this.externalFileAttributes & 63;\n            }\n            if (madeBy === MADE_BY_UNIX) {\n                this.unixPermissions = this.externalFileAttributes >> 16 & 65535;\n            }\n            if (!this.dir && this.fileNameStr.slice(-1) === '/') {\n                this.dir = true;\n            }\n        },\n        parseZIP64ExtraField: function () {\n            if (!this.extraFields[1]) {\n                return;\n            }\n            var extraReader = readerFor(this.extraFields[1].value);\n            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n                this.uncompressedSize = extraReader.readInt(8);\n            }\n            if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n                this.compressedSize = extraReader.readInt(8);\n            }\n            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n                this.localHeaderOffset = extraReader.readInt(8);\n            }\n            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n                this.diskNumberStart = extraReader.readInt(4);\n            }\n        },\n        readExtraFields: function (reader) {\n            var end = reader.index + this.extraFieldsLength, extraFieldId, extraFieldLength, extraFieldValue;\n            if (!this.extraFields) {\n                this.extraFields = {};\n            }\n            while (reader.index + 4 < end) {\n                extraFieldId = reader.readInt(2);\n                extraFieldLength = reader.readInt(2);\n                extraFieldValue = reader.readData(extraFieldLength);\n                this.extraFields[extraFieldId] = {\n                    id: extraFieldId,\n                    length: extraFieldLength,\n                    value: extraFieldValue\n                };\n            }\n            reader.setIndex(end);\n        },\n        handleUTF8: function () {\n            var decodeParamType = support.uint8array ? 'uint8array' : 'array';\n            if (this.useUTF8()) {\n                this.fileNameStr = utf8.utf8decode(this.fileName);\n                this.fileCommentStr = utf8.utf8decode(this.fileComment);\n            } else {\n                var upath = this.findExtraFieldUnicodePath();\n                if (upath !== null) {\n                    this.fileNameStr = upath;\n                } else {\n                    var fileNameByteArray = utils.transformTo(decodeParamType, this.fileName);\n                    this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);\n                }\n                var ucomment = this.findExtraFieldUnicodeComment();\n                if (ucomment !== null) {\n                    this.fileCommentStr = ucomment;\n                } else {\n                    var commentByteArray = utils.transformTo(decodeParamType, this.fileComment);\n                    this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);\n                }\n            }\n        },\n        findExtraFieldUnicodePath: function () {\n            var upathField = this.extraFields[28789];\n            if (upathField) {\n                var extraReader = readerFor(upathField.value);\n                if (extraReader.readInt(1) !== 1) {\n                    return null;\n                }\n                if (crc32fn(this.fileName) !== extraReader.readInt(4)) {\n                    return null;\n                }\n                return utf8.utf8decode(extraReader.readData(upathField.length - 5));\n            }\n            return null;\n        },\n        findExtraFieldUnicodeComment: function () {\n            var ucommentField = this.extraFields[25461];\n            if (ucommentField) {\n                var extraReader = readerFor(ucommentField.value);\n                if (extraReader.readInt(1) !== 1) {\n                    return null;\n                }\n                if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {\n                    return null;\n                }\n                return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));\n            }\n            return null;\n        }\n    };\n\n    return ZipEntry;\n\n});"]}