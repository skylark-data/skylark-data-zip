{"version":3,"sources":["zipObject.js"],"names":["define","StreamHelper","DataWorker","utf8","CompressedObject","GenericWorker","ZipObject","name","data","options","this","dir","date","comment","unixPermissions","dosPermissions","_data","_dataBinary","binary","compression","compressionOptions","prototype","internalStream","type","result","outputType","Error","askUnicodeString","toLowerCase","_decompressWorker","isUnicodeString","pipe","Utf8EncodeWorker","Utf8DecodeWorker","e","error","async","onUpdate","accumulate","nodeStream","toNodejsStream","_compressWorker","magic","getCompressedWorker","createWorkerFrom","getContentWorker","removedMethods","removedFn","i","length"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,SACA,qBACA,0BACD,SAAUC,EAAcC,EAAYC,EAAMC,EAAkBC,GAC3D,aAEA,IAAIC,EAAY,SAAUC,EAAMC,EAAMC,GAClCC,KAAKH,KAAOA,EACZG,KAAKC,IAAMF,EAAQE,IACnBD,KAAKE,KAAOH,EAAQG,KACpBF,KAAKG,QAAUJ,EAAQI,QACvBH,KAAKI,gBAAkBL,EAAQK,gBAC/BJ,KAAKK,eAAiBN,EAAQM,eAC9BL,KAAKM,MAAQR,EACbE,KAAKO,YAAcR,EAAQS,OAC3BR,KAAKD,SACDU,YAAaV,EAAQU,YACrBC,mBAAoBX,EAAQW,qBAGpCd,EAAUe,WACNC,eAAgB,SAAUC,GACtB,IAAIC,EAAS,KAAMC,EAAa,SAChC,IACI,IAAKF,EACD,MAAM,IAAIG,MAAM,6BAGpB,IAAIC,EAAkC,YADtCF,EAAaF,EAAKK,gBAC+C,SAAfH,EAC/B,iBAAfA,GAAgD,SAAfA,IACjCA,EAAa,UAEjBD,EAASd,KAAKmB,oBACd,IAAIC,GAAmBpB,KAAKO,YACxBa,IAAoBH,IACpBH,EAASA,EAAOO,KAAK,IAAI5B,EAAK6B,oBAE7BF,GAAmBH,IACpBH,EAASA,EAAOO,KAAK,IAAI5B,EAAK8B,mBAEpC,MAAOC,IACLV,EAAS,IAAInB,EAAc,UACpB8B,MAAMD,GAEjB,OAAO,IAAIjC,EAAauB,EAAQC,EAAY,KAEhDW,MAAO,SAAUb,EAAMc,GACnB,OAAO3B,KAAKY,eAAeC,GAAMe,WAAWD,IAEhDE,WAAY,SAAUhB,EAAMc,GACxB,OAAO3B,KAAKY,eAAeC,GAAQ,cAAciB,eAAeH,IAEpEI,gBAAiB,SAAUtB,EAAaC,GACpC,GAAIV,KAAKM,iBAAiBZ,GAAoBM,KAAKM,MAAMG,YAAYuB,QAAUvB,EAAYuB,MACvF,OAAOhC,KAAKM,MAAM2B,sBAElB,IAAInB,EAASd,KAAKmB,oBAIlB,OAHKnB,KAAKO,cACNO,EAASA,EAAOO,KAAK,IAAI5B,EAAK6B,mBAE3B5B,EAAiBwC,iBAAiBpB,EAAQL,EAAaC,IAGtES,kBAAmB,WACf,OAAInB,KAAKM,iBAAiBZ,EACfM,KAAKM,MAAM6B,mBACXnC,KAAKM,iBAAiBX,EACtBK,KAAKM,MAEL,IAAId,EAAWQ,KAAKM,SAcvC,IAVA,IAAI8B,GACA,SACA,WACA,eACA,eACA,iBAEAC,EAAY,WACZ,MAAM,IAAIrB,MAAM,+EAEXsB,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IACvC1C,EAAUe,UAAUyB,EAAeE,IAAMD,EAE7C,OAAOzC","file":"../zipObject.js","sourcesContent":["define([\n    './stream/StreamHelper',\n    './stream/DataWorker',\n    './utf8',\n    './compressedObject',\n    './stream/GenericWorker'\n], function (StreamHelper, DataWorker, utf8, CompressedObject, GenericWorker) {\n    'use strict';\n\n    var ZipObject = function (name, data, options) {\n        this.name = name;\n        this.dir = options.dir;\n        this.date = options.date;\n        this.comment = options.comment;\n        this.unixPermissions = options.unixPermissions;\n        this.dosPermissions = options.dosPermissions;\n        this._data = data;\n        this._dataBinary = options.binary;\n        this.options = {\n            compression: options.compression,\n            compressionOptions: options.compressionOptions\n        };\n    };\n    ZipObject.prototype = {\n        internalStream: function (type) {\n            var result = null, outputType = 'string';\n            try {\n                if (!type) {\n                    throw new Error('No output type specified.');\n                }\n                outputType = type.toLowerCase();\n                var askUnicodeString = outputType === 'string' || outputType === 'text';\n                if (outputType === 'binarystring' || outputType === 'text') {\n                    outputType = 'string';\n                }\n                result = this._decompressWorker();\n                var isUnicodeString = !this._dataBinary;\n                if (isUnicodeString && !askUnicodeString) {\n                    result = result.pipe(new utf8.Utf8EncodeWorker());\n                }\n                if (!isUnicodeString && askUnicodeString) {\n                    result = result.pipe(new utf8.Utf8DecodeWorker());\n                }\n            } catch (e) {\n                result = new GenericWorker('error');\n                result.error(e);\n            }\n            return new StreamHelper(result, outputType, '');\n        },\n        async: function (type, onUpdate) {\n            return this.internalStream(type).accumulate(onUpdate);\n        },\n        nodeStream: function (type, onUpdate) {\n            return this.internalStream(type || 'nodebuffer').toNodejsStream(onUpdate);\n        },\n        _compressWorker: function (compression, compressionOptions) {\n            if (this._data instanceof CompressedObject && this._data.compression.magic === compression.magic) {\n                return this._data.getCompressedWorker();\n            } else {\n                var result = this._decompressWorker();\n                if (!this._dataBinary) {\n                    result = result.pipe(new utf8.Utf8EncodeWorker());\n                }\n                return CompressedObject.createWorkerFrom(result, compression, compressionOptions);\n            }\n        },\n        _decompressWorker: function () {\n            if (this._data instanceof CompressedObject) {\n                return this._data.getContentWorker();\n            } else if (this._data instanceof GenericWorker) {\n                return this._data;\n            } else {\n                return new DataWorker(this._data);\n            }\n        }\n    };\n    var removedMethods = [\n        'asText',\n        'asBinary',\n        'asNodeBuffer',\n        'asUint8Array',\n        'asArrayBuffer'\n    ];\n    var removedFn = function () {\n        throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');\n    };\n    for (var i = 0; i < removedMethods.length; i++) {\n        ZipObject.prototype[removedMethods[i]] = removedFn;\n    }\n    return ZipObject;\n\n});"]}