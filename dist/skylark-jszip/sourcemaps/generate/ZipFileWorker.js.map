{"version":3,"sources":["generate/ZipFileWorker.js"],"names":["define","utils","GenericWorker","utf8","crc32","signature","decToHex","dec","bytes","i","hex","String","fromCharCode","generateZipParts","streamInfo","streamedContent","streamingEnded","offset","platform","encodeFileName","dosTime","dosDate","file","compression","useCustomEncoding","utf8encode","encodedFileName","transformTo","name","utfEncodedFileName","comment","encodedComment","utfEncodedComment","useUTF8ForFileName","length","useUTF8ForComment","extraFields","unicodePathExtraField","unicodeCommentExtraField","dir","date","dataInfo","compressedSize","uncompressedSize","bitflag","unixPermissions","result","extFileAttr","versionMadeBy","dosPermissions","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","header","magic","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","ZipFileWorker","streamFiles","call","this","bytesWritten","zipComment","zipPlatform","accumulate","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","inherits","prototype","push","chunk","currentFilePercent","meta","percent","remainingFiles","data","openedSource","record","closedSource","DATA_DESCRIPTOR","generateDataDescriptors","shift","flush","localDirLength","centralDirLength","dirEnd","CENTRAL_DIRECTORY_END","generateCentralDirectoryEnd","prepareNextSource","previous","isPaused","pause","resume","registerPrevious","self","on","processChunk","end","e","error","generatedError","sources","lock"],"mappings":"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","file":"../../generate/ZipFileWorker.js","sourcesContent":["define([\n    '../utils',\n    '../stream/GenericWorker',\n    '../utf8',\n    '../crc32',\n    '../signature'\n], function (utils, GenericWorker, utf8, crc32, signature) {\n    'use strict';\n\n    var decToHex = function (dec, bytes) {\n        var hex = '', i;\n        for (i = 0; i < bytes; i++) {\n            hex += String.fromCharCode(dec & 255);\n            dec = dec >>> 8;\n        }\n        return hex;\n    };\n    var generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n        var result = unixPermissions;\n        if (!unixPermissions) {\n            result = isDir ? 16893 : 33204;\n        }\n        return (result & 65535) << 16;\n    };\n    var generateDosExternalFileAttr = function (dosPermissions) {\n        return (dosPermissions || 0) & 63;\n    };\n    var generateZipParts = function (streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {\n        var file = streamInfo['file'], compression = streamInfo['compression'], useCustomEncoding = encodeFileName !== utf8.utf8encode, encodedFileName = utils.transformTo('string', encodeFileName(file.name)), utfEncodedFileName = utils.transformTo('string', utf8.utf8encode(file.name)), comment = file.comment, encodedComment = utils.transformTo('string', encodeFileName(comment)), utfEncodedComment = utils.transformTo('string', utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, dosTime, dosDate, extraFields = '', unicodePathExtraField = '', unicodeCommentExtraField = '', dir = file.dir, date = file.date;\n        var dataInfo = {\n            crc32: 0,\n            compressedSize: 0,\n            uncompressedSize: 0\n        };\n        if (!streamedContent || streamingEnded) {\n            dataInfo.crc32 = streamInfo['crc32'];\n            dataInfo.compressedSize = streamInfo['compressedSize'];\n            dataInfo.uncompressedSize = streamInfo['uncompressedSize'];\n        }\n        var bitflag = 0;\n        if (streamedContent) {\n            bitflag |= 8;\n        }\n        if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {\n            bitflag |= 2048;\n        }\n        var extFileAttr = 0;\n        var versionMadeBy = 0;\n        if (dir) {\n            extFileAttr |= 16;\n        }\n        if (platform === 'UNIX') {\n            versionMadeBy = 798;\n            extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n        } else {\n            versionMadeBy = 20;\n            extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n        }\n        dosTime = date.getUTCHours();\n        dosTime = dosTime << 6;\n        dosTime = dosTime | date.getUTCMinutes();\n        dosTime = dosTime << 5;\n        dosTime = dosTime | date.getUTCSeconds() / 2;\n        dosDate = date.getUTCFullYear() - 1980;\n        dosDate = dosDate << 4;\n        dosDate = dosDate | date.getUTCMonth() + 1;\n        dosDate = dosDate << 5;\n        dosDate = dosDate | date.getUTCDate();\n        if (useUTF8ForFileName) {\n            unicodePathExtraField = decToHex(1, 1) + decToHex(crc32(encodedFileName), 4) + utfEncodedFileName;\n            extraFields += 'up' + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField;\n        }\n        if (useUTF8ForComment) {\n            unicodeCommentExtraField = decToHex(1, 1) + decToHex(crc32(encodedComment), 4) + utfEncodedComment;\n            extraFields += 'uc' + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField;\n        }\n        var header = '';\n        header += '\\n\\0';\n        header += decToHex(bitflag, 2);\n        header += compression.magic;\n        header += decToHex(dosTime, 2);\n        header += decToHex(dosDate, 2);\n        header += decToHex(dataInfo.crc32, 4);\n        header += decToHex(dataInfo.compressedSize, 4);\n        header += decToHex(dataInfo.uncompressedSize, 4);\n        header += decToHex(encodedFileName.length, 2);\n        header += decToHex(extraFields.length, 2);\n        var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n        var dirRecord = signature.CENTRAL_FILE_HEADER + decToHex(versionMadeBy, 2) + header + decToHex(encodedComment.length, 2) + '\\0\\0' + '\\0\\0' + decToHex(extFileAttr, 4) + decToHex(offset, 4) + encodedFileName + extraFields + encodedComment;\n        return {\n            fileRecord: fileRecord,\n            dirRecord: dirRecord\n        };\n    };\n    var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {\n        var dirEnd = '';\n        var encodedComment = utils.transformTo('string', encodeFileName(comment));\n        dirEnd = signature.CENTRAL_DIRECTORY_END + '\\0\\0' + '\\0\\0' + decToHex(entriesCount, 2) + decToHex(entriesCount, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(encodedComment.length, 2) + encodedComment;\n        return dirEnd;\n    };\n    var generateDataDescriptors = function (streamInfo) {\n        var descriptor = '';\n        descriptor = signature.DATA_DESCRIPTOR + decToHex(streamInfo['crc32'], 4) + decToHex(streamInfo['compressedSize'], 4) + decToHex(streamInfo['uncompressedSize'], 4);\n        return descriptor;\n    };\n    function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {\n        GenericWorker.call(this, 'ZipFileWorker');\n        this.bytesWritten = 0;\n        this.zipComment = comment;\n        this.zipPlatform = platform;\n        this.encodeFileName = encodeFileName;\n        this.streamFiles = streamFiles;\n        this.accumulate = false;\n        this.contentBuffer = [];\n        this.dirRecords = [];\n        this.currentSourceOffset = 0;\n        this.entriesCount = 0;\n        this.currentFile = null;\n        this._sources = [];\n    }\n    utils.inherits(ZipFileWorker, GenericWorker);\n    ZipFileWorker.prototype.push = function (chunk) {\n        var currentFilePercent = chunk.meta.percent || 0;\n        var entriesCount = this.entriesCount;\n        var remainingFiles = this._sources.length;\n        if (this.accumulate) {\n            this.contentBuffer.push(chunk);\n        } else {\n            this.bytesWritten += chunk.data.length;\n            GenericWorker.prototype.push.call(this, {\n                data: chunk.data,\n                meta: {\n                    currentFile: this.currentFile,\n                    percent: entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100\n                }\n            });\n        }\n    };\n    ZipFileWorker.prototype.openedSource = function (streamInfo) {\n        this.currentSourceOffset = this.bytesWritten;\n        this.currentFile = streamInfo['file'].name;\n        var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n        if (streamedContent) {\n            var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n            this.push({\n                data: record.fileRecord,\n                meta: { percent: 0 }\n            });\n        } else {\n            this.accumulate = true;\n        }\n    };\n    ZipFileWorker.prototype.closedSource = function (streamInfo) {\n        this.accumulate = false;\n        var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n        var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n        this.dirRecords.push(record.dirRecord);\n        if (streamedContent) {\n            this.push({\n                data: generateDataDescriptors(streamInfo),\n                meta: { percent: 100 }\n            });\n        } else {\n            this.push({\n                data: record.fileRecord,\n                meta: { percent: 0 }\n            });\n            while (this.contentBuffer.length) {\n                this.push(this.contentBuffer.shift());\n            }\n        }\n        this.currentFile = null;\n    };\n    ZipFileWorker.prototype.flush = function () {\n        var localDirLength = this.bytesWritten;\n        for (var i = 0; i < this.dirRecords.length; i++) {\n            this.push({\n                data: this.dirRecords[i],\n                meta: { percent: 100 }\n            });\n        }\n        var centralDirLength = this.bytesWritten - localDirLength;\n        var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);\n        this.push({\n            data: dirEnd,\n            meta: { percent: 100 }\n        });\n    };\n    ZipFileWorker.prototype.prepareNextSource = function () {\n        this.previous = this._sources.shift();\n        this.openedSource(this.previous.streamInfo);\n        if (this.isPaused) {\n            this.previous.pause();\n        } else {\n            this.previous.resume();\n        }\n    };\n    ZipFileWorker.prototype.registerPrevious = function (previous) {\n        this._sources.push(previous);\n        var self = this;\n        previous.on('data', function (chunk) {\n            self.processChunk(chunk);\n        });\n        previous.on('end', function () {\n            self.closedSource(self.previous.streamInfo);\n            if (self._sources.length) {\n                self.prepareNextSource();\n            } else {\n                self.end();\n            }\n        });\n        previous.on('error', function (e) {\n            self.error(e);\n        });\n        return this;\n    };\n    ZipFileWorker.prototype.resume = function () {\n        if (!GenericWorker.prototype.resume.call(this)) {\n            return false;\n        }\n        if (!this.previous && this._sources.length) {\n            this.prepareNextSource();\n            return true;\n        }\n        if (!this.previous && !this._sources.length && !this.generatedError) {\n            this.end();\n            return true;\n        }\n    };\n    ZipFileWorker.prototype.error = function (e) {\n        var sources = this._sources;\n        if (!GenericWorker.prototype.error.call(this, e)) {\n            return false;\n        }\n        for (var i = 0; i < sources.length; i++) {\n            try {\n                sources[i].error(e);\n            } catch (e) {\n            }\n        }\n        return true;\n    };\n    ZipFileWorker.prototype.lock = function () {\n        GenericWorker.prototype.lock.call(this);\n        var sources = this._sources;\n        for (var i = 0; i < sources.length; i++) {\n            sources[i].lock();\n        }\n    };\n\n    return ZipFileWorker;\n\n});"]}