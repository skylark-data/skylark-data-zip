{"version":3,"sources":["support.js"],"names":["define","Buffer","support","base64","array","string","arraybuffer","ArrayBuffer","Uint8Array","nodebuffer","buffer","uint8array","blob","Blob","type","size","e","builder","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","getTypeOf","input","Object","prototype","toString","call","isBuffer"],"mappings":";;;;;;;AAAAA,QACI,+BACD,SAAUC,GACT,aACA,IAAIC,GAEJC,QAAiB,EACjBC,OAAgB,EAChBC,QAAiB,GAIjB,GAHAH,EAAQI,YAAqC,oBAAhBC,aAAqD,oBAAfC,WACnEN,EAAQO,WAAaP,EAAQQ,QAAS,EACtCR,EAAQS,WAAmC,oBAAfH,WACD,oBAAhBD,YACPL,EAAQU,MAAO,MACZ,CACH,IAAIF,EAAS,IAAIH,YAAY,GAC7B,IACIL,EAAQU,KAAgE,IAAzD,IAAIC,MAAMH,IAAWI,KAAM,oBAAqBC,KACjE,MAAOC,GACL,IACI,IACIC,EAAU,IADAC,KAAKC,aAAeD,KAAKE,mBAAqBF,KAAKG,gBAAkBH,KAAKI,eAExFL,EAAQM,OAAOb,GACfR,EAAQU,KAAmD,IAA5CK,EAAQO,QAAQ,mBAAmBT,KACpD,MAAOC,GACLd,EAAQU,MAAO,IAuB3B,OAlBAV,EAAQuB,UAAY,SAAUC,GAC1B,MAAqB,iBAAVA,EACA,SAEmC,mBAA1CC,OAAOC,UAAUC,SAASC,KAAKJ,GACxB,QAEPxB,EAAQO,YAAcR,EAAO8B,SAASL,GAC/B,aAEPxB,EAAQS,YAAce,aAAiBlB,WAChC,aAEPN,EAAQI,aAAeoB,aAAiBnB,YACjC,mBADX,GAKGL","file":"../support.js","sourcesContent":["define([\n    \"skylark-langx-binary/Buffer\",\n], function (Buffer) {\n    'use strict';\n    var support = {};\n\n    support.base64 = true;\n    support.array = true;\n    support.string = true;\n    support.arraybuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';\n    support.nodebuffer = support.buffer = true;///typeof Buffer !== 'undefined';\n    support.uint8array = typeof Uint8Array !== 'undefined';\n    if (typeof ArrayBuffer === 'undefined') {\n        support.blob = false;\n    } else {\n        var buffer = new ArrayBuffer(0);\n        try {\n            support.blob = new Blob([buffer], { type: 'application/zip' }).size === 0;\n        } catch (e) {\n            try {\n                var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n                var builder = new Builder();\n                builder.append(buffer);\n                support.blob = builder.getBlob('application/zip').size === 0;\n            } catch (e) {\n                support.blob = false;\n            }\n        }\n    }\n\n    support.getTypeOf = function (input) {\n        if (typeof input === 'string') {\n            return 'string';\n        }\n        if (Object.prototype.toString.call(input) === '[object Array]') {\n            return 'array';\n        }\n        if (support.nodebuffer && Buffer.isBuffer(input)) {\n            return 'nodebuffer';\n        }\n        if (support.uint8array && input instanceof Uint8Array) {\n            return 'uint8array';\n        }\n        if (support.arraybuffer && input instanceof ArrayBuffer) {\n            return 'arraybuffer';\n        }\n    };\n\n    return support;\n});"]}