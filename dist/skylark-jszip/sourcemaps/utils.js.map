{"version":3,"sources":["utils.js"],"names":["define","Buffer","transform","arrayLikeToString","constructs","support","base64","external","utils","newBlob","part","type","checkSupport","Blob","e","builder","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Error","applyFromCharCode","transformTo","outputType","input","resolve","path","parts","split","result","index","length","pop","push","join","getTypeOf","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","str","code","i","res","charCodeAt","toString","toUpperCase","delay","callback","args","setTimeout","apply","inherits","ctor","superCtor","Obj","prototype","extend","attr","arguments","Object","hasOwnProperty","call","prepareContent","name","inputData","isBinary","isOptimizedBinaryString","isBase64","Promise","then","data","blob","indexOf","FileReader","reject","reader","onload","target","onerror","error","readAsArrayBuffer","dataType","decode","string2binary"],"mappings":"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","file":"../utils.js","sourcesContent":["define([\n    'skylark-langx-binary/buffer',\n    'skylark-langx-binary/transform',\n    'skylark-langx-binary/arraylike-to-string',\n    \"skylark-langx-constructs\",\n    './support',\n    './base64',\n    './external',\n], function (Buffer,transform,arrayLikeToString,constructs,support, base64, external) {\n    'use strict';\n    var utils = {};\n\n\n    utils.newBlob = function (part, type) {\n        utils.checkSupport('blob');\n        try {\n            return new Blob([part], { type: type });\n        } catch (e) {\n            try {\n                var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n                var builder = new Builder();\n                builder.append(part);\n                return builder.getBlob(type);\n            } catch (e) {\n                throw new Error(\"Bug : can't construct the Blob.\");\n            }\n        }\n    };\n\n    utils.applyFromCharCode = arrayLikeToString;\n\n    utils.transformTo = function (outputType, input) {\n        /*\n        if (!input) {\n            input = '';\n        }\n        if (!outputType) {\n            return input;\n        }\n        utils.checkSupport(outputType);\n        var inputType = utils.getTypeOf(input);\n        var result = transform[inputType][outputType](input);\n        return result;\n        */\n        if (outputType==\"nodebuffer\") {\n            outputType = \"memory\";\n        }\n        return transform(outputType,input);\n    };\n    utils.resolve = function (path) {\n        var parts = path.split('/');\n        var result = [];\n        for (var index = 0; index < parts.length; index++) {\n            var part = parts[index];\n            if (part === '.' || part === '' && index !== 0 && index !== parts.length - 1) {\n                continue;\n            } else if (part === '..') {\n                result.pop();\n            } else {\n                result.push(part);\n            }\n        }\n        return result.join('/');\n    };\n    /*\n    utils.getTypeOf = function (input) {\n        if (typeof input === 'string') {\n            return 'string';\n        }\n        if (Object.prototype.toString.call(input) === '[object Array]') {\n            return 'array';\n        }\n        if (support.nodebuffer && Buffer.isBuffer(input)) {\n            return 'nodebuffer';\n        }\n        if (support.uint8array && input instanceof Uint8Array) {\n            return 'uint8array';\n        }\n        if (support.arraybuffer && input instanceof ArrayBuffer) {\n            return 'arraybuffer';\n        }\n    };\n    */\n    utils.getTypeOf = support.getTypeOf;\n    \n    utils.checkSupport = function (type) {\n        var supported = support[type.toLowerCase()];\n        if (!supported) {\n            throw new Error(type + ' is not supported by this platform');\n        }\n    };\n    utils.MAX_VALUE_16BITS = 65535;\n    utils.MAX_VALUE_32BITS = -1;\n    utils.pretty = function (str) {\n        var res = '', code, i;\n        for (i = 0; i < (str || '').length; i++) {\n            code = str.charCodeAt(i);\n            res += '\\\\x' + (code < 16 ? '0' : '') + code.toString(16).toUpperCase();\n        }\n        return res;\n    };\n    utils.delay = function (callback, args, self) {\n        setTimeout(function () {\n            callback.apply(self || null, args || []);\n        });\n    };\n    utils.inherits = function (ctor, superCtor) {\n        var Obj = function () {\n        };\n        Obj.prototype = superCtor.prototype;\n        ctor.prototype = new Obj();\n    };\n    utils.extend = function () {\n        var result = {}, i, attr;\n        for (i = 0; i < arguments.length; i++) {\n            for (attr in arguments[i]) {\n                if (Object.prototype.hasOwnProperty.call(arguments[i], attr) && typeof result[attr] === 'undefined') {\n                    result[attr] = arguments[i][attr];\n                }\n            }\n        }\n        return result;\n    };\n    utils.prepareContent = function (name, inputData, isBinary, isOptimizedBinaryString, isBase64) {\n        var promise = external.Promise.resolve(inputData).then(function (data) {\n            var isBlob = support.blob && (data instanceof Blob || [\n                '[object File]',\n                '[object Blob]'\n            ].indexOf(Object.prototype.toString.call(data)) !== -1);\n            if (isBlob && typeof FileReader !== 'undefined') {\n                return new external.Promise(function (resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        resolve(e.target.result);\n                    };\n                    reader.onerror = function (e) {\n                        reject(e.target.error);\n                    };\n                    reader.readAsArrayBuffer(data);\n                });\n            } else {\n                return data;\n            }\n        });\n        return promise.then(function (data) {\n            var dataType = utils.getTypeOf(data);\n            if (!dataType) {\n                return external.Promise.reject(new Error(\"Can't read the data of '\" + name + \"'. Is it \" + 'in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?'));\n            }\n            if (dataType === 'arraybuffer') {\n                data = utils.transformTo('uint8array', data);\n            } else if (dataType === 'string') {\n                if (isBase64) {\n                    data = base64.decode(data);\n                } else if (isBinary) {\n                    if (isOptimizedBinaryString !== true) {\n                        data = string2binary(data);\n                    }\n                }\n            }\n            return data;\n        });\n    };\n\n    return utils;\n});"]}