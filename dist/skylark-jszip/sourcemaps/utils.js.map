{"version":3,"sources":["utils.js"],"names":["define","Buffer","support","base64","external","utils","identity","input","stringToArrayLike","str","array","i","length","charCodeAt","newBlob","part","type","checkSupport","Blob","e","builder","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Error","arrayToStringHelper","stringifyByChunk","chunk","result","k","len","String","fromCharCode","apply","push","slice","Math","min","subarray","join","stringifyByChar","resultStr","applyCanBeUsed","uint8array","Uint8Array","nodebuffer","alloc","arrayLikeToString","getTypeOf","canUseApply","floor","arrayLikeToArrayLike","arrayFrom","arrayTo","applyFromCharCode","transform","string","Array","arraybuffer","buffer","from","byteLength","transformTo","outputType","inputType","resolve","path","parts","split","index","pop","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","code","res","toString","toUpperCase","delay","callback","args","setTimeout","inherits","ctor","superCtor","Obj","prototype","extend","attr","arguments","Object","hasOwnProperty","call","prepareContent","name","inputData","isBinary","isOptimizedBinaryString","isBase64","Promise","then","data","blob","indexOf","FileReader","reject","reader","onload","target","onerror","error","readAsArrayBuffer","dataType","decode"],"mappings":"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","file":"../utils.js","sourcesContent":["define([\n    'skylark-langx-binary/buffer',\n    './support',\n    './base64',\n    './external',\n], function (Buffer,support, base64, external) {\n    'use strict';\n    var utils = {};\n\n    function string2binary(str) {\n        var result = null;\n        if (support.uint8array) {\n            result = new Uint8Array(str.length);\n        } else {\n            result = new Array(str.length);\n        }\n        return stringToArrayLike(str, result);\n    }\n    utils.newBlob = function (part, type) {\n        utils.checkSupport('blob');\n        try {\n            return new Blob([part], { type: type });\n        } catch (e) {\n            try {\n                var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n                var builder = new Builder();\n                builder.append(part);\n                return builder.getBlob(type);\n            } catch (e) {\n                throw new Error(\"Bug : can't construct the Blob.\");\n            }\n        }\n    };\n    function identity(input) {\n        return input;\n    }\n    function stringToArrayLike(str, array) {\n        for (var i = 0; i < str.length; ++i) {\n            array[i] = str.charCodeAt(i) & 255;\n        }\n        return array;\n    }\n    var arrayToStringHelper = {\n        stringifyByChunk: function (array, type, chunk) {\n            var result = [], k = 0, len = array.length;\n            if (len <= chunk) {\n                return String.fromCharCode.apply(null, array);\n            }\n            while (k < len) {\n                if (type === 'array' || type === 'nodebuffer') {\n                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n                } else {\n                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n                }\n                k += chunk;\n            }\n            return result.join('');\n        },\n        stringifyByChar: function (array) {\n            var resultStr = '';\n            for (var i = 0; i < array.length; i++) {\n                resultStr += String.fromCharCode(array[i]);\n            }\n            return resultStr;\n        },\n        applyCanBeUsed: {\n            uint8array: function () {\n                try {\n                    return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;\n                } catch (e) {\n                    return false;\n                }\n            }(),\n            nodebuffer: function () {\n                try {\n                ///    return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.allocBuffer(1)).length === 1;\n                    return support.nodebuffer && String.fromCharCode.apply(null, Buffer.alloc(1)).length === 1;\n                } catch (e) {\n                    return false;\n                }\n            }()\n        }\n    };\n    function arrayLikeToString(array) {\n        var chunk = 65536, type = utils.getTypeOf(array), canUseApply = true;\n        if (type === 'uint8array') {\n            canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;\n        } else if (type === 'nodebuffer') {\n            canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;\n        }\n        if (canUseApply) {\n            while (chunk > 1) {\n                try {\n                    return arrayToStringHelper.stringifyByChunk(array, type, chunk);\n                } catch (e) {\n                    chunk = Math.floor(chunk / 2);\n                }\n            }\n        }\n        return arrayToStringHelper.stringifyByChar(array);\n    }\n    utils.applyFromCharCode = arrayLikeToString;\n    function arrayLikeToArrayLike(arrayFrom, arrayTo) {\n        for (var i = 0; i < arrayFrom.length; i++) {\n            arrayTo[i] = arrayFrom[i];\n        }\n        return arrayTo;\n    }\n    var transform = {};\n    transform['string'] = {\n        'string': identity,\n        'array': function (input) {\n            return stringToArrayLike(input, new Array(input.length));\n        },\n        'arraybuffer': function (input) {\n            return transform['string']['uint8array'](input).buffer;\n        },\n        'uint8array': function (input) {\n            return stringToArrayLike(input, new Uint8Array(input.length));\n        },\n        'nodebuffer': function (input) {\n            ///return stringToArrayLike(input, nodejsUtils.allocBuffer(input.length));\n            return stringToArrayLike(input, Buffer.alloc(input.length));\n        }\n    };\n    transform['array'] = {\n        'string': arrayLikeToString,\n        'array': identity,\n        'arraybuffer': function (input) {\n            return new Uint8Array(input).buffer;\n        },\n        'uint8array': function (input) {\n            return new Uint8Array(input);\n        },\n        'nodebuffer': function (input) {\n            ///return nodejsUtils.newBufferFrom(input);\n            return Buffer.from(input);\n        }\n    };\n    transform['arraybuffer'] = {\n        'string': function (input) {\n            return arrayLikeToString(new Uint8Array(input));\n        },\n        'array': function (input) {\n            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n        },\n        'arraybuffer': identity,\n        'uint8array': function (input) {\n            return new Uint8Array(input);\n        },\n        'nodebuffer': function (input) {\n            ///return nodejsUtils.newBufferFrom(new Uint8Array(input));\n            return Buffer.from(new Uint8Array(input));\n        }\n    };\n    transform['uint8array'] = {\n        'string': arrayLikeToString,\n        'array': function (input) {\n            return arrayLikeToArrayLike(input, new Array(input.length));\n        },\n        'arraybuffer': function (input) {\n            return input.buffer;\n        },\n        'uint8array': identity,\n        'nodebuffer': function (input) {\n            ///return nodejsUtils.newBufferFrom(input);\n            return Buffer.from(input);\n        }\n    };\n    transform['nodebuffer'] = {\n        'string': arrayLikeToString,\n        'array': function (input) {\n            return arrayLikeToArrayLike(input, new Array(input.length));\n        },\n        'arraybuffer': function (input) {\n            return transform['nodebuffer']['uint8array'](input).buffer;\n        },\n        'uint8array': function (input) {\n            return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n        },\n        'nodebuffer': identity\n    };\n    utils.transformTo = function (outputType, input) {\n        if (!input) {\n            input = '';\n        }\n        if (!outputType) {\n            return input;\n        }\n        utils.checkSupport(outputType);\n        var inputType = utils.getTypeOf(input);\n        var result = transform[inputType][outputType](input);\n        return result;\n    };\n    utils.resolve = function (path) {\n        var parts = path.split('/');\n        var result = [];\n        for (var index = 0; index < parts.length; index++) {\n            var part = parts[index];\n            if (part === '.' || part === '' && index !== 0 && index !== parts.length - 1) {\n                continue;\n            } else if (part === '..') {\n                result.pop();\n            } else {\n                result.push(part);\n            }\n        }\n        return result.join('/');\n    };\n    /*\n    utils.getTypeOf = function (input) {\n        if (typeof input === 'string') {\n            return 'string';\n        }\n        if (Object.prototype.toString.call(input) === '[object Array]') {\n            return 'array';\n        }\n        if (support.nodebuffer && Buffer.isBuffer(input)) {\n            return 'nodebuffer';\n        }\n        if (support.uint8array && input instanceof Uint8Array) {\n            return 'uint8array';\n        }\n        if (support.arraybuffer && input instanceof ArrayBuffer) {\n            return 'arraybuffer';\n        }\n    };\n    */\n    utils.getTypeOf = support.getTypeOf;\n    \n    utils.checkSupport = function (type) {\n        var supported = support[type.toLowerCase()];\n        if (!supported) {\n            throw new Error(type + ' is not supported by this platform');\n        }\n    };\n    utils.MAX_VALUE_16BITS = 65535;\n    utils.MAX_VALUE_32BITS = -1;\n    utils.pretty = function (str) {\n        var res = '', code, i;\n        for (i = 0; i < (str || '').length; i++) {\n            code = str.charCodeAt(i);\n            res += '\\\\x' + (code < 16 ? '0' : '') + code.toString(16).toUpperCase();\n        }\n        return res;\n    };\n    utils.delay = function (callback, args, self) {\n        setTimeout(function () {\n            callback.apply(self || null, args || []);\n        });\n    };\n    utils.inherits = function (ctor, superCtor) {\n        var Obj = function () {\n        };\n        Obj.prototype = superCtor.prototype;\n        ctor.prototype = new Obj();\n    };\n    utils.extend = function () {\n        var result = {}, i, attr;\n        for (i = 0; i < arguments.length; i++) {\n            for (attr in arguments[i]) {\n                if (Object.prototype.hasOwnProperty.call(arguments[i], attr) && typeof result[attr] === 'undefined') {\n                    result[attr] = arguments[i][attr];\n                }\n            }\n        }\n        return result;\n    };\n    utils.prepareContent = function (name, inputData, isBinary, isOptimizedBinaryString, isBase64) {\n        var promise = external.Promise.resolve(inputData).then(function (data) {\n            var isBlob = support.blob && (data instanceof Blob || [\n                '[object File]',\n                '[object Blob]'\n            ].indexOf(Object.prototype.toString.call(data)) !== -1);\n            if (isBlob && typeof FileReader !== 'undefined') {\n                return new external.Promise(function (resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        resolve(e.target.result);\n                    };\n                    reader.onerror = function (e) {\n                        reject(e.target.error);\n                    };\n                    reader.readAsArrayBuffer(data);\n                });\n            } else {\n                return data;\n            }\n        });\n        return promise.then(function (data) {\n            var dataType = utils.getTypeOf(data);\n            if (!dataType) {\n                return external.Promise.reject(new Error(\"Can't read the data of '\" + name + \"'. Is it \" + 'in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?'));\n            }\n            if (dataType === 'arraybuffer') {\n                data = utils.transformTo('uint8array', data);\n            } else if (dataType === 'string') {\n                if (isBase64) {\n                    data = base64.decode(data);\n                } else if (isBinary) {\n                    if (isOptimizedBinaryString !== true) {\n                        data = string2binary(data);\n                    }\n                }\n            }\n            return data;\n        });\n    };\n\n    return utils;\n});"]}