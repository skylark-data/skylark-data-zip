{"version":3,"sources":["compressedObject.js"],"names":["define","external","DataWorker","Crc32Probe","DataLengthProbe","CompressedObject","compressedSize","uncompressedSize","crc32","compression","data","this","compressedContent","prototype","getContentWorker","worker","Promise","resolve","pipe","uncompressWorker","that","on","streamInfo","Error","getCompressedWorker","withStreamInfo","createWorkerFrom","uncompressedWorker","compressionOptions","compressWorker"],"mappings":";;;;;;;AAAAA,QACI,aACA,sBACA,sBACA,4BACD,SAAUC,EAAUC,EAAYC,EAAYC,GAC3C,aAEA,SAASC,EAAiBC,EAAgBC,EAAkBC,EAAOC,EAAaC,GAC5EC,KAAKL,eAAiBA,EACtBK,KAAKJ,iBAAmBA,EACxBI,KAAKH,MAAQA,EACbG,KAAKF,YAAcA,EACnBE,KAAKC,kBAAoBF,EAqB7B,OAnBAL,EAAiBQ,WACbC,iBAAkB,WACd,IAAIC,EAAS,IAAIb,EAAWD,EAASe,QAAQC,QAAQN,KAAKC,oBAAoBM,KAAKP,KAAKF,YAAYU,oBAAoBD,KAAK,IAAId,EAAgB,gBAC7IgB,EAAOT,KAMX,OALAI,EAAOM,GAAG,MAAO,WACb,GAAIV,KAAKW,WAAwB,cAAMF,EAAKb,iBACxC,MAAM,IAAIgB,MAAM,2CAGjBR,GAEXS,oBAAqB,WACjB,OAAO,IAAItB,EAAWD,EAASe,QAAQC,QAAQN,KAAKC,oBAAoBa,eAAe,iBAAkBd,KAAKL,gBAAgBmB,eAAe,mBAAoBd,KAAKJ,kBAAkBkB,eAAe,QAASd,KAAKH,OAAOiB,eAAe,cAAed,KAAKF,eAGvQJ,EAAiBqB,iBAAmB,SAAUC,EAAoBlB,EAAamB,GAC3E,OAAOD,EAAmBT,KAAK,IAAIf,GAAce,KAAK,IAAId,EAAgB,qBAAqBc,KAAKT,EAAYoB,eAAeD,IAAqBV,KAAK,IAAId,EAAgB,mBAAmBqB,eAAe,cAAehB,IAG3NJ","file":"../compressedObject.js","sourcesContent":["define([\n    './external',\n    './stream/DataWorker',\n    './stream/Crc32Probe',\n    './stream/DataLengthProbe'\n], function (external, DataWorker, Crc32Probe, DataLengthProbe) {\n    'use strict';\n\n    function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n        this.compressedSize = compressedSize;\n        this.uncompressedSize = uncompressedSize;\n        this.crc32 = crc32;\n        this.compression = compression;\n        this.compressedContent = data;\n    }\n    CompressedObject.prototype = {\n        getContentWorker: function () {\n            var worker = new DataWorker(external.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe('data_length'));\n            var that = this;\n            worker.on('end', function () {\n                if (this.streamInfo['data_length'] !== that.uncompressedSize) {\n                    throw new Error('Bug : uncompressed data size mismatch');\n                }\n            });\n            return worker;\n        },\n        getCompressedWorker: function () {\n            return new DataWorker(external.Promise.resolve(this.compressedContent)).withStreamInfo('compressedSize', this.compressedSize).withStreamInfo('uncompressedSize', this.uncompressedSize).withStreamInfo('crc32', this.crc32).withStreamInfo('compression', this.compression);\n        }\n    };\n    CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n        return uncompressedWorker.pipe(new Crc32Probe()).pipe(new DataLengthProbe('uncompressedSize')).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe('compressedSize')).withStreamInfo('compression', compression);\n    };\n    \n    return CompressedObject;\n\n});"]}